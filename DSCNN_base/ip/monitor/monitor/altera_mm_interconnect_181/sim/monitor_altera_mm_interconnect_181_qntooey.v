// monitor_altera_mm_interconnect_181_qntooey.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 222

`timescale 1 ps / 1 ps
module monitor_altera_mm_interconnect_181_qntooey (
		input  wire [19:0] cpu_nios2_data_master_address,               //                 cpu_nios2_data_master.address
		output wire        cpu_nios2_data_master_waitrequest,           //                                      .waitrequest
		input  wire [3:0]  cpu_nios2_data_master_byteenable,            //                                      .byteenable
		input  wire        cpu_nios2_data_master_read,                  //                                      .read
		output wire [31:0] cpu_nios2_data_master_readdata,              //                                      .readdata
		input  wire        cpu_nios2_data_master_write,                 //                                      .write
		input  wire [31:0] cpu_nios2_data_master_writedata,             //                                      .writedata
		input  wire        cpu_nios2_data_master_debugaccess,           //                                      .debugaccess
		input  wire [19:0] cpu_nios2_instruction_master_address,        //          cpu_nios2_instruction_master.address
		output wire        cpu_nios2_instruction_master_waitrequest,    //                                      .waitrequest
		input  wire        cpu_nios2_instruction_master_read,           //                                      .read
		output wire [31:0] cpu_nios2_instruction_master_readdata,       //                                      .readdata
		output wire [0:0]  jtag_uart_0_avalon_jtag_slave_address,       //         jtag_uart_0_avalon_jtag_slave.address
		output wire        jtag_uart_0_avalon_jtag_slave_write,         //                                      .write
		output wire        jtag_uart_0_avalon_jtag_slave_read,          //                                      .read
		input  wire [31:0] jtag_uart_0_avalon_jtag_slave_readdata,      //                                      .readdata
		output wire [31:0] jtag_uart_0_avalon_jtag_slave_writedata,     //                                      .writedata
		input  wire        jtag_uart_0_avalon_jtag_slave_waitrequest,   //                                      .waitrequest
		output wire        jtag_uart_0_avalon_jtag_slave_chipselect,    //                                      .chipselect
		output wire [0:0]  sysid_qsys_0_control_slave_address,          //            sysid_qsys_0_control_slave.address
		input  wire [31:0] sysid_qsys_0_control_slave_readdata,         //                                      .readdata
		output wire [8:0]  cpu_nios2_debug_mem_slave_address,           //             cpu_nios2_debug_mem_slave.address
		output wire        cpu_nios2_debug_mem_slave_write,             //                                      .write
		output wire        cpu_nios2_debug_mem_slave_read,              //                                      .read
		input  wire [31:0] cpu_nios2_debug_mem_slave_readdata,          //                                      .readdata
		output wire [31:0] cpu_nios2_debug_mem_slave_writedata,         //                                      .writedata
		output wire [3:0]  cpu_nios2_debug_mem_slave_byteenable,        //                                      .byteenable
		input  wire        cpu_nios2_debug_mem_slave_waitrequest,       //                                      .waitrequest
		output wire        cpu_nios2_debug_mem_slave_debugaccess,       //                                      .debugaccess
		output wire [13:0] cpu_onchip_memory_s1_address,                //                  cpu_onchip_memory_s1.address
		output wire        cpu_onchip_memory_s1_write,                  //                                      .write
		input  wire [31:0] cpu_onchip_memory_s1_readdata,               //                                      .readdata
		output wire [31:0] cpu_onchip_memory_s1_writedata,              //                                      .writedata
		output wire [3:0]  cpu_onchip_memory_s1_byteenable,             //                                      .byteenable
		output wire        cpu_onchip_memory_s1_chipselect,             //                                      .chipselect
		output wire        cpu_onchip_memory_s1_clken,                  //                                      .clken
		output wire [1:0]  led_s1_address,                              //                                led_s1.address
		output wire        led_s1_write,                                //                                      .write
		input  wire [31:0] led_s1_readdata,                             //                                      .readdata
		output wire [31:0] led_s1_writedata,                            //                                      .writedata
		output wire        led_s1_chipselect,                           //                                      .chipselect
		output wire [1:0]  pio_in_s1_address,                           //                             pio_in_s1.address
		input  wire [31:0] pio_in_s1_readdata,                          //                                      .readdata
		output wire [1:0]  pio_out_s1_address,                          //                            pio_out_s1.address
		output wire        pio_out_s1_write,                            //                                      .write
		input  wire [31:0] pio_out_s1_readdata,                         //                                      .readdata
		output wire [31:0] pio_out_s1_writedata,                        //                                      .writedata
		output wire        pio_out_s1_chipselect,                       //                                      .chipselect
		output wire [1:0]  power_temp_scl_s1_address,                   //                     power_temp_scl_s1.address
		output wire        power_temp_scl_s1_write,                     //                                      .write
		input  wire [31:0] power_temp_scl_s1_readdata,                  //                                      .readdata
		output wire [31:0] power_temp_scl_s1_writedata,                 //                                      .writedata
		output wire        power_temp_scl_s1_chipselect,                //                                      .chipselect
		output wire [1:0]  power_temp_sda_s1_address,                   //                     power_temp_sda_s1.address
		output wire        power_temp_sda_s1_write,                     //                                      .write
		input  wire [31:0] power_temp_sda_s1_readdata,                  //                                      .readdata
		output wire [31:0] power_temp_sda_s1_writedata,                 //                                      .writedata
		output wire        power_temp_sda_s1_chipselect,                //                                      .chipselect
		input  wire        cpu_nios2_reset_reset_bridge_in_reset_reset, // cpu_nios2_reset_reset_bridge_in_reset.reset
		input  wire        clk_0_clk_clk                                //                             clk_0_clk.clk
	);

	wire          cpu_nios2_data_master_translator_avalon_universal_master_0_waitrequest;          // cpu_nios2_data_master_agent:av_waitrequest -> cpu_nios2_data_master_translator:uav_waitrequest
	wire   [31:0] cpu_nios2_data_master_translator_avalon_universal_master_0_readdata;             // cpu_nios2_data_master_agent:av_readdata -> cpu_nios2_data_master_translator:uav_readdata
	wire          cpu_nios2_data_master_translator_avalon_universal_master_0_debugaccess;          // cpu_nios2_data_master_translator:uav_debugaccess -> cpu_nios2_data_master_agent:av_debugaccess
	wire   [19:0] cpu_nios2_data_master_translator_avalon_universal_master_0_address;              // cpu_nios2_data_master_translator:uav_address -> cpu_nios2_data_master_agent:av_address
	wire          cpu_nios2_data_master_translator_avalon_universal_master_0_read;                 // cpu_nios2_data_master_translator:uav_read -> cpu_nios2_data_master_agent:av_read
	wire    [3:0] cpu_nios2_data_master_translator_avalon_universal_master_0_byteenable;           // cpu_nios2_data_master_translator:uav_byteenable -> cpu_nios2_data_master_agent:av_byteenable
	wire          cpu_nios2_data_master_translator_avalon_universal_master_0_readdatavalid;        // cpu_nios2_data_master_agent:av_readdatavalid -> cpu_nios2_data_master_translator:uav_readdatavalid
	wire          cpu_nios2_data_master_translator_avalon_universal_master_0_lock;                 // cpu_nios2_data_master_translator:uav_lock -> cpu_nios2_data_master_agent:av_lock
	wire          cpu_nios2_data_master_translator_avalon_universal_master_0_write;                // cpu_nios2_data_master_translator:uav_write -> cpu_nios2_data_master_agent:av_write
	wire   [31:0] cpu_nios2_data_master_translator_avalon_universal_master_0_writedata;            // cpu_nios2_data_master_translator:uav_writedata -> cpu_nios2_data_master_agent:av_writedata
	wire    [2:0] cpu_nios2_data_master_translator_avalon_universal_master_0_burstcount;           // cpu_nios2_data_master_translator:uav_burstcount -> cpu_nios2_data_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                               // rsp_mux:src_valid -> cpu_nios2_data_master_agent:rp_valid
	wire  [106:0] rsp_mux_src_data;                                                                // rsp_mux:src_data -> cpu_nios2_data_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                               // cpu_nios2_data_master_agent:rp_ready -> rsp_mux:src_ready
	wire    [8:0] rsp_mux_src_channel;                                                             // rsp_mux:src_channel -> cpu_nios2_data_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                       // rsp_mux:src_startofpacket -> cpu_nios2_data_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                         // rsp_mux:src_endofpacket -> cpu_nios2_data_master_agent:rp_endofpacket
	wire          cpu_nios2_instruction_master_translator_avalon_universal_master_0_waitrequest;   // cpu_nios2_instruction_master_agent:av_waitrequest -> cpu_nios2_instruction_master_translator:uav_waitrequest
	wire   [31:0] cpu_nios2_instruction_master_translator_avalon_universal_master_0_readdata;      // cpu_nios2_instruction_master_agent:av_readdata -> cpu_nios2_instruction_master_translator:uav_readdata
	wire          cpu_nios2_instruction_master_translator_avalon_universal_master_0_debugaccess;   // cpu_nios2_instruction_master_translator:uav_debugaccess -> cpu_nios2_instruction_master_agent:av_debugaccess
	wire   [19:0] cpu_nios2_instruction_master_translator_avalon_universal_master_0_address;       // cpu_nios2_instruction_master_translator:uav_address -> cpu_nios2_instruction_master_agent:av_address
	wire          cpu_nios2_instruction_master_translator_avalon_universal_master_0_read;          // cpu_nios2_instruction_master_translator:uav_read -> cpu_nios2_instruction_master_agent:av_read
	wire    [3:0] cpu_nios2_instruction_master_translator_avalon_universal_master_0_byteenable;    // cpu_nios2_instruction_master_translator:uav_byteenable -> cpu_nios2_instruction_master_agent:av_byteenable
	wire          cpu_nios2_instruction_master_translator_avalon_universal_master_0_readdatavalid; // cpu_nios2_instruction_master_agent:av_readdatavalid -> cpu_nios2_instruction_master_translator:uav_readdatavalid
	wire          cpu_nios2_instruction_master_translator_avalon_universal_master_0_lock;          // cpu_nios2_instruction_master_translator:uav_lock -> cpu_nios2_instruction_master_agent:av_lock
	wire          cpu_nios2_instruction_master_translator_avalon_universal_master_0_write;         // cpu_nios2_instruction_master_translator:uav_write -> cpu_nios2_instruction_master_agent:av_write
	wire   [31:0] cpu_nios2_instruction_master_translator_avalon_universal_master_0_writedata;     // cpu_nios2_instruction_master_translator:uav_writedata -> cpu_nios2_instruction_master_agent:av_writedata
	wire    [2:0] cpu_nios2_instruction_master_translator_avalon_universal_master_0_burstcount;    // cpu_nios2_instruction_master_translator:uav_burstcount -> cpu_nios2_instruction_master_agent:av_burstcount
	wire          rsp_mux_001_src_valid;                                                           // rsp_mux_001:src_valid -> cpu_nios2_instruction_master_agent:rp_valid
	wire  [106:0] rsp_mux_001_src_data;                                                            // rsp_mux_001:src_data -> cpu_nios2_instruction_master_agent:rp_data
	wire          rsp_mux_001_src_ready;                                                           // cpu_nios2_instruction_master_agent:rp_ready -> rsp_mux_001:src_ready
	wire    [8:0] rsp_mux_001_src_channel;                                                         // rsp_mux_001:src_channel -> cpu_nios2_instruction_master_agent:rp_channel
	wire          rsp_mux_001_src_startofpacket;                                                   // rsp_mux_001:src_startofpacket -> cpu_nios2_instruction_master_agent:rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                     // rsp_mux_001:src_endofpacket -> cpu_nios2_instruction_master_agent:rp_endofpacket
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_readdata;                                 // jtag_uart_0_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest;                              // jtag_uart_0_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_0_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess;                              // jtag_uart_0_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_0_avalon_jtag_slave_translator:uav_debugaccess
	wire   [19:0] jtag_uart_0_avalon_jtag_slave_agent_m0_address;                                  // jtag_uart_0_avalon_jtag_slave_agent:m0_address -> jtag_uart_0_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable;                               // jtag_uart_0_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_0_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_read;                                     // jtag_uart_0_avalon_jtag_slave_agent:m0_read -> jtag_uart_0_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid;                            // jtag_uart_0_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_lock;                                     // jtag_uart_0_avalon_jtag_slave_agent:m0_lock -> jtag_uart_0_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_writedata;                                // jtag_uart_0_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_0_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_write;                                    // jtag_uart_0_avalon_jtag_slave_agent:m0_write -> jtag_uart_0_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount;                               // jtag_uart_0_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_0_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid;                             // jtag_uart_0_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [107:0] jtag_uart_0_avalon_jtag_slave_agent_rf_source_data;                              // jtag_uart_0_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready;                             // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_0_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket;                     // jtag_uart_0_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket;                       // jtag_uart_0_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid;                          // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_valid
	wire  [107:0] jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data;                           // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready;                          // jtag_uart_0_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                  // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                    // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid;                        // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_valid -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data;                         // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_data -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready;                        // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_src_valid;                                                               // cmd_mux:src_valid -> jtag_uart_0_avalon_jtag_slave_agent:cp_valid
	wire  [106:0] cmd_mux_src_data;                                                                // cmd_mux:src_data -> jtag_uart_0_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_src_ready;                                                               // jtag_uart_0_avalon_jtag_slave_agent:cp_ready -> cmd_mux:src_ready
	wire    [8:0] cmd_mux_src_channel;                                                             // cmd_mux:src_channel -> jtag_uart_0_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                       // cmd_mux:src_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                         // cmd_mux:src_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_endofpacket
	wire   [31:0] sysid_qsys_0_control_slave_agent_m0_readdata;                                    // sysid_qsys_0_control_slave_translator:uav_readdata -> sysid_qsys_0_control_slave_agent:m0_readdata
	wire          sysid_qsys_0_control_slave_agent_m0_waitrequest;                                 // sysid_qsys_0_control_slave_translator:uav_waitrequest -> sysid_qsys_0_control_slave_agent:m0_waitrequest
	wire          sysid_qsys_0_control_slave_agent_m0_debugaccess;                                 // sysid_qsys_0_control_slave_agent:m0_debugaccess -> sysid_qsys_0_control_slave_translator:uav_debugaccess
	wire   [19:0] sysid_qsys_0_control_slave_agent_m0_address;                                     // sysid_qsys_0_control_slave_agent:m0_address -> sysid_qsys_0_control_slave_translator:uav_address
	wire    [3:0] sysid_qsys_0_control_slave_agent_m0_byteenable;                                  // sysid_qsys_0_control_slave_agent:m0_byteenable -> sysid_qsys_0_control_slave_translator:uav_byteenable
	wire          sysid_qsys_0_control_slave_agent_m0_read;                                        // sysid_qsys_0_control_slave_agent:m0_read -> sysid_qsys_0_control_slave_translator:uav_read
	wire          sysid_qsys_0_control_slave_agent_m0_readdatavalid;                               // sysid_qsys_0_control_slave_translator:uav_readdatavalid -> sysid_qsys_0_control_slave_agent:m0_readdatavalid
	wire          sysid_qsys_0_control_slave_agent_m0_lock;                                        // sysid_qsys_0_control_slave_agent:m0_lock -> sysid_qsys_0_control_slave_translator:uav_lock
	wire   [31:0] sysid_qsys_0_control_slave_agent_m0_writedata;                                   // sysid_qsys_0_control_slave_agent:m0_writedata -> sysid_qsys_0_control_slave_translator:uav_writedata
	wire          sysid_qsys_0_control_slave_agent_m0_write;                                       // sysid_qsys_0_control_slave_agent:m0_write -> sysid_qsys_0_control_slave_translator:uav_write
	wire    [2:0] sysid_qsys_0_control_slave_agent_m0_burstcount;                                  // sysid_qsys_0_control_slave_agent:m0_burstcount -> sysid_qsys_0_control_slave_translator:uav_burstcount
	wire          sysid_qsys_0_control_slave_agent_rf_source_valid;                                // sysid_qsys_0_control_slave_agent:rf_source_valid -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_valid
	wire  [107:0] sysid_qsys_0_control_slave_agent_rf_source_data;                                 // sysid_qsys_0_control_slave_agent:rf_source_data -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_data
	wire          sysid_qsys_0_control_slave_agent_rf_source_ready;                                // sysid_qsys_0_control_slave_agent_rsp_fifo:in_ready -> sysid_qsys_0_control_slave_agent:rf_source_ready
	wire          sysid_qsys_0_control_slave_agent_rf_source_startofpacket;                        // sysid_qsys_0_control_slave_agent:rf_source_startofpacket -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_qsys_0_control_slave_agent_rf_source_endofpacket;                          // sysid_qsys_0_control_slave_agent:rf_source_endofpacket -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid;                             // sysid_qsys_0_control_slave_agent_rsp_fifo:out_valid -> sysid_qsys_0_control_slave_agent:rf_sink_valid
	wire  [107:0] sysid_qsys_0_control_slave_agent_rsp_fifo_out_data;                              // sysid_qsys_0_control_slave_agent_rsp_fifo:out_data -> sysid_qsys_0_control_slave_agent:rf_sink_data
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready;                             // sysid_qsys_0_control_slave_agent:rf_sink_ready -> sysid_qsys_0_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket;                     // sysid_qsys_0_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_qsys_0_control_slave_agent:rf_sink_startofpacket
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket;                       // sysid_qsys_0_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_qsys_0_control_slave_agent:rf_sink_endofpacket
	wire          sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid;                           // sysid_qsys_0_control_slave_agent:rdata_fifo_src_valid -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] sysid_qsys_0_control_slave_agent_rdata_fifo_src_data;                            // sysid_qsys_0_control_slave_agent:rdata_fifo_src_data -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_data
	wire          sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready;                           // sysid_qsys_0_control_slave_agent:rdata_fifo_sink_ready -> sysid_qsys_0_control_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_001_src_valid;                                                           // cmd_mux_001:src_valid -> sysid_qsys_0_control_slave_agent:cp_valid
	wire  [106:0] cmd_mux_001_src_data;                                                            // cmd_mux_001:src_data -> sysid_qsys_0_control_slave_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                           // sysid_qsys_0_control_slave_agent:cp_ready -> cmd_mux_001:src_ready
	wire    [8:0] cmd_mux_001_src_channel;                                                         // cmd_mux_001:src_channel -> sysid_qsys_0_control_slave_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                   // cmd_mux_001:src_startofpacket -> sysid_qsys_0_control_slave_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                     // cmd_mux_001:src_endofpacket -> sysid_qsys_0_control_slave_agent:cp_endofpacket
	wire   [31:0] cpu_nios2_debug_mem_slave_agent_m0_readdata;                                     // cpu_nios2_debug_mem_slave_translator:uav_readdata -> cpu_nios2_debug_mem_slave_agent:m0_readdata
	wire          cpu_nios2_debug_mem_slave_agent_m0_waitrequest;                                  // cpu_nios2_debug_mem_slave_translator:uav_waitrequest -> cpu_nios2_debug_mem_slave_agent:m0_waitrequest
	wire          cpu_nios2_debug_mem_slave_agent_m0_debugaccess;                                  // cpu_nios2_debug_mem_slave_agent:m0_debugaccess -> cpu_nios2_debug_mem_slave_translator:uav_debugaccess
	wire   [19:0] cpu_nios2_debug_mem_slave_agent_m0_address;                                      // cpu_nios2_debug_mem_slave_agent:m0_address -> cpu_nios2_debug_mem_slave_translator:uav_address
	wire    [3:0] cpu_nios2_debug_mem_slave_agent_m0_byteenable;                                   // cpu_nios2_debug_mem_slave_agent:m0_byteenable -> cpu_nios2_debug_mem_slave_translator:uav_byteenable
	wire          cpu_nios2_debug_mem_slave_agent_m0_read;                                         // cpu_nios2_debug_mem_slave_agent:m0_read -> cpu_nios2_debug_mem_slave_translator:uav_read
	wire          cpu_nios2_debug_mem_slave_agent_m0_readdatavalid;                                // cpu_nios2_debug_mem_slave_translator:uav_readdatavalid -> cpu_nios2_debug_mem_slave_agent:m0_readdatavalid
	wire          cpu_nios2_debug_mem_slave_agent_m0_lock;                                         // cpu_nios2_debug_mem_slave_agent:m0_lock -> cpu_nios2_debug_mem_slave_translator:uav_lock
	wire   [31:0] cpu_nios2_debug_mem_slave_agent_m0_writedata;                                    // cpu_nios2_debug_mem_slave_agent:m0_writedata -> cpu_nios2_debug_mem_slave_translator:uav_writedata
	wire          cpu_nios2_debug_mem_slave_agent_m0_write;                                        // cpu_nios2_debug_mem_slave_agent:m0_write -> cpu_nios2_debug_mem_slave_translator:uav_write
	wire    [2:0] cpu_nios2_debug_mem_slave_agent_m0_burstcount;                                   // cpu_nios2_debug_mem_slave_agent:m0_burstcount -> cpu_nios2_debug_mem_slave_translator:uav_burstcount
	wire          cpu_nios2_debug_mem_slave_agent_rf_source_valid;                                 // cpu_nios2_debug_mem_slave_agent:rf_source_valid -> cpu_nios2_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [107:0] cpu_nios2_debug_mem_slave_agent_rf_source_data;                                  // cpu_nios2_debug_mem_slave_agent:rf_source_data -> cpu_nios2_debug_mem_slave_agent_rsp_fifo:in_data
	wire          cpu_nios2_debug_mem_slave_agent_rf_source_ready;                                 // cpu_nios2_debug_mem_slave_agent_rsp_fifo:in_ready -> cpu_nios2_debug_mem_slave_agent:rf_source_ready
	wire          cpu_nios2_debug_mem_slave_agent_rf_source_startofpacket;                         // cpu_nios2_debug_mem_slave_agent:rf_source_startofpacket -> cpu_nios2_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          cpu_nios2_debug_mem_slave_agent_rf_source_endofpacket;                           // cpu_nios2_debug_mem_slave_agent:rf_source_endofpacket -> cpu_nios2_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          cpu_nios2_debug_mem_slave_agent_rsp_fifo_out_valid;                              // cpu_nios2_debug_mem_slave_agent_rsp_fifo:out_valid -> cpu_nios2_debug_mem_slave_agent:rf_sink_valid
	wire  [107:0] cpu_nios2_debug_mem_slave_agent_rsp_fifo_out_data;                               // cpu_nios2_debug_mem_slave_agent_rsp_fifo:out_data -> cpu_nios2_debug_mem_slave_agent:rf_sink_data
	wire          cpu_nios2_debug_mem_slave_agent_rsp_fifo_out_ready;                              // cpu_nios2_debug_mem_slave_agent:rf_sink_ready -> cpu_nios2_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          cpu_nios2_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                      // cpu_nios2_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> cpu_nios2_debug_mem_slave_agent:rf_sink_startofpacket
	wire          cpu_nios2_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                        // cpu_nios2_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> cpu_nios2_debug_mem_slave_agent:rf_sink_endofpacket
	wire          cpu_nios2_debug_mem_slave_agent_rdata_fifo_src_valid;                            // cpu_nios2_debug_mem_slave_agent:rdata_fifo_src_valid -> cpu_nios2_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] cpu_nios2_debug_mem_slave_agent_rdata_fifo_src_data;                             // cpu_nios2_debug_mem_slave_agent:rdata_fifo_src_data -> cpu_nios2_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          cpu_nios2_debug_mem_slave_agent_rdata_fifo_src_ready;                            // cpu_nios2_debug_mem_slave_agent:rdata_fifo_sink_ready -> cpu_nios2_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_002_src_valid;                                                           // cmd_mux_002:src_valid -> cpu_nios2_debug_mem_slave_agent:cp_valid
	wire  [106:0] cmd_mux_002_src_data;                                                            // cmd_mux_002:src_data -> cpu_nios2_debug_mem_slave_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                           // cpu_nios2_debug_mem_slave_agent:cp_ready -> cmd_mux_002:src_ready
	wire    [8:0] cmd_mux_002_src_channel;                                                         // cmd_mux_002:src_channel -> cpu_nios2_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                   // cmd_mux_002:src_startofpacket -> cpu_nios2_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                     // cmd_mux_002:src_endofpacket -> cpu_nios2_debug_mem_slave_agent:cp_endofpacket
	wire   [31:0] cpu_onchip_memory_s1_agent_m0_readdata;                                          // cpu_onchip_memory_s1_translator:uav_readdata -> cpu_onchip_memory_s1_agent:m0_readdata
	wire          cpu_onchip_memory_s1_agent_m0_waitrequest;                                       // cpu_onchip_memory_s1_translator:uav_waitrequest -> cpu_onchip_memory_s1_agent:m0_waitrequest
	wire          cpu_onchip_memory_s1_agent_m0_debugaccess;                                       // cpu_onchip_memory_s1_agent:m0_debugaccess -> cpu_onchip_memory_s1_translator:uav_debugaccess
	wire   [19:0] cpu_onchip_memory_s1_agent_m0_address;                                           // cpu_onchip_memory_s1_agent:m0_address -> cpu_onchip_memory_s1_translator:uav_address
	wire    [3:0] cpu_onchip_memory_s1_agent_m0_byteenable;                                        // cpu_onchip_memory_s1_agent:m0_byteenable -> cpu_onchip_memory_s1_translator:uav_byteenable
	wire          cpu_onchip_memory_s1_agent_m0_read;                                              // cpu_onchip_memory_s1_agent:m0_read -> cpu_onchip_memory_s1_translator:uav_read
	wire          cpu_onchip_memory_s1_agent_m0_readdatavalid;                                     // cpu_onchip_memory_s1_translator:uav_readdatavalid -> cpu_onchip_memory_s1_agent:m0_readdatavalid
	wire          cpu_onchip_memory_s1_agent_m0_lock;                                              // cpu_onchip_memory_s1_agent:m0_lock -> cpu_onchip_memory_s1_translator:uav_lock
	wire   [31:0] cpu_onchip_memory_s1_agent_m0_writedata;                                         // cpu_onchip_memory_s1_agent:m0_writedata -> cpu_onchip_memory_s1_translator:uav_writedata
	wire          cpu_onchip_memory_s1_agent_m0_write;                                             // cpu_onchip_memory_s1_agent:m0_write -> cpu_onchip_memory_s1_translator:uav_write
	wire    [2:0] cpu_onchip_memory_s1_agent_m0_burstcount;                                        // cpu_onchip_memory_s1_agent:m0_burstcount -> cpu_onchip_memory_s1_translator:uav_burstcount
	wire          cpu_onchip_memory_s1_agent_rf_source_valid;                                      // cpu_onchip_memory_s1_agent:rf_source_valid -> cpu_onchip_memory_s1_agent_rsp_fifo:in_valid
	wire  [107:0] cpu_onchip_memory_s1_agent_rf_source_data;                                       // cpu_onchip_memory_s1_agent:rf_source_data -> cpu_onchip_memory_s1_agent_rsp_fifo:in_data
	wire          cpu_onchip_memory_s1_agent_rf_source_ready;                                      // cpu_onchip_memory_s1_agent_rsp_fifo:in_ready -> cpu_onchip_memory_s1_agent:rf_source_ready
	wire          cpu_onchip_memory_s1_agent_rf_source_startofpacket;                              // cpu_onchip_memory_s1_agent:rf_source_startofpacket -> cpu_onchip_memory_s1_agent_rsp_fifo:in_startofpacket
	wire          cpu_onchip_memory_s1_agent_rf_source_endofpacket;                                // cpu_onchip_memory_s1_agent:rf_source_endofpacket -> cpu_onchip_memory_s1_agent_rsp_fifo:in_endofpacket
	wire          cpu_onchip_memory_s1_agent_rsp_fifo_out_valid;                                   // cpu_onchip_memory_s1_agent_rsp_fifo:out_valid -> cpu_onchip_memory_s1_agent:rf_sink_valid
	wire  [107:0] cpu_onchip_memory_s1_agent_rsp_fifo_out_data;                                    // cpu_onchip_memory_s1_agent_rsp_fifo:out_data -> cpu_onchip_memory_s1_agent:rf_sink_data
	wire          cpu_onchip_memory_s1_agent_rsp_fifo_out_ready;                                   // cpu_onchip_memory_s1_agent:rf_sink_ready -> cpu_onchip_memory_s1_agent_rsp_fifo:out_ready
	wire          cpu_onchip_memory_s1_agent_rsp_fifo_out_startofpacket;                           // cpu_onchip_memory_s1_agent_rsp_fifo:out_startofpacket -> cpu_onchip_memory_s1_agent:rf_sink_startofpacket
	wire          cpu_onchip_memory_s1_agent_rsp_fifo_out_endofpacket;                             // cpu_onchip_memory_s1_agent_rsp_fifo:out_endofpacket -> cpu_onchip_memory_s1_agent:rf_sink_endofpacket
	wire          cpu_onchip_memory_s1_agent_rdata_fifo_src_valid;                                 // cpu_onchip_memory_s1_agent:rdata_fifo_src_valid -> cpu_onchip_memory_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] cpu_onchip_memory_s1_agent_rdata_fifo_src_data;                                  // cpu_onchip_memory_s1_agent:rdata_fifo_src_data -> cpu_onchip_memory_s1_agent:rdata_fifo_sink_data
	wire          cpu_onchip_memory_s1_agent_rdata_fifo_src_ready;                                 // cpu_onchip_memory_s1_agent:rdata_fifo_sink_ready -> cpu_onchip_memory_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_003_src_valid;                                                           // cmd_mux_003:src_valid -> cpu_onchip_memory_s1_agent:cp_valid
	wire  [106:0] cmd_mux_003_src_data;                                                            // cmd_mux_003:src_data -> cpu_onchip_memory_s1_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                           // cpu_onchip_memory_s1_agent:cp_ready -> cmd_mux_003:src_ready
	wire    [8:0] cmd_mux_003_src_channel;                                                         // cmd_mux_003:src_channel -> cpu_onchip_memory_s1_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                   // cmd_mux_003:src_startofpacket -> cpu_onchip_memory_s1_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                     // cmd_mux_003:src_endofpacket -> cpu_onchip_memory_s1_agent:cp_endofpacket
	wire   [31:0] led_s1_agent_m0_readdata;                                                        // led_s1_translator:uav_readdata -> led_s1_agent:m0_readdata
	wire          led_s1_agent_m0_waitrequest;                                                     // led_s1_translator:uav_waitrequest -> led_s1_agent:m0_waitrequest
	wire          led_s1_agent_m0_debugaccess;                                                     // led_s1_agent:m0_debugaccess -> led_s1_translator:uav_debugaccess
	wire   [19:0] led_s1_agent_m0_address;                                                         // led_s1_agent:m0_address -> led_s1_translator:uav_address
	wire    [3:0] led_s1_agent_m0_byteenable;                                                      // led_s1_agent:m0_byteenable -> led_s1_translator:uav_byteenable
	wire          led_s1_agent_m0_read;                                                            // led_s1_agent:m0_read -> led_s1_translator:uav_read
	wire          led_s1_agent_m0_readdatavalid;                                                   // led_s1_translator:uav_readdatavalid -> led_s1_agent:m0_readdatavalid
	wire          led_s1_agent_m0_lock;                                                            // led_s1_agent:m0_lock -> led_s1_translator:uav_lock
	wire   [31:0] led_s1_agent_m0_writedata;                                                       // led_s1_agent:m0_writedata -> led_s1_translator:uav_writedata
	wire          led_s1_agent_m0_write;                                                           // led_s1_agent:m0_write -> led_s1_translator:uav_write
	wire    [2:0] led_s1_agent_m0_burstcount;                                                      // led_s1_agent:m0_burstcount -> led_s1_translator:uav_burstcount
	wire          led_s1_agent_rf_source_valid;                                                    // led_s1_agent:rf_source_valid -> led_s1_agent_rsp_fifo:in_valid
	wire  [107:0] led_s1_agent_rf_source_data;                                                     // led_s1_agent:rf_source_data -> led_s1_agent_rsp_fifo:in_data
	wire          led_s1_agent_rf_source_ready;                                                    // led_s1_agent_rsp_fifo:in_ready -> led_s1_agent:rf_source_ready
	wire          led_s1_agent_rf_source_startofpacket;                                            // led_s1_agent:rf_source_startofpacket -> led_s1_agent_rsp_fifo:in_startofpacket
	wire          led_s1_agent_rf_source_endofpacket;                                              // led_s1_agent:rf_source_endofpacket -> led_s1_agent_rsp_fifo:in_endofpacket
	wire          led_s1_agent_rsp_fifo_out_valid;                                                 // led_s1_agent_rsp_fifo:out_valid -> led_s1_agent:rf_sink_valid
	wire  [107:0] led_s1_agent_rsp_fifo_out_data;                                                  // led_s1_agent_rsp_fifo:out_data -> led_s1_agent:rf_sink_data
	wire          led_s1_agent_rsp_fifo_out_ready;                                                 // led_s1_agent:rf_sink_ready -> led_s1_agent_rsp_fifo:out_ready
	wire          led_s1_agent_rsp_fifo_out_startofpacket;                                         // led_s1_agent_rsp_fifo:out_startofpacket -> led_s1_agent:rf_sink_startofpacket
	wire          led_s1_agent_rsp_fifo_out_endofpacket;                                           // led_s1_agent_rsp_fifo:out_endofpacket -> led_s1_agent:rf_sink_endofpacket
	wire          led_s1_agent_rdata_fifo_src_valid;                                               // led_s1_agent:rdata_fifo_src_valid -> led_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] led_s1_agent_rdata_fifo_src_data;                                                // led_s1_agent:rdata_fifo_src_data -> led_s1_agent:rdata_fifo_sink_data
	wire          led_s1_agent_rdata_fifo_src_ready;                                               // led_s1_agent:rdata_fifo_sink_ready -> led_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_004_src_valid;                                                           // cmd_mux_004:src_valid -> led_s1_agent:cp_valid
	wire  [106:0] cmd_mux_004_src_data;                                                            // cmd_mux_004:src_data -> led_s1_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                           // led_s1_agent:cp_ready -> cmd_mux_004:src_ready
	wire    [8:0] cmd_mux_004_src_channel;                                                         // cmd_mux_004:src_channel -> led_s1_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                   // cmd_mux_004:src_startofpacket -> led_s1_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                     // cmd_mux_004:src_endofpacket -> led_s1_agent:cp_endofpacket
	wire   [31:0] pio_in_s1_agent_m0_readdata;                                                     // pio_in_s1_translator:uav_readdata -> pio_in_s1_agent:m0_readdata
	wire          pio_in_s1_agent_m0_waitrequest;                                                  // pio_in_s1_translator:uav_waitrequest -> pio_in_s1_agent:m0_waitrequest
	wire          pio_in_s1_agent_m0_debugaccess;                                                  // pio_in_s1_agent:m0_debugaccess -> pio_in_s1_translator:uav_debugaccess
	wire   [19:0] pio_in_s1_agent_m0_address;                                                      // pio_in_s1_agent:m0_address -> pio_in_s1_translator:uav_address
	wire    [3:0] pio_in_s1_agent_m0_byteenable;                                                   // pio_in_s1_agent:m0_byteenable -> pio_in_s1_translator:uav_byteenable
	wire          pio_in_s1_agent_m0_read;                                                         // pio_in_s1_agent:m0_read -> pio_in_s1_translator:uav_read
	wire          pio_in_s1_agent_m0_readdatavalid;                                                // pio_in_s1_translator:uav_readdatavalid -> pio_in_s1_agent:m0_readdatavalid
	wire          pio_in_s1_agent_m0_lock;                                                         // pio_in_s1_agent:m0_lock -> pio_in_s1_translator:uav_lock
	wire   [31:0] pio_in_s1_agent_m0_writedata;                                                    // pio_in_s1_agent:m0_writedata -> pio_in_s1_translator:uav_writedata
	wire          pio_in_s1_agent_m0_write;                                                        // pio_in_s1_agent:m0_write -> pio_in_s1_translator:uav_write
	wire    [2:0] pio_in_s1_agent_m0_burstcount;                                                   // pio_in_s1_agent:m0_burstcount -> pio_in_s1_translator:uav_burstcount
	wire          pio_in_s1_agent_rf_source_valid;                                                 // pio_in_s1_agent:rf_source_valid -> pio_in_s1_agent_rsp_fifo:in_valid
	wire  [107:0] pio_in_s1_agent_rf_source_data;                                                  // pio_in_s1_agent:rf_source_data -> pio_in_s1_agent_rsp_fifo:in_data
	wire          pio_in_s1_agent_rf_source_ready;                                                 // pio_in_s1_agent_rsp_fifo:in_ready -> pio_in_s1_agent:rf_source_ready
	wire          pio_in_s1_agent_rf_source_startofpacket;                                         // pio_in_s1_agent:rf_source_startofpacket -> pio_in_s1_agent_rsp_fifo:in_startofpacket
	wire          pio_in_s1_agent_rf_source_endofpacket;                                           // pio_in_s1_agent:rf_source_endofpacket -> pio_in_s1_agent_rsp_fifo:in_endofpacket
	wire          pio_in_s1_agent_rsp_fifo_out_valid;                                              // pio_in_s1_agent_rsp_fifo:out_valid -> pio_in_s1_agent:rf_sink_valid
	wire  [107:0] pio_in_s1_agent_rsp_fifo_out_data;                                               // pio_in_s1_agent_rsp_fifo:out_data -> pio_in_s1_agent:rf_sink_data
	wire          pio_in_s1_agent_rsp_fifo_out_ready;                                              // pio_in_s1_agent:rf_sink_ready -> pio_in_s1_agent_rsp_fifo:out_ready
	wire          pio_in_s1_agent_rsp_fifo_out_startofpacket;                                      // pio_in_s1_agent_rsp_fifo:out_startofpacket -> pio_in_s1_agent:rf_sink_startofpacket
	wire          pio_in_s1_agent_rsp_fifo_out_endofpacket;                                        // pio_in_s1_agent_rsp_fifo:out_endofpacket -> pio_in_s1_agent:rf_sink_endofpacket
	wire          pio_in_s1_agent_rdata_fifo_src_valid;                                            // pio_in_s1_agent:rdata_fifo_src_valid -> pio_in_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] pio_in_s1_agent_rdata_fifo_src_data;                                             // pio_in_s1_agent:rdata_fifo_src_data -> pio_in_s1_agent:rdata_fifo_sink_data
	wire          pio_in_s1_agent_rdata_fifo_src_ready;                                            // pio_in_s1_agent:rdata_fifo_sink_ready -> pio_in_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_005_src_valid;                                                           // cmd_mux_005:src_valid -> pio_in_s1_agent:cp_valid
	wire  [106:0] cmd_mux_005_src_data;                                                            // cmd_mux_005:src_data -> pio_in_s1_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                           // pio_in_s1_agent:cp_ready -> cmd_mux_005:src_ready
	wire    [8:0] cmd_mux_005_src_channel;                                                         // cmd_mux_005:src_channel -> pio_in_s1_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                   // cmd_mux_005:src_startofpacket -> pio_in_s1_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                     // cmd_mux_005:src_endofpacket -> pio_in_s1_agent:cp_endofpacket
	wire   [31:0] pio_out_s1_agent_m0_readdata;                                                    // pio_out_s1_translator:uav_readdata -> pio_out_s1_agent:m0_readdata
	wire          pio_out_s1_agent_m0_waitrequest;                                                 // pio_out_s1_translator:uav_waitrequest -> pio_out_s1_agent:m0_waitrequest
	wire          pio_out_s1_agent_m0_debugaccess;                                                 // pio_out_s1_agent:m0_debugaccess -> pio_out_s1_translator:uav_debugaccess
	wire   [19:0] pio_out_s1_agent_m0_address;                                                     // pio_out_s1_agent:m0_address -> pio_out_s1_translator:uav_address
	wire    [3:0] pio_out_s1_agent_m0_byteenable;                                                  // pio_out_s1_agent:m0_byteenable -> pio_out_s1_translator:uav_byteenable
	wire          pio_out_s1_agent_m0_read;                                                        // pio_out_s1_agent:m0_read -> pio_out_s1_translator:uav_read
	wire          pio_out_s1_agent_m0_readdatavalid;                                               // pio_out_s1_translator:uav_readdatavalid -> pio_out_s1_agent:m0_readdatavalid
	wire          pio_out_s1_agent_m0_lock;                                                        // pio_out_s1_agent:m0_lock -> pio_out_s1_translator:uav_lock
	wire   [31:0] pio_out_s1_agent_m0_writedata;                                                   // pio_out_s1_agent:m0_writedata -> pio_out_s1_translator:uav_writedata
	wire          pio_out_s1_agent_m0_write;                                                       // pio_out_s1_agent:m0_write -> pio_out_s1_translator:uav_write
	wire    [2:0] pio_out_s1_agent_m0_burstcount;                                                  // pio_out_s1_agent:m0_burstcount -> pio_out_s1_translator:uav_burstcount
	wire          pio_out_s1_agent_rf_source_valid;                                                // pio_out_s1_agent:rf_source_valid -> pio_out_s1_agent_rsp_fifo:in_valid
	wire  [107:0] pio_out_s1_agent_rf_source_data;                                                 // pio_out_s1_agent:rf_source_data -> pio_out_s1_agent_rsp_fifo:in_data
	wire          pio_out_s1_agent_rf_source_ready;                                                // pio_out_s1_agent_rsp_fifo:in_ready -> pio_out_s1_agent:rf_source_ready
	wire          pio_out_s1_agent_rf_source_startofpacket;                                        // pio_out_s1_agent:rf_source_startofpacket -> pio_out_s1_agent_rsp_fifo:in_startofpacket
	wire          pio_out_s1_agent_rf_source_endofpacket;                                          // pio_out_s1_agent:rf_source_endofpacket -> pio_out_s1_agent_rsp_fifo:in_endofpacket
	wire          pio_out_s1_agent_rsp_fifo_out_valid;                                             // pio_out_s1_agent_rsp_fifo:out_valid -> pio_out_s1_agent:rf_sink_valid
	wire  [107:0] pio_out_s1_agent_rsp_fifo_out_data;                                              // pio_out_s1_agent_rsp_fifo:out_data -> pio_out_s1_agent:rf_sink_data
	wire          pio_out_s1_agent_rsp_fifo_out_ready;                                             // pio_out_s1_agent:rf_sink_ready -> pio_out_s1_agent_rsp_fifo:out_ready
	wire          pio_out_s1_agent_rsp_fifo_out_startofpacket;                                     // pio_out_s1_agent_rsp_fifo:out_startofpacket -> pio_out_s1_agent:rf_sink_startofpacket
	wire          pio_out_s1_agent_rsp_fifo_out_endofpacket;                                       // pio_out_s1_agent_rsp_fifo:out_endofpacket -> pio_out_s1_agent:rf_sink_endofpacket
	wire          pio_out_s1_agent_rdata_fifo_src_valid;                                           // pio_out_s1_agent:rdata_fifo_src_valid -> pio_out_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] pio_out_s1_agent_rdata_fifo_src_data;                                            // pio_out_s1_agent:rdata_fifo_src_data -> pio_out_s1_agent:rdata_fifo_sink_data
	wire          pio_out_s1_agent_rdata_fifo_src_ready;                                           // pio_out_s1_agent:rdata_fifo_sink_ready -> pio_out_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_006_src_valid;                                                           // cmd_mux_006:src_valid -> pio_out_s1_agent:cp_valid
	wire  [106:0] cmd_mux_006_src_data;                                                            // cmd_mux_006:src_data -> pio_out_s1_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                           // pio_out_s1_agent:cp_ready -> cmd_mux_006:src_ready
	wire    [8:0] cmd_mux_006_src_channel;                                                         // cmd_mux_006:src_channel -> pio_out_s1_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                   // cmd_mux_006:src_startofpacket -> pio_out_s1_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                     // cmd_mux_006:src_endofpacket -> pio_out_s1_agent:cp_endofpacket
	wire   [31:0] power_temp_scl_s1_agent_m0_readdata;                                             // power_temp_scl_s1_translator:uav_readdata -> power_temp_scl_s1_agent:m0_readdata
	wire          power_temp_scl_s1_agent_m0_waitrequest;                                          // power_temp_scl_s1_translator:uav_waitrequest -> power_temp_scl_s1_agent:m0_waitrequest
	wire          power_temp_scl_s1_agent_m0_debugaccess;                                          // power_temp_scl_s1_agent:m0_debugaccess -> power_temp_scl_s1_translator:uav_debugaccess
	wire   [19:0] power_temp_scl_s1_agent_m0_address;                                              // power_temp_scl_s1_agent:m0_address -> power_temp_scl_s1_translator:uav_address
	wire    [3:0] power_temp_scl_s1_agent_m0_byteenable;                                           // power_temp_scl_s1_agent:m0_byteenable -> power_temp_scl_s1_translator:uav_byteenable
	wire          power_temp_scl_s1_agent_m0_read;                                                 // power_temp_scl_s1_agent:m0_read -> power_temp_scl_s1_translator:uav_read
	wire          power_temp_scl_s1_agent_m0_readdatavalid;                                        // power_temp_scl_s1_translator:uav_readdatavalid -> power_temp_scl_s1_agent:m0_readdatavalid
	wire          power_temp_scl_s1_agent_m0_lock;                                                 // power_temp_scl_s1_agent:m0_lock -> power_temp_scl_s1_translator:uav_lock
	wire   [31:0] power_temp_scl_s1_agent_m0_writedata;                                            // power_temp_scl_s1_agent:m0_writedata -> power_temp_scl_s1_translator:uav_writedata
	wire          power_temp_scl_s1_agent_m0_write;                                                // power_temp_scl_s1_agent:m0_write -> power_temp_scl_s1_translator:uav_write
	wire    [2:0] power_temp_scl_s1_agent_m0_burstcount;                                           // power_temp_scl_s1_agent:m0_burstcount -> power_temp_scl_s1_translator:uav_burstcount
	wire          power_temp_scl_s1_agent_rf_source_valid;                                         // power_temp_scl_s1_agent:rf_source_valid -> power_temp_scl_s1_agent_rsp_fifo:in_valid
	wire  [107:0] power_temp_scl_s1_agent_rf_source_data;                                          // power_temp_scl_s1_agent:rf_source_data -> power_temp_scl_s1_agent_rsp_fifo:in_data
	wire          power_temp_scl_s1_agent_rf_source_ready;                                         // power_temp_scl_s1_agent_rsp_fifo:in_ready -> power_temp_scl_s1_agent:rf_source_ready
	wire          power_temp_scl_s1_agent_rf_source_startofpacket;                                 // power_temp_scl_s1_agent:rf_source_startofpacket -> power_temp_scl_s1_agent_rsp_fifo:in_startofpacket
	wire          power_temp_scl_s1_agent_rf_source_endofpacket;                                   // power_temp_scl_s1_agent:rf_source_endofpacket -> power_temp_scl_s1_agent_rsp_fifo:in_endofpacket
	wire          power_temp_scl_s1_agent_rsp_fifo_out_valid;                                      // power_temp_scl_s1_agent_rsp_fifo:out_valid -> power_temp_scl_s1_agent:rf_sink_valid
	wire  [107:0] power_temp_scl_s1_agent_rsp_fifo_out_data;                                       // power_temp_scl_s1_agent_rsp_fifo:out_data -> power_temp_scl_s1_agent:rf_sink_data
	wire          power_temp_scl_s1_agent_rsp_fifo_out_ready;                                      // power_temp_scl_s1_agent:rf_sink_ready -> power_temp_scl_s1_agent_rsp_fifo:out_ready
	wire          power_temp_scl_s1_agent_rsp_fifo_out_startofpacket;                              // power_temp_scl_s1_agent_rsp_fifo:out_startofpacket -> power_temp_scl_s1_agent:rf_sink_startofpacket
	wire          power_temp_scl_s1_agent_rsp_fifo_out_endofpacket;                                // power_temp_scl_s1_agent_rsp_fifo:out_endofpacket -> power_temp_scl_s1_agent:rf_sink_endofpacket
	wire          power_temp_scl_s1_agent_rdata_fifo_src_valid;                                    // power_temp_scl_s1_agent:rdata_fifo_src_valid -> power_temp_scl_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] power_temp_scl_s1_agent_rdata_fifo_src_data;                                     // power_temp_scl_s1_agent:rdata_fifo_src_data -> power_temp_scl_s1_agent:rdata_fifo_sink_data
	wire          power_temp_scl_s1_agent_rdata_fifo_src_ready;                                    // power_temp_scl_s1_agent:rdata_fifo_sink_ready -> power_temp_scl_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_007_src_valid;                                                           // cmd_mux_007:src_valid -> power_temp_scl_s1_agent:cp_valid
	wire  [106:0] cmd_mux_007_src_data;                                                            // cmd_mux_007:src_data -> power_temp_scl_s1_agent:cp_data
	wire          cmd_mux_007_src_ready;                                                           // power_temp_scl_s1_agent:cp_ready -> cmd_mux_007:src_ready
	wire    [8:0] cmd_mux_007_src_channel;                                                         // cmd_mux_007:src_channel -> power_temp_scl_s1_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                                   // cmd_mux_007:src_startofpacket -> power_temp_scl_s1_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                     // cmd_mux_007:src_endofpacket -> power_temp_scl_s1_agent:cp_endofpacket
	wire   [31:0] power_temp_sda_s1_agent_m0_readdata;                                             // power_temp_sda_s1_translator:uav_readdata -> power_temp_sda_s1_agent:m0_readdata
	wire          power_temp_sda_s1_agent_m0_waitrequest;                                          // power_temp_sda_s1_translator:uav_waitrequest -> power_temp_sda_s1_agent:m0_waitrequest
	wire          power_temp_sda_s1_agent_m0_debugaccess;                                          // power_temp_sda_s1_agent:m0_debugaccess -> power_temp_sda_s1_translator:uav_debugaccess
	wire   [19:0] power_temp_sda_s1_agent_m0_address;                                              // power_temp_sda_s1_agent:m0_address -> power_temp_sda_s1_translator:uav_address
	wire    [3:0] power_temp_sda_s1_agent_m0_byteenable;                                           // power_temp_sda_s1_agent:m0_byteenable -> power_temp_sda_s1_translator:uav_byteenable
	wire          power_temp_sda_s1_agent_m0_read;                                                 // power_temp_sda_s1_agent:m0_read -> power_temp_sda_s1_translator:uav_read
	wire          power_temp_sda_s1_agent_m0_readdatavalid;                                        // power_temp_sda_s1_translator:uav_readdatavalid -> power_temp_sda_s1_agent:m0_readdatavalid
	wire          power_temp_sda_s1_agent_m0_lock;                                                 // power_temp_sda_s1_agent:m0_lock -> power_temp_sda_s1_translator:uav_lock
	wire   [31:0] power_temp_sda_s1_agent_m0_writedata;                                            // power_temp_sda_s1_agent:m0_writedata -> power_temp_sda_s1_translator:uav_writedata
	wire          power_temp_sda_s1_agent_m0_write;                                                // power_temp_sda_s1_agent:m0_write -> power_temp_sda_s1_translator:uav_write
	wire    [2:0] power_temp_sda_s1_agent_m0_burstcount;                                           // power_temp_sda_s1_agent:m0_burstcount -> power_temp_sda_s1_translator:uav_burstcount
	wire          power_temp_sda_s1_agent_rf_source_valid;                                         // power_temp_sda_s1_agent:rf_source_valid -> power_temp_sda_s1_agent_rsp_fifo:in_valid
	wire  [107:0] power_temp_sda_s1_agent_rf_source_data;                                          // power_temp_sda_s1_agent:rf_source_data -> power_temp_sda_s1_agent_rsp_fifo:in_data
	wire          power_temp_sda_s1_agent_rf_source_ready;                                         // power_temp_sda_s1_agent_rsp_fifo:in_ready -> power_temp_sda_s1_agent:rf_source_ready
	wire          power_temp_sda_s1_agent_rf_source_startofpacket;                                 // power_temp_sda_s1_agent:rf_source_startofpacket -> power_temp_sda_s1_agent_rsp_fifo:in_startofpacket
	wire          power_temp_sda_s1_agent_rf_source_endofpacket;                                   // power_temp_sda_s1_agent:rf_source_endofpacket -> power_temp_sda_s1_agent_rsp_fifo:in_endofpacket
	wire          power_temp_sda_s1_agent_rsp_fifo_out_valid;                                      // power_temp_sda_s1_agent_rsp_fifo:out_valid -> power_temp_sda_s1_agent:rf_sink_valid
	wire  [107:0] power_temp_sda_s1_agent_rsp_fifo_out_data;                                       // power_temp_sda_s1_agent_rsp_fifo:out_data -> power_temp_sda_s1_agent:rf_sink_data
	wire          power_temp_sda_s1_agent_rsp_fifo_out_ready;                                      // power_temp_sda_s1_agent:rf_sink_ready -> power_temp_sda_s1_agent_rsp_fifo:out_ready
	wire          power_temp_sda_s1_agent_rsp_fifo_out_startofpacket;                              // power_temp_sda_s1_agent_rsp_fifo:out_startofpacket -> power_temp_sda_s1_agent:rf_sink_startofpacket
	wire          power_temp_sda_s1_agent_rsp_fifo_out_endofpacket;                                // power_temp_sda_s1_agent_rsp_fifo:out_endofpacket -> power_temp_sda_s1_agent:rf_sink_endofpacket
	wire          power_temp_sda_s1_agent_rdata_fifo_src_valid;                                    // power_temp_sda_s1_agent:rdata_fifo_src_valid -> power_temp_sda_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] power_temp_sda_s1_agent_rdata_fifo_src_data;                                     // power_temp_sda_s1_agent:rdata_fifo_src_data -> power_temp_sda_s1_agent:rdata_fifo_sink_data
	wire          power_temp_sda_s1_agent_rdata_fifo_src_ready;                                    // power_temp_sda_s1_agent:rdata_fifo_sink_ready -> power_temp_sda_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_008_src_valid;                                                           // cmd_mux_008:src_valid -> power_temp_sda_s1_agent:cp_valid
	wire  [106:0] cmd_mux_008_src_data;                                                            // cmd_mux_008:src_data -> power_temp_sda_s1_agent:cp_data
	wire          cmd_mux_008_src_ready;                                                           // power_temp_sda_s1_agent:cp_ready -> cmd_mux_008:src_ready
	wire    [8:0] cmd_mux_008_src_channel;                                                         // cmd_mux_008:src_channel -> power_temp_sda_s1_agent:cp_channel
	wire          cmd_mux_008_src_startofpacket;                                                   // cmd_mux_008:src_startofpacket -> power_temp_sda_s1_agent:cp_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                     // cmd_mux_008:src_endofpacket -> power_temp_sda_s1_agent:cp_endofpacket
	wire          cpu_nios2_data_master_agent_cp_valid;                                            // cpu_nios2_data_master_agent:cp_valid -> router:sink_valid
	wire  [106:0] cpu_nios2_data_master_agent_cp_data;                                             // cpu_nios2_data_master_agent:cp_data -> router:sink_data
	wire          cpu_nios2_data_master_agent_cp_ready;                                            // router:sink_ready -> cpu_nios2_data_master_agent:cp_ready
	wire          cpu_nios2_data_master_agent_cp_startofpacket;                                    // cpu_nios2_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          cpu_nios2_data_master_agent_cp_endofpacket;                                      // cpu_nios2_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                // router:src_valid -> cmd_demux:sink_valid
	wire  [106:0] router_src_data;                                                                 // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                // cmd_demux:sink_ready -> router:src_ready
	wire    [8:0] router_src_channel;                                                              // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                        // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                          // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          cpu_nios2_instruction_master_agent_cp_valid;                                     // cpu_nios2_instruction_master_agent:cp_valid -> router_001:sink_valid
	wire  [106:0] cpu_nios2_instruction_master_agent_cp_data;                                      // cpu_nios2_instruction_master_agent:cp_data -> router_001:sink_data
	wire          cpu_nios2_instruction_master_agent_cp_ready;                                     // router_001:sink_ready -> cpu_nios2_instruction_master_agent:cp_ready
	wire          cpu_nios2_instruction_master_agent_cp_startofpacket;                             // cpu_nios2_instruction_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          cpu_nios2_instruction_master_agent_cp_endofpacket;                               // cpu_nios2_instruction_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                            // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [106:0] router_001_src_data;                                                             // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                            // cmd_demux_001:sink_ready -> router_001:src_ready
	wire    [8:0] router_001_src_channel;                                                          // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                                    // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                                      // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_valid;                                    // jtag_uart_0_avalon_jtag_slave_agent:rp_valid -> router_002:sink_valid
	wire  [106:0] jtag_uart_0_avalon_jtag_slave_agent_rp_data;                                     // jtag_uart_0_avalon_jtag_slave_agent:rp_data -> router_002:sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_ready;                                    // router_002:sink_ready -> jtag_uart_0_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket;                            // jtag_uart_0_avalon_jtag_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket;                              // jtag_uart_0_avalon_jtag_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                            // router_002:src_valid -> rsp_demux:sink_valid
	wire  [106:0] router_002_src_data;                                                             // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                                            // rsp_demux:sink_ready -> router_002:src_ready
	wire    [8:0] router_002_src_channel;                                                          // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                                    // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                                      // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          sysid_qsys_0_control_slave_agent_rp_valid;                                       // sysid_qsys_0_control_slave_agent:rp_valid -> router_003:sink_valid
	wire  [106:0] sysid_qsys_0_control_slave_agent_rp_data;                                        // sysid_qsys_0_control_slave_agent:rp_data -> router_003:sink_data
	wire          sysid_qsys_0_control_slave_agent_rp_ready;                                       // router_003:sink_ready -> sysid_qsys_0_control_slave_agent:rp_ready
	wire          sysid_qsys_0_control_slave_agent_rp_startofpacket;                               // sysid_qsys_0_control_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          sysid_qsys_0_control_slave_agent_rp_endofpacket;                                 // sysid_qsys_0_control_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                            // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [106:0] router_003_src_data;                                                             // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                                            // rsp_demux_001:sink_ready -> router_003:src_ready
	wire    [8:0] router_003_src_channel;                                                          // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                                                    // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                                      // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          cpu_nios2_debug_mem_slave_agent_rp_valid;                                        // cpu_nios2_debug_mem_slave_agent:rp_valid -> router_004:sink_valid
	wire  [106:0] cpu_nios2_debug_mem_slave_agent_rp_data;                                         // cpu_nios2_debug_mem_slave_agent:rp_data -> router_004:sink_data
	wire          cpu_nios2_debug_mem_slave_agent_rp_ready;                                        // router_004:sink_ready -> cpu_nios2_debug_mem_slave_agent:rp_ready
	wire          cpu_nios2_debug_mem_slave_agent_rp_startofpacket;                                // cpu_nios2_debug_mem_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          cpu_nios2_debug_mem_slave_agent_rp_endofpacket;                                  // cpu_nios2_debug_mem_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                            // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [106:0] router_004_src_data;                                                             // router_004:src_data -> rsp_demux_002:sink_data
	wire          router_004_src_ready;                                                            // rsp_demux_002:sink_ready -> router_004:src_ready
	wire    [8:0] router_004_src_channel;                                                          // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_startofpacket;                                                    // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_004_src_endofpacket;                                                      // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          cpu_onchip_memory_s1_agent_rp_valid;                                             // cpu_onchip_memory_s1_agent:rp_valid -> router_005:sink_valid
	wire  [106:0] cpu_onchip_memory_s1_agent_rp_data;                                              // cpu_onchip_memory_s1_agent:rp_data -> router_005:sink_data
	wire          cpu_onchip_memory_s1_agent_rp_ready;                                             // router_005:sink_ready -> cpu_onchip_memory_s1_agent:rp_ready
	wire          cpu_onchip_memory_s1_agent_rp_startofpacket;                                     // cpu_onchip_memory_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          cpu_onchip_memory_s1_agent_rp_endofpacket;                                       // cpu_onchip_memory_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                            // router_005:src_valid -> rsp_demux_003:sink_valid
	wire  [106:0] router_005_src_data;                                                             // router_005:src_data -> rsp_demux_003:sink_data
	wire          router_005_src_ready;                                                            // rsp_demux_003:sink_ready -> router_005:src_ready
	wire    [8:0] router_005_src_channel;                                                          // router_005:src_channel -> rsp_demux_003:sink_channel
	wire          router_005_src_startofpacket;                                                    // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_005_src_endofpacket;                                                      // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          led_s1_agent_rp_valid;                                                           // led_s1_agent:rp_valid -> router_006:sink_valid
	wire  [106:0] led_s1_agent_rp_data;                                                            // led_s1_agent:rp_data -> router_006:sink_data
	wire          led_s1_agent_rp_ready;                                                           // router_006:sink_ready -> led_s1_agent:rp_ready
	wire          led_s1_agent_rp_startofpacket;                                                   // led_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          led_s1_agent_rp_endofpacket;                                                     // led_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                            // router_006:src_valid -> rsp_demux_004:sink_valid
	wire  [106:0] router_006_src_data;                                                             // router_006:src_data -> rsp_demux_004:sink_data
	wire          router_006_src_ready;                                                            // rsp_demux_004:sink_ready -> router_006:src_ready
	wire    [8:0] router_006_src_channel;                                                          // router_006:src_channel -> rsp_demux_004:sink_channel
	wire          router_006_src_startofpacket;                                                    // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_006_src_endofpacket;                                                      // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          pio_in_s1_agent_rp_valid;                                                        // pio_in_s1_agent:rp_valid -> router_007:sink_valid
	wire  [106:0] pio_in_s1_agent_rp_data;                                                         // pio_in_s1_agent:rp_data -> router_007:sink_data
	wire          pio_in_s1_agent_rp_ready;                                                        // router_007:sink_ready -> pio_in_s1_agent:rp_ready
	wire          pio_in_s1_agent_rp_startofpacket;                                                // pio_in_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          pio_in_s1_agent_rp_endofpacket;                                                  // pio_in_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                            // router_007:src_valid -> rsp_demux_005:sink_valid
	wire  [106:0] router_007_src_data;                                                             // router_007:src_data -> rsp_demux_005:sink_data
	wire          router_007_src_ready;                                                            // rsp_demux_005:sink_ready -> router_007:src_ready
	wire    [8:0] router_007_src_channel;                                                          // router_007:src_channel -> rsp_demux_005:sink_channel
	wire          router_007_src_startofpacket;                                                    // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_007_src_endofpacket;                                                      // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          pio_out_s1_agent_rp_valid;                                                       // pio_out_s1_agent:rp_valid -> router_008:sink_valid
	wire  [106:0] pio_out_s1_agent_rp_data;                                                        // pio_out_s1_agent:rp_data -> router_008:sink_data
	wire          pio_out_s1_agent_rp_ready;                                                       // router_008:sink_ready -> pio_out_s1_agent:rp_ready
	wire          pio_out_s1_agent_rp_startofpacket;                                               // pio_out_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          pio_out_s1_agent_rp_endofpacket;                                                 // pio_out_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                            // router_008:src_valid -> rsp_demux_006:sink_valid
	wire  [106:0] router_008_src_data;                                                             // router_008:src_data -> rsp_demux_006:sink_data
	wire          router_008_src_ready;                                                            // rsp_demux_006:sink_ready -> router_008:src_ready
	wire    [8:0] router_008_src_channel;                                                          // router_008:src_channel -> rsp_demux_006:sink_channel
	wire          router_008_src_startofpacket;                                                    // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_008_src_endofpacket;                                                      // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          power_temp_scl_s1_agent_rp_valid;                                                // power_temp_scl_s1_agent:rp_valid -> router_009:sink_valid
	wire  [106:0] power_temp_scl_s1_agent_rp_data;                                                 // power_temp_scl_s1_agent:rp_data -> router_009:sink_data
	wire          power_temp_scl_s1_agent_rp_ready;                                                // router_009:sink_ready -> power_temp_scl_s1_agent:rp_ready
	wire          power_temp_scl_s1_agent_rp_startofpacket;                                        // power_temp_scl_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          power_temp_scl_s1_agent_rp_endofpacket;                                          // power_temp_scl_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                            // router_009:src_valid -> rsp_demux_007:sink_valid
	wire  [106:0] router_009_src_data;                                                             // router_009:src_data -> rsp_demux_007:sink_data
	wire          router_009_src_ready;                                                            // rsp_demux_007:sink_ready -> router_009:src_ready
	wire    [8:0] router_009_src_channel;                                                          // router_009:src_channel -> rsp_demux_007:sink_channel
	wire          router_009_src_startofpacket;                                                    // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_009_src_endofpacket;                                                      // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          power_temp_sda_s1_agent_rp_valid;                                                // power_temp_sda_s1_agent:rp_valid -> router_010:sink_valid
	wire  [106:0] power_temp_sda_s1_agent_rp_data;                                                 // power_temp_sda_s1_agent:rp_data -> router_010:sink_data
	wire          power_temp_sda_s1_agent_rp_ready;                                                // router_010:sink_ready -> power_temp_sda_s1_agent:rp_ready
	wire          power_temp_sda_s1_agent_rp_startofpacket;                                        // power_temp_sda_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          power_temp_sda_s1_agent_rp_endofpacket;                                          // power_temp_sda_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                            // router_010:src_valid -> rsp_demux_008:sink_valid
	wire  [106:0] router_010_src_data;                                                             // router_010:src_data -> rsp_demux_008:sink_data
	wire          router_010_src_ready;                                                            // rsp_demux_008:sink_ready -> router_010:src_ready
	wire    [8:0] router_010_src_channel;                                                          // router_010:src_channel -> rsp_demux_008:sink_channel
	wire          router_010_src_startofpacket;                                                    // router_010:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_010_src_endofpacket;                                                      // router_010:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                            // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [106:0] cmd_demux_src0_data;                                                             // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                            // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [8:0] cmd_demux_src0_channel;                                                          // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                    // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                      // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                            // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [106:0] cmd_demux_src1_data;                                                             // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                            // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [8:0] cmd_demux_src1_channel;                                                          // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                    // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                      // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                            // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [106:0] cmd_demux_src2_data;                                                             // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                            // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire    [8:0] cmd_demux_src2_channel;                                                          // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                    // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                      // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                            // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [106:0] cmd_demux_src3_data;                                                             // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                            // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire    [8:0] cmd_demux_src3_channel;                                                          // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                    // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                      // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                            // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [106:0] cmd_demux_src4_data;                                                             // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                            // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire    [8:0] cmd_demux_src4_channel;                                                          // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                                    // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                      // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                            // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [106:0] cmd_demux_src5_data;                                                             // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                            // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire    [8:0] cmd_demux_src5_channel;                                                          // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                                    // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                      // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                            // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [106:0] cmd_demux_src6_data;                                                             // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                            // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire    [8:0] cmd_demux_src6_channel;                                                          // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                                    // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                      // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                            // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [106:0] cmd_demux_src7_data;                                                             // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                                            // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire    [8:0] cmd_demux_src7_channel;                                                          // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                                    // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                      // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                            // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [106:0] cmd_demux_src8_data;                                                             // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                                            // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire    [8:0] cmd_demux_src8_channel;                                                          // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                                    // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                      // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                        // cmd_demux_001:src0_valid -> cmd_mux_002:sink1_valid
	wire  [106:0] cmd_demux_001_src0_data;                                                         // cmd_demux_001:src0_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_001_src0_ready;                                                        // cmd_mux_002:sink1_ready -> cmd_demux_001:src0_ready
	wire    [8:0] cmd_demux_001_src0_channel;                                                      // cmd_demux_001:src0_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                // cmd_demux_001:src0_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                  // cmd_demux_001:src0_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                        // cmd_demux_001:src1_valid -> cmd_mux_003:sink1_valid
	wire  [106:0] cmd_demux_001_src1_data;                                                         // cmd_demux_001:src1_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_001_src1_ready;                                                        // cmd_mux_003:sink1_ready -> cmd_demux_001:src1_ready
	wire    [8:0] cmd_demux_001_src1_channel;                                                      // cmd_demux_001:src1_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                                // cmd_demux_001:src1_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                  // cmd_demux_001:src1_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                            // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [106:0] rsp_demux_src0_data;                                                             // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                            // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [8:0] rsp_demux_src0_channel;                                                          // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                    // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                      // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                        // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [106:0] rsp_demux_001_src0_data;                                                         // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                        // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [8:0] rsp_demux_001_src0_channel;                                                      // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                  // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                        // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [106:0] rsp_demux_002_src0_data;                                                         // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                        // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire    [8:0] rsp_demux_002_src0_channel;                                                      // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                  // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                                        // rsp_demux_002:src1_valid -> rsp_mux_001:sink0_valid
	wire  [106:0] rsp_demux_002_src1_data;                                                         // rsp_demux_002:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_002_src1_ready;                                                        // rsp_mux_001:sink0_ready -> rsp_demux_002:src1_ready
	wire    [8:0] rsp_demux_002_src1_channel;                                                      // rsp_demux_002:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_002_src1_startofpacket;                                                // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                                  // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_003_src0_valid;                                                        // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [106:0] rsp_demux_003_src0_data;                                                         // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                        // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire    [8:0] rsp_demux_003_src0_channel;                                                      // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                  // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                                        // rsp_demux_003:src1_valid -> rsp_mux_001:sink1_valid
	wire  [106:0] rsp_demux_003_src1_data;                                                         // rsp_demux_003:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_003_src1_ready;                                                        // rsp_mux_001:sink1_ready -> rsp_demux_003:src1_ready
	wire    [8:0] rsp_demux_003_src1_channel;                                                      // rsp_demux_003:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_003_src1_startofpacket;                                                // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                                  // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_004_src0_valid;                                                        // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [106:0] rsp_demux_004_src0_data;                                                         // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                        // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire    [8:0] rsp_demux_004_src0_channel;                                                      // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                  // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                        // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [106:0] rsp_demux_005_src0_data;                                                         // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                        // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire    [8:0] rsp_demux_005_src0_channel;                                                      // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                  // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                        // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [106:0] rsp_demux_006_src0_data;                                                         // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                                        // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire    [8:0] rsp_demux_006_src0_channel;                                                      // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                                // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                  // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                                        // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [106:0] rsp_demux_007_src0_data;                                                         // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                                        // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire    [8:0] rsp_demux_007_src0_channel;                                                      // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                                // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                  // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                        // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [106:0] rsp_demux_008_src0_data;                                                         // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                                        // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire    [8:0] rsp_demux_008_src0_channel;                                                      // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                                // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                  // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket

	monitor_altera_merlin_master_translator_181_mhudjri #(
		.AV_ADDRESS_W                (20),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (20),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) cpu_nios2_data_master_translator (
		.clk                    (clk_0_clk_clk),                                                            //   input,   width = 1,                       clk.clk
		.reset                  (cpu_nios2_reset_reset_bridge_in_reset_reset),                              //   input,   width = 1,                     reset.reset
		.uav_address            (cpu_nios2_data_master_translator_avalon_universal_master_0_address),       //  output,  width = 20, avalon_universal_master_0.address
		.uav_burstcount         (cpu_nios2_data_master_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (cpu_nios2_data_master_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (cpu_nios2_data_master_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (cpu_nios2_data_master_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (cpu_nios2_data_master_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (cpu_nios2_data_master_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (cpu_nios2_data_master_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (cpu_nios2_data_master_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (cpu_nios2_data_master_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (cpu_nios2_data_master_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (cpu_nios2_data_master_address),                                            //   input,  width = 20,      avalon_anti_master_0.address
		.av_waitrequest         (cpu_nios2_data_master_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_byteenable          (cpu_nios2_data_master_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (cpu_nios2_data_master_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (cpu_nios2_data_master_readdata),                                           //  output,  width = 32,                          .readdata
		.av_write               (cpu_nios2_data_master_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (cpu_nios2_data_master_writedata),                                          //   input,  width = 32,                          .writedata
		.av_debugaccess         (cpu_nios2_data_master_debugaccess),                                        //   input,   width = 1,                          .debugaccess
		.av_burstcount          (1'b1),                                                                     // (terminated),                                        
		.av_beginbursttransfer  (1'b0),                                                                     // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                     // (terminated),                                        
		.av_chipselect          (1'b0),                                                                     // (terminated),                                        
		.av_readdatavalid       (),                                                                         // (terminated),                                        
		.av_lock                (1'b0),                                                                     // (terminated),                                        
		.uav_clken              (),                                                                         // (terminated),                                        
		.av_clken               (1'b1),                                                                     // (terminated),                                        
		.uav_response           (2'b00),                                                                    // (terminated),                                        
		.av_response            (),                                                                         // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                     // (terminated),                                        
		.av_writeresponsevalid  ()                                                                          // (terminated),                                        
	);

	monitor_altera_merlin_master_translator_181_mhudjri #(
		.AV_ADDRESS_W                (20),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (20),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) cpu_nios2_instruction_master_translator (
		.clk                    (clk_0_clk_clk),                                                                   //   input,   width = 1,                       clk.clk
		.reset                  (cpu_nios2_reset_reset_bridge_in_reset_reset),                                     //   input,   width = 1,                     reset.reset
		.uav_address            (cpu_nios2_instruction_master_translator_avalon_universal_master_0_address),       //  output,  width = 20, avalon_universal_master_0.address
		.uav_burstcount         (cpu_nios2_instruction_master_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (cpu_nios2_instruction_master_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (cpu_nios2_instruction_master_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (cpu_nios2_instruction_master_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (cpu_nios2_instruction_master_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (cpu_nios2_instruction_master_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (cpu_nios2_instruction_master_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (cpu_nios2_instruction_master_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (cpu_nios2_instruction_master_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (cpu_nios2_instruction_master_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (cpu_nios2_instruction_master_address),                                            //   input,  width = 20,      avalon_anti_master_0.address
		.av_waitrequest         (cpu_nios2_instruction_master_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_read                (cpu_nios2_instruction_master_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (cpu_nios2_instruction_master_readdata),                                           //  output,  width = 32,                          .readdata
		.av_burstcount          (1'b1),                                                                            // (terminated),                                        
		.av_byteenable          (4'b1111),                                                                         // (terminated),                                        
		.av_beginbursttransfer  (1'b0),                                                                            // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                            // (terminated),                                        
		.av_chipselect          (1'b0),                                                                            // (terminated),                                        
		.av_readdatavalid       (),                                                                                // (terminated),                                        
		.av_write               (1'b0),                                                                            // (terminated),                                        
		.av_writedata           (32'b00000000000000000000000000000000),                                            // (terminated),                                        
		.av_lock                (1'b0),                                                                            // (terminated),                                        
		.av_debugaccess         (1'b0),                                                                            // (terminated),                                        
		.uav_clken              (),                                                                                // (terminated),                                        
		.av_clken               (1'b1),                                                                            // (terminated),                                        
		.uav_response           (2'b00),                                                                           // (terminated),                                        
		.av_response            (),                                                                                // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                            // (terminated),                                        
		.av_writeresponsevalid  ()                                                                                 // (terminated),                                        
	);

	monitor_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) jtag_uart_0_avalon_jtag_slave_translator (
		.clk                    (clk_0_clk_clk),                                        //   input,   width = 1,                      clk.clk
		.reset                  (cpu_nios2_reset_reset_bridge_in_reset_reset),          //   input,   width = 1,                    reset.reset
		.uav_address            (jtag_uart_0_avalon_jtag_slave_agent_m0_address),       //   input,  width = 20, avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (jtag_uart_0_avalon_jtag_slave_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (jtag_uart_0_avalon_jtag_slave_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (jtag_uart_0_avalon_jtag_slave_address),                //  output,   width = 1,      avalon_anti_slave_0.address
		.av_write               (jtag_uart_0_avalon_jtag_slave_write),                  //  output,   width = 1,                         .write
		.av_read                (jtag_uart_0_avalon_jtag_slave_read),                   //  output,   width = 1,                         .read
		.av_readdata            (jtag_uart_0_avalon_jtag_slave_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (jtag_uart_0_avalon_jtag_slave_writedata),              //  output,  width = 32,                         .writedata
		.av_waitrequest         (jtag_uart_0_avalon_jtag_slave_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_chipselect          (jtag_uart_0_avalon_jtag_slave_chipselect),             //  output,   width = 1,                         .chipselect
		.av_begintransfer       (),                                                     // (terminated),                                       
		.av_beginbursttransfer  (),                                                     // (terminated),                                       
		.av_burstcount          (),                                                     // (terminated),                                       
		.av_byteenable          (),                                                     // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                 // (terminated),                                       
		.av_writebyteenable     (),                                                     // (terminated),                                       
		.av_lock                (),                                                     // (terminated),                                       
		.av_clken               (),                                                     // (terminated),                                       
		.uav_clken              (1'b0),                                                 // (terminated),                                       
		.av_debugaccess         (),                                                     // (terminated),                                       
		.av_outputenable        (),                                                     // (terminated),                                       
		.uav_response           (),                                                     // (terminated),                                       
		.av_response            (2'b00),                                                // (terminated),                                       
		.uav_writeresponsevalid (),                                                     // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                  // (terminated),                                       
	);

	monitor_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) sysid_qsys_0_control_slave_translator (
		.clk                    (clk_0_clk_clk),                                     //   input,   width = 1,                      clk.clk
		.reset                  (cpu_nios2_reset_reset_bridge_in_reset_reset),       //   input,   width = 1,                    reset.reset
		.uav_address            (sysid_qsys_0_control_slave_agent_m0_address),       //   input,  width = 20, avalon_universal_slave_0.address
		.uav_burstcount         (sysid_qsys_0_control_slave_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (sysid_qsys_0_control_slave_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (sysid_qsys_0_control_slave_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (sysid_qsys_0_control_slave_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (sysid_qsys_0_control_slave_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (sysid_qsys_0_control_slave_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (sysid_qsys_0_control_slave_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (sysid_qsys_0_control_slave_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (sysid_qsys_0_control_slave_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (sysid_qsys_0_control_slave_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (sysid_qsys_0_control_slave_address),                //  output,   width = 1,      avalon_anti_slave_0.address
		.av_readdata            (sysid_qsys_0_control_slave_readdata),               //   input,  width = 32,                         .readdata
		.av_write               (),                                                  // (terminated),                                       
		.av_read                (),                                                  // (terminated),                                       
		.av_writedata           (),                                                  // (terminated),                                       
		.av_begintransfer       (),                                                  // (terminated),                                       
		.av_beginbursttransfer  (),                                                  // (terminated),                                       
		.av_burstcount          (),                                                  // (terminated),                                       
		.av_byteenable          (),                                                  // (terminated),                                       
		.av_readdatavalid       (1'b0),                                              // (terminated),                                       
		.av_waitrequest         (1'b0),                                              // (terminated),                                       
		.av_writebyteenable     (),                                                  // (terminated),                                       
		.av_lock                (),                                                  // (terminated),                                       
		.av_chipselect          (),                                                  // (terminated),                                       
		.av_clken               (),                                                  // (terminated),                                       
		.uav_clken              (1'b0),                                              // (terminated),                                       
		.av_debugaccess         (),                                                  // (terminated),                                       
		.av_outputenable        (),                                                  // (terminated),                                       
		.uav_response           (),                                                  // (terminated),                                       
		.av_response            (2'b00),                                             // (terminated),                                       
		.uav_writeresponsevalid (),                                                  // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                               // (terminated),                                       
	);

	monitor_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) cpu_nios2_debug_mem_slave_translator (
		.clk                    (clk_0_clk_clk),                                    //   input,   width = 1,                      clk.clk
		.reset                  (cpu_nios2_reset_reset_bridge_in_reset_reset),      //   input,   width = 1,                    reset.reset
		.uav_address            (cpu_nios2_debug_mem_slave_agent_m0_address),       //   input,  width = 20, avalon_universal_slave_0.address
		.uav_burstcount         (cpu_nios2_debug_mem_slave_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (cpu_nios2_debug_mem_slave_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (cpu_nios2_debug_mem_slave_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (cpu_nios2_debug_mem_slave_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (cpu_nios2_debug_mem_slave_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (cpu_nios2_debug_mem_slave_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (cpu_nios2_debug_mem_slave_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (cpu_nios2_debug_mem_slave_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (cpu_nios2_debug_mem_slave_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (cpu_nios2_debug_mem_slave_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (cpu_nios2_debug_mem_slave_address),                //  output,   width = 9,      avalon_anti_slave_0.address
		.av_write               (cpu_nios2_debug_mem_slave_write),                  //  output,   width = 1,                         .write
		.av_read                (cpu_nios2_debug_mem_slave_read),                   //  output,   width = 1,                         .read
		.av_readdata            (cpu_nios2_debug_mem_slave_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (cpu_nios2_debug_mem_slave_writedata),              //  output,  width = 32,                         .writedata
		.av_byteenable          (cpu_nios2_debug_mem_slave_byteenable),             //  output,   width = 4,                         .byteenable
		.av_waitrequest         (cpu_nios2_debug_mem_slave_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_debugaccess         (cpu_nios2_debug_mem_slave_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                 // (terminated),                                       
		.av_beginbursttransfer  (),                                                 // (terminated),                                       
		.av_burstcount          (),                                                 // (terminated),                                       
		.av_readdatavalid       (1'b0),                                             // (terminated),                                       
		.av_writebyteenable     (),                                                 // (terminated),                                       
		.av_lock                (),                                                 // (terminated),                                       
		.av_chipselect          (),                                                 // (terminated),                                       
		.av_clken               (),                                                 // (terminated),                                       
		.uav_clken              (1'b0),                                             // (terminated),                                       
		.av_outputenable        (),                                                 // (terminated),                                       
		.uav_response           (),                                                 // (terminated),                                       
		.av_response            (2'b00),                                            // (terminated),                                       
		.uav_writeresponsevalid (),                                                 // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                              // (terminated),                                       
	);

	monitor_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (14),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) cpu_onchip_memory_s1_translator (
		.clk                    (clk_0_clk_clk),                               //   input,   width = 1,                      clk.clk
		.reset                  (cpu_nios2_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (cpu_onchip_memory_s1_agent_m0_address),       //   input,  width = 20, avalon_universal_slave_0.address
		.uav_burstcount         (cpu_onchip_memory_s1_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (cpu_onchip_memory_s1_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (cpu_onchip_memory_s1_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (cpu_onchip_memory_s1_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (cpu_onchip_memory_s1_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (cpu_onchip_memory_s1_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (cpu_onchip_memory_s1_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (cpu_onchip_memory_s1_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (cpu_onchip_memory_s1_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (cpu_onchip_memory_s1_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (cpu_onchip_memory_s1_address),                //  output,  width = 14,      avalon_anti_slave_0.address
		.av_write               (cpu_onchip_memory_s1_write),                  //  output,   width = 1,                         .write
		.av_readdata            (cpu_onchip_memory_s1_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (cpu_onchip_memory_s1_writedata),              //  output,  width = 32,                         .writedata
		.av_byteenable          (cpu_onchip_memory_s1_byteenable),             //  output,   width = 4,                         .byteenable
		.av_chipselect          (cpu_onchip_memory_s1_chipselect),             //  output,   width = 1,                         .chipselect
		.av_clken               (cpu_onchip_memory_s1_clken),                  //  output,   width = 1,                         .clken
		.av_read                (),                                            // (terminated),                                       
		.av_begintransfer       (),                                            // (terminated),                                       
		.av_beginbursttransfer  (),                                            // (terminated),                                       
		.av_burstcount          (),                                            // (terminated),                                       
		.av_readdatavalid       (1'b0),                                        // (terminated),                                       
		.av_waitrequest         (1'b0),                                        // (terminated),                                       
		.av_writebyteenable     (),                                            // (terminated),                                       
		.av_lock                (),                                            // (terminated),                                       
		.uav_clken              (1'b0),                                        // (terminated),                                       
		.av_debugaccess         (),                                            // (terminated),                                       
		.av_outputenable        (),                                            // (terminated),                                       
		.uav_response           (),                                            // (terminated),                                       
		.av_response            (2'b00),                                       // (terminated),                                       
		.uav_writeresponsevalid (),                                            // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                         // (terminated),                                       
	);

	monitor_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) led_s1_translator (
		.clk                    (clk_0_clk_clk),                               //   input,   width = 1,                      clk.clk
		.reset                  (cpu_nios2_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (led_s1_agent_m0_address),                     //   input,  width = 20, avalon_universal_slave_0.address
		.uav_burstcount         (led_s1_agent_m0_burstcount),                  //   input,   width = 3,                         .burstcount
		.uav_read               (led_s1_agent_m0_read),                        //   input,   width = 1,                         .read
		.uav_write              (led_s1_agent_m0_write),                       //   input,   width = 1,                         .write
		.uav_waitrequest        (led_s1_agent_m0_waitrequest),                 //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (led_s1_agent_m0_readdatavalid),               //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (led_s1_agent_m0_byteenable),                  //   input,   width = 4,                         .byteenable
		.uav_readdata           (led_s1_agent_m0_readdata),                    //  output,  width = 32,                         .readdata
		.uav_writedata          (led_s1_agent_m0_writedata),                   //   input,  width = 32,                         .writedata
		.uav_lock               (led_s1_agent_m0_lock),                        //   input,   width = 1,                         .lock
		.uav_debugaccess        (led_s1_agent_m0_debugaccess),                 //   input,   width = 1,                         .debugaccess
		.av_address             (led_s1_address),                              //  output,   width = 2,      avalon_anti_slave_0.address
		.av_write               (led_s1_write),                                //  output,   width = 1,                         .write
		.av_readdata            (led_s1_readdata),                             //   input,  width = 32,                         .readdata
		.av_writedata           (led_s1_writedata),                            //  output,  width = 32,                         .writedata
		.av_chipselect          (led_s1_chipselect),                           //  output,   width = 1,                         .chipselect
		.av_read                (),                                            // (terminated),                                       
		.av_begintransfer       (),                                            // (terminated),                                       
		.av_beginbursttransfer  (),                                            // (terminated),                                       
		.av_burstcount          (),                                            // (terminated),                                       
		.av_byteenable          (),                                            // (terminated),                                       
		.av_readdatavalid       (1'b0),                                        // (terminated),                                       
		.av_waitrequest         (1'b0),                                        // (terminated),                                       
		.av_writebyteenable     (),                                            // (terminated),                                       
		.av_lock                (),                                            // (terminated),                                       
		.av_clken               (),                                            // (terminated),                                       
		.uav_clken              (1'b0),                                        // (terminated),                                       
		.av_debugaccess         (),                                            // (terminated),                                       
		.av_outputenable        (),                                            // (terminated),                                       
		.uav_response           (),                                            // (terminated),                                       
		.av_response            (2'b00),                                       // (terminated),                                       
		.uav_writeresponsevalid (),                                            // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                         // (terminated),                                       
	);

	monitor_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) pio_in_s1_translator (
		.clk                    (clk_0_clk_clk),                               //   input,   width = 1,                      clk.clk
		.reset                  (cpu_nios2_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (pio_in_s1_agent_m0_address),                  //   input,  width = 20, avalon_universal_slave_0.address
		.uav_burstcount         (pio_in_s1_agent_m0_burstcount),               //   input,   width = 3,                         .burstcount
		.uav_read               (pio_in_s1_agent_m0_read),                     //   input,   width = 1,                         .read
		.uav_write              (pio_in_s1_agent_m0_write),                    //   input,   width = 1,                         .write
		.uav_waitrequest        (pio_in_s1_agent_m0_waitrequest),              //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (pio_in_s1_agent_m0_readdatavalid),            //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (pio_in_s1_agent_m0_byteenable),               //   input,   width = 4,                         .byteenable
		.uav_readdata           (pio_in_s1_agent_m0_readdata),                 //  output,  width = 32,                         .readdata
		.uav_writedata          (pio_in_s1_agent_m0_writedata),                //   input,  width = 32,                         .writedata
		.uav_lock               (pio_in_s1_agent_m0_lock),                     //   input,   width = 1,                         .lock
		.uav_debugaccess        (pio_in_s1_agent_m0_debugaccess),              //   input,   width = 1,                         .debugaccess
		.av_address             (pio_in_s1_address),                           //  output,   width = 2,      avalon_anti_slave_0.address
		.av_readdata            (pio_in_s1_readdata),                          //   input,  width = 32,                         .readdata
		.av_write               (),                                            // (terminated),                                       
		.av_read                (),                                            // (terminated),                                       
		.av_writedata           (),                                            // (terminated),                                       
		.av_begintransfer       (),                                            // (terminated),                                       
		.av_beginbursttransfer  (),                                            // (terminated),                                       
		.av_burstcount          (),                                            // (terminated),                                       
		.av_byteenable          (),                                            // (terminated),                                       
		.av_readdatavalid       (1'b0),                                        // (terminated),                                       
		.av_waitrequest         (1'b0),                                        // (terminated),                                       
		.av_writebyteenable     (),                                            // (terminated),                                       
		.av_lock                (),                                            // (terminated),                                       
		.av_chipselect          (),                                            // (terminated),                                       
		.av_clken               (),                                            // (terminated),                                       
		.uav_clken              (1'b0),                                        // (terminated),                                       
		.av_debugaccess         (),                                            // (terminated),                                       
		.av_outputenable        (),                                            // (terminated),                                       
		.uav_response           (),                                            // (terminated),                                       
		.av_response            (2'b00),                                       // (terminated),                                       
		.uav_writeresponsevalid (),                                            // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                         // (terminated),                                       
	);

	monitor_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) pio_out_s1_translator (
		.clk                    (clk_0_clk_clk),                               //   input,   width = 1,                      clk.clk
		.reset                  (cpu_nios2_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (pio_out_s1_agent_m0_address),                 //   input,  width = 20, avalon_universal_slave_0.address
		.uav_burstcount         (pio_out_s1_agent_m0_burstcount),              //   input,   width = 3,                         .burstcount
		.uav_read               (pio_out_s1_agent_m0_read),                    //   input,   width = 1,                         .read
		.uav_write              (pio_out_s1_agent_m0_write),                   //   input,   width = 1,                         .write
		.uav_waitrequest        (pio_out_s1_agent_m0_waitrequest),             //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (pio_out_s1_agent_m0_readdatavalid),           //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (pio_out_s1_agent_m0_byteenable),              //   input,   width = 4,                         .byteenable
		.uav_readdata           (pio_out_s1_agent_m0_readdata),                //  output,  width = 32,                         .readdata
		.uav_writedata          (pio_out_s1_agent_m0_writedata),               //   input,  width = 32,                         .writedata
		.uav_lock               (pio_out_s1_agent_m0_lock),                    //   input,   width = 1,                         .lock
		.uav_debugaccess        (pio_out_s1_agent_m0_debugaccess),             //   input,   width = 1,                         .debugaccess
		.av_address             (pio_out_s1_address),                          //  output,   width = 2,      avalon_anti_slave_0.address
		.av_write               (pio_out_s1_write),                            //  output,   width = 1,                         .write
		.av_readdata            (pio_out_s1_readdata),                         //   input,  width = 32,                         .readdata
		.av_writedata           (pio_out_s1_writedata),                        //  output,  width = 32,                         .writedata
		.av_chipselect          (pio_out_s1_chipselect),                       //  output,   width = 1,                         .chipselect
		.av_read                (),                                            // (terminated),                                       
		.av_begintransfer       (),                                            // (terminated),                                       
		.av_beginbursttransfer  (),                                            // (terminated),                                       
		.av_burstcount          (),                                            // (terminated),                                       
		.av_byteenable          (),                                            // (terminated),                                       
		.av_readdatavalid       (1'b0),                                        // (terminated),                                       
		.av_waitrequest         (1'b0),                                        // (terminated),                                       
		.av_writebyteenable     (),                                            // (terminated),                                       
		.av_lock                (),                                            // (terminated),                                       
		.av_clken               (),                                            // (terminated),                                       
		.uav_clken              (1'b0),                                        // (terminated),                                       
		.av_debugaccess         (),                                            // (terminated),                                       
		.av_outputenable        (),                                            // (terminated),                                       
		.uav_response           (),                                            // (terminated),                                       
		.av_response            (2'b00),                                       // (terminated),                                       
		.uav_writeresponsevalid (),                                            // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                         // (terminated),                                       
	);

	monitor_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) power_temp_scl_s1_translator (
		.clk                    (clk_0_clk_clk),                               //   input,   width = 1,                      clk.clk
		.reset                  (cpu_nios2_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (power_temp_scl_s1_agent_m0_address),          //   input,  width = 20, avalon_universal_slave_0.address
		.uav_burstcount         (power_temp_scl_s1_agent_m0_burstcount),       //   input,   width = 3,                         .burstcount
		.uav_read               (power_temp_scl_s1_agent_m0_read),             //   input,   width = 1,                         .read
		.uav_write              (power_temp_scl_s1_agent_m0_write),            //   input,   width = 1,                         .write
		.uav_waitrequest        (power_temp_scl_s1_agent_m0_waitrequest),      //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (power_temp_scl_s1_agent_m0_readdatavalid),    //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (power_temp_scl_s1_agent_m0_byteenable),       //   input,   width = 4,                         .byteenable
		.uav_readdata           (power_temp_scl_s1_agent_m0_readdata),         //  output,  width = 32,                         .readdata
		.uav_writedata          (power_temp_scl_s1_agent_m0_writedata),        //   input,  width = 32,                         .writedata
		.uav_lock               (power_temp_scl_s1_agent_m0_lock),             //   input,   width = 1,                         .lock
		.uav_debugaccess        (power_temp_scl_s1_agent_m0_debugaccess),      //   input,   width = 1,                         .debugaccess
		.av_address             (power_temp_scl_s1_address),                   //  output,   width = 2,      avalon_anti_slave_0.address
		.av_write               (power_temp_scl_s1_write),                     //  output,   width = 1,                         .write
		.av_readdata            (power_temp_scl_s1_readdata),                  //   input,  width = 32,                         .readdata
		.av_writedata           (power_temp_scl_s1_writedata),                 //  output,  width = 32,                         .writedata
		.av_chipselect          (power_temp_scl_s1_chipselect),                //  output,   width = 1,                         .chipselect
		.av_read                (),                                            // (terminated),                                       
		.av_begintransfer       (),                                            // (terminated),                                       
		.av_beginbursttransfer  (),                                            // (terminated),                                       
		.av_burstcount          (),                                            // (terminated),                                       
		.av_byteenable          (),                                            // (terminated),                                       
		.av_readdatavalid       (1'b0),                                        // (terminated),                                       
		.av_waitrequest         (1'b0),                                        // (terminated),                                       
		.av_writebyteenable     (),                                            // (terminated),                                       
		.av_lock                (),                                            // (terminated),                                       
		.av_clken               (),                                            // (terminated),                                       
		.uav_clken              (1'b0),                                        // (terminated),                                       
		.av_debugaccess         (),                                            // (terminated),                                       
		.av_outputenable        (),                                            // (terminated),                                       
		.uav_response           (),                                            // (terminated),                                       
		.av_response            (2'b00),                                       // (terminated),                                       
		.uav_writeresponsevalid (),                                            // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                         // (terminated),                                       
	);

	monitor_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) power_temp_sda_s1_translator (
		.clk                    (clk_0_clk_clk),                               //   input,   width = 1,                      clk.clk
		.reset                  (cpu_nios2_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (power_temp_sda_s1_agent_m0_address),          //   input,  width = 20, avalon_universal_slave_0.address
		.uav_burstcount         (power_temp_sda_s1_agent_m0_burstcount),       //   input,   width = 3,                         .burstcount
		.uav_read               (power_temp_sda_s1_agent_m0_read),             //   input,   width = 1,                         .read
		.uav_write              (power_temp_sda_s1_agent_m0_write),            //   input,   width = 1,                         .write
		.uav_waitrequest        (power_temp_sda_s1_agent_m0_waitrequest),      //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (power_temp_sda_s1_agent_m0_readdatavalid),    //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (power_temp_sda_s1_agent_m0_byteenable),       //   input,   width = 4,                         .byteenable
		.uav_readdata           (power_temp_sda_s1_agent_m0_readdata),         //  output,  width = 32,                         .readdata
		.uav_writedata          (power_temp_sda_s1_agent_m0_writedata),        //   input,  width = 32,                         .writedata
		.uav_lock               (power_temp_sda_s1_agent_m0_lock),             //   input,   width = 1,                         .lock
		.uav_debugaccess        (power_temp_sda_s1_agent_m0_debugaccess),      //   input,   width = 1,                         .debugaccess
		.av_address             (power_temp_sda_s1_address),                   //  output,   width = 2,      avalon_anti_slave_0.address
		.av_write               (power_temp_sda_s1_write),                     //  output,   width = 1,                         .write
		.av_readdata            (power_temp_sda_s1_readdata),                  //   input,  width = 32,                         .readdata
		.av_writedata           (power_temp_sda_s1_writedata),                 //  output,  width = 32,                         .writedata
		.av_chipselect          (power_temp_sda_s1_chipselect),                //  output,   width = 1,                         .chipselect
		.av_read                (),                                            // (terminated),                                       
		.av_begintransfer       (),                                            // (terminated),                                       
		.av_beginbursttransfer  (),                                            // (terminated),                                       
		.av_burstcount          (),                                            // (terminated),                                       
		.av_byteenable          (),                                            // (terminated),                                       
		.av_readdatavalid       (1'b0),                                        // (terminated),                                       
		.av_waitrequest         (1'b0),                                        // (terminated),                                       
		.av_writebyteenable     (),                                            // (terminated),                                       
		.av_lock                (),                                            // (terminated),                                       
		.av_clken               (),                                            // (terminated),                                       
		.uav_clken              (1'b0),                                        // (terminated),                                       
		.av_debugaccess         (),                                            // (terminated),                                       
		.av_outputenable        (),                                            // (terminated),                                       
		.uav_response           (),                                            // (terminated),                                       
		.av_response            (2'b00),                                       // (terminated),                                       
		.uav_writeresponsevalid (),                                            // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                         // (terminated),                                       
	);

	monitor_altera_merlin_master_agent_181_t5eyqrq #(
		.PKT_WUNIQUE               (106),
		.PKT_DOMAIN_H              (105),
		.PKT_DOMAIN_L              (104),
		.PKT_SNOOP_H               (103),
		.PKT_SNOOP_L               (100),
		.PKT_BARRIER_H             (99),
		.PKT_BARRIER_L             (98),
		.PKT_ORI_BURST_SIZE_H      (97),
		.PKT_ORI_BURST_SIZE_L      (95),
		.PKT_RESPONSE_STATUS_H     (94),
		.PKT_RESPONSE_STATUS_L     (93),
		.PKT_QOS_H                 (76),
		.PKT_QOS_L                 (76),
		.PKT_DATA_SIDEBAND_H       (74),
		.PKT_DATA_SIDEBAND_L       (74),
		.PKT_ADDR_SIDEBAND_H       (73),
		.PKT_ADDR_SIDEBAND_L       (73),
		.PKT_BURST_TYPE_H          (72),
		.PKT_BURST_TYPE_L          (71),
		.PKT_CACHE_H               (92),
		.PKT_CACHE_L               (89),
		.PKT_THREAD_ID_H           (85),
		.PKT_THREAD_ID_L           (85),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_EXCLUSIVE       (61),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (88),
		.PKT_PROTECTION_L          (86),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.ST_DATA_W                 (107),
		.ST_CHANNEL_W              (9),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0)
	) cpu_nios2_data_master_agent (
		.clk                   (clk_0_clk_clk),                                                            //   input,    width = 1,       clk.clk
		.reset                 (cpu_nios2_reset_reset_bridge_in_reset_reset),                              //   input,    width = 1, clk_reset.reset
		.av_address            (cpu_nios2_data_master_translator_avalon_universal_master_0_address),       //   input,   width = 20,        av.address
		.av_write              (cpu_nios2_data_master_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (cpu_nios2_data_master_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (cpu_nios2_data_master_translator_avalon_universal_master_0_writedata),     //   input,   width = 32,          .writedata
		.av_readdata           (cpu_nios2_data_master_translator_avalon_universal_master_0_readdata),      //  output,   width = 32,          .readdata
		.av_waitrequest        (cpu_nios2_data_master_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (cpu_nios2_data_master_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (cpu_nios2_data_master_translator_avalon_universal_master_0_byteenable),    //   input,    width = 4,          .byteenable
		.av_burstcount         (cpu_nios2_data_master_translator_avalon_universal_master_0_burstcount),    //   input,    width = 3,          .burstcount
		.av_debugaccess        (cpu_nios2_data_master_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (cpu_nios2_data_master_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (cpu_nios2_data_master_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (cpu_nios2_data_master_agent_cp_data),                                      //  output,  width = 107,          .data
		.cp_startofpacket      (cpu_nios2_data_master_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (cpu_nios2_data_master_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (cpu_nios2_data_master_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (rsp_mux_src_valid),                                                        //   input,    width = 1,        rp.valid
		.rp_data               (rsp_mux_src_data),                                                         //   input,  width = 107,          .data
		.rp_channel            (rsp_mux_src_channel),                                                      //   input,    width = 9,          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                  //   input,    width = 1,          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                        //  output,    width = 1,          .ready
		.av_response           (),                                                                         // (terminated),                         
		.av_writeresponsevalid ()                                                                          // (terminated),                         
	);

	monitor_altera_merlin_master_agent_181_t5eyqrq #(
		.PKT_WUNIQUE               (106),
		.PKT_DOMAIN_H              (105),
		.PKT_DOMAIN_L              (104),
		.PKT_SNOOP_H               (103),
		.PKT_SNOOP_L               (100),
		.PKT_BARRIER_H             (99),
		.PKT_BARRIER_L             (98),
		.PKT_ORI_BURST_SIZE_H      (97),
		.PKT_ORI_BURST_SIZE_L      (95),
		.PKT_RESPONSE_STATUS_H     (94),
		.PKT_RESPONSE_STATUS_L     (93),
		.PKT_QOS_H                 (76),
		.PKT_QOS_L                 (76),
		.PKT_DATA_SIDEBAND_H       (74),
		.PKT_DATA_SIDEBAND_L       (74),
		.PKT_ADDR_SIDEBAND_H       (73),
		.PKT_ADDR_SIDEBAND_L       (73),
		.PKT_BURST_TYPE_H          (72),
		.PKT_BURST_TYPE_L          (71),
		.PKT_CACHE_H               (92),
		.PKT_CACHE_L               (89),
		.PKT_THREAD_ID_H           (85),
		.PKT_THREAD_ID_L           (85),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_EXCLUSIVE       (61),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (88),
		.PKT_PROTECTION_L          (86),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.ST_DATA_W                 (107),
		.ST_CHANNEL_W              (9),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0)
	) cpu_nios2_instruction_master_agent (
		.clk                   (clk_0_clk_clk),                                                                   //   input,    width = 1,       clk.clk
		.reset                 (cpu_nios2_reset_reset_bridge_in_reset_reset),                                     //   input,    width = 1, clk_reset.reset
		.av_address            (cpu_nios2_instruction_master_translator_avalon_universal_master_0_address),       //   input,   width = 20,        av.address
		.av_write              (cpu_nios2_instruction_master_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (cpu_nios2_instruction_master_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (cpu_nios2_instruction_master_translator_avalon_universal_master_0_writedata),     //   input,   width = 32,          .writedata
		.av_readdata           (cpu_nios2_instruction_master_translator_avalon_universal_master_0_readdata),      //  output,   width = 32,          .readdata
		.av_waitrequest        (cpu_nios2_instruction_master_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (cpu_nios2_instruction_master_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (cpu_nios2_instruction_master_translator_avalon_universal_master_0_byteenable),    //   input,    width = 4,          .byteenable
		.av_burstcount         (cpu_nios2_instruction_master_translator_avalon_universal_master_0_burstcount),    //   input,    width = 3,          .burstcount
		.av_debugaccess        (cpu_nios2_instruction_master_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (cpu_nios2_instruction_master_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (cpu_nios2_instruction_master_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (cpu_nios2_instruction_master_agent_cp_data),                                      //  output,  width = 107,          .data
		.cp_startofpacket      (cpu_nios2_instruction_master_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (cpu_nios2_instruction_master_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (cpu_nios2_instruction_master_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                           //   input,    width = 1,        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                            //   input,  width = 107,          .data
		.rp_channel            (rsp_mux_001_src_channel),                                                         //   input,    width = 9,          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                                   //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                                     //   input,    width = 1,          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                           //  output,    width = 1,          .ready
		.av_response           (),                                                                                // (terminated),                         
		.av_writeresponsevalid ()                                                                                 // (terminated),                         
	);

	monitor_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (97),
		.PKT_ORI_BURST_SIZE_L      (95),
		.PKT_RESPONSE_STATUS_H     (94),
		.PKT_RESPONSE_STATUS_L     (93),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (88),
		.PKT_PROTECTION_L          (86),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) jtag_uart_0_avalon_jtag_slave_agent (
		.clk                     (clk_0_clk_clk),                                                  //   input,    width = 1,             clk.clk
		.reset                   (cpu_nios2_reset_reset_bridge_in_reset_reset),                    //   input,    width = 1,       clk_reset.reset
		.m0_address              (jtag_uart_0_avalon_jtag_slave_agent_m0_address),                 //  output,   width = 20,              m0.address
		.m0_burstcount           (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (jtag_uart_0_avalon_jtag_slave_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (jtag_uart_0_avalon_jtag_slave_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (jtag_uart_0_avalon_jtag_slave_agent_rp_data),                    //  output,  width = 107,                .data
		.rp_startofpacket        (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                              //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                              //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_src_data),                                               //   input,  width = 107,                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                      //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                        //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                            //   input,    width = 9,                .channel
		.rf_sink_ready           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //   input,  width = 108,                .data
		.rf_source_ready         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //  output,  width = 108,                .data
		.rdata_fifo_sink_ready   (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                          // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                           // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                            // (terminated),                               
	);

	monitor_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                  //   input,    width = 1,       clk.clk
		.reset             (cpu_nios2_reset_reset_bridge_in_reset_reset),                    //   input,    width = 1, clk_reset.reset
		.in_data           (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //   input,  width = 108,        in.data
		.in_valid          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //  output,  width = 108,       out.data
		.out_valid         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated),                         
		.csr_read          (1'b0),                                                           // (terminated),                         
		.csr_write         (1'b0),                                                           // (terminated),                         
		.csr_readdata      (),                                                               // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated),                         
		.almost_full_data  (),                                                               // (terminated),                         
		.almost_empty_data (),                                                               // (terminated),                         
		.in_empty          (1'b0),                                                           // (terminated),                         
		.out_empty         (),                                                               // (terminated),                         
		.in_error          (1'b0),                                                           // (terminated),                         
		.out_error         (),                                                               // (terminated),                         
		.in_channel        (1'b0),                                                           // (terminated),                         
		.out_channel       ()                                                                // (terminated),                         
	);

	monitor_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (97),
		.PKT_ORI_BURST_SIZE_L      (95),
		.PKT_RESPONSE_STATUS_H     (94),
		.PKT_RESPONSE_STATUS_L     (93),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (88),
		.PKT_PROTECTION_L          (86),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) sysid_qsys_0_control_slave_agent (
		.clk                     (clk_0_clk_clk),                                               //   input,    width = 1,             clk.clk
		.reset                   (cpu_nios2_reset_reset_bridge_in_reset_reset),                 //   input,    width = 1,       clk_reset.reset
		.m0_address              (sysid_qsys_0_control_slave_agent_m0_address),                 //  output,   width = 20,              m0.address
		.m0_burstcount           (sysid_qsys_0_control_slave_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (sysid_qsys_0_control_slave_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (sysid_qsys_0_control_slave_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (sysid_qsys_0_control_slave_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (sysid_qsys_0_control_slave_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (sysid_qsys_0_control_slave_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (sysid_qsys_0_control_slave_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (sysid_qsys_0_control_slave_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (sysid_qsys_0_control_slave_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (sysid_qsys_0_control_slave_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (sysid_qsys_0_control_slave_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (sysid_qsys_0_control_slave_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (sysid_qsys_0_control_slave_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (sysid_qsys_0_control_slave_agent_rp_data),                    //  output,  width = 107,                .data
		.rp_startofpacket        (sysid_qsys_0_control_slave_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                       //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                       //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_001_src_data),                                        //   input,  width = 107,                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                               //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                 //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                     //   input,    width = 9,                .channel
		.rf_sink_ready           (sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (sysid_qsys_0_control_slave_agent_rsp_fifo_out_data),          //   input,  width = 108,                .data
		.rf_source_ready         (sysid_qsys_0_control_slave_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (sysid_qsys_0_control_slave_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (sysid_qsys_0_control_slave_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (sysid_qsys_0_control_slave_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (sysid_qsys_0_control_slave_agent_rf_source_data),             //  output,  width = 108,                .data
		.rdata_fifo_sink_ready   (sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (sysid_qsys_0_control_slave_agent_rdata_fifo_src_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (sysid_qsys_0_control_slave_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                       // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                        // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                         // (terminated),                               
	);

	monitor_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_0_control_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                               //   input,    width = 1,       clk.clk
		.reset             (cpu_nios2_reset_reset_bridge_in_reset_reset),                 //   input,    width = 1, clk_reset.reset
		.in_data           (sysid_qsys_0_control_slave_agent_rf_source_data),             //   input,  width = 108,        in.data
		.in_valid          (sysid_qsys_0_control_slave_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (sysid_qsys_0_control_slave_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (sysid_qsys_0_control_slave_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (sysid_qsys_0_control_slave_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (sysid_qsys_0_control_slave_agent_rsp_fifo_out_data),          //  output,  width = 108,       out.data
		.out_valid         (sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated),                         
		.csr_read          (1'b0),                                                        // (terminated),                         
		.csr_write         (1'b0),                                                        // (terminated),                         
		.csr_readdata      (),                                                            // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated),                         
		.almost_full_data  (),                                                            // (terminated),                         
		.almost_empty_data (),                                                            // (terminated),                         
		.in_empty          (1'b0),                                                        // (terminated),                         
		.out_empty         (),                                                            // (terminated),                         
		.in_error          (1'b0),                                                        // (terminated),                         
		.out_error         (),                                                            // (terminated),                         
		.in_channel        (1'b0),                                                        // (terminated),                         
		.out_channel       ()                                                             // (terminated),                         
	);

	monitor_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (97),
		.PKT_ORI_BURST_SIZE_L      (95),
		.PKT_RESPONSE_STATUS_H     (94),
		.PKT_RESPONSE_STATUS_L     (93),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (88),
		.PKT_PROTECTION_L          (86),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) cpu_nios2_debug_mem_slave_agent (
		.clk                     (clk_0_clk_clk),                                              //   input,    width = 1,             clk.clk
		.reset                   (cpu_nios2_reset_reset_bridge_in_reset_reset),                //   input,    width = 1,       clk_reset.reset
		.m0_address              (cpu_nios2_debug_mem_slave_agent_m0_address),                 //  output,   width = 20,              m0.address
		.m0_burstcount           (cpu_nios2_debug_mem_slave_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (cpu_nios2_debug_mem_slave_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (cpu_nios2_debug_mem_slave_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (cpu_nios2_debug_mem_slave_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (cpu_nios2_debug_mem_slave_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (cpu_nios2_debug_mem_slave_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (cpu_nios2_debug_mem_slave_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (cpu_nios2_debug_mem_slave_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (cpu_nios2_debug_mem_slave_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (cpu_nios2_debug_mem_slave_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (cpu_nios2_debug_mem_slave_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (cpu_nios2_debug_mem_slave_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (cpu_nios2_debug_mem_slave_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (cpu_nios2_debug_mem_slave_agent_rp_data),                    //  output,  width = 107,                .data
		.rp_startofpacket        (cpu_nios2_debug_mem_slave_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                      //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                      //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_002_src_data),                                       //   input,  width = 107,                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                              //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                    //   input,    width = 9,                .channel
		.rf_sink_ready           (cpu_nios2_debug_mem_slave_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (cpu_nios2_debug_mem_slave_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (cpu_nios2_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (cpu_nios2_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (cpu_nios2_debug_mem_slave_agent_rsp_fifo_out_data),          //   input,  width = 108,                .data
		.rf_source_ready         (cpu_nios2_debug_mem_slave_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (cpu_nios2_debug_mem_slave_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (cpu_nios2_debug_mem_slave_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (cpu_nios2_debug_mem_slave_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (cpu_nios2_debug_mem_slave_agent_rf_source_data),             //  output,  width = 108,                .data
		.rdata_fifo_sink_ready   (cpu_nios2_debug_mem_slave_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (cpu_nios2_debug_mem_slave_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (cpu_nios2_debug_mem_slave_agent_rdata_fifo_src_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (cpu_nios2_debug_mem_slave_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (cpu_nios2_debug_mem_slave_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (cpu_nios2_debug_mem_slave_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                      // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                       // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                        // (terminated),                               
	);

	monitor_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cpu_nios2_debug_mem_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset             (cpu_nios2_reset_reset_bridge_in_reset_reset),                //   input,    width = 1, clk_reset.reset
		.in_data           (cpu_nios2_debug_mem_slave_agent_rf_source_data),             //   input,  width = 108,        in.data
		.in_valid          (cpu_nios2_debug_mem_slave_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (cpu_nios2_debug_mem_slave_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (cpu_nios2_debug_mem_slave_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cpu_nios2_debug_mem_slave_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (cpu_nios2_debug_mem_slave_agent_rsp_fifo_out_data),          //  output,  width = 108,       out.data
		.out_valid         (cpu_nios2_debug_mem_slave_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (cpu_nios2_debug_mem_slave_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (cpu_nios2_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (cpu_nios2_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated),                         
		.csr_read          (1'b0),                                                       // (terminated),                         
		.csr_write         (1'b0),                                                       // (terminated),                         
		.csr_readdata      (),                                                           // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated),                         
		.almost_full_data  (),                                                           // (terminated),                         
		.almost_empty_data (),                                                           // (terminated),                         
		.in_empty          (1'b0),                                                       // (terminated),                         
		.out_empty         (),                                                           // (terminated),                         
		.in_error          (1'b0),                                                       // (terminated),                         
		.out_error         (),                                                           // (terminated),                         
		.in_channel        (1'b0),                                                       // (terminated),                         
		.out_channel       ()                                                            // (terminated),                         
	);

	monitor_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (97),
		.PKT_ORI_BURST_SIZE_L      (95),
		.PKT_RESPONSE_STATUS_H     (94),
		.PKT_RESPONSE_STATUS_L     (93),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (88),
		.PKT_PROTECTION_L          (86),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) cpu_onchip_memory_s1_agent (
		.clk                     (clk_0_clk_clk),                                         //   input,    width = 1,             clk.clk
		.reset                   (cpu_nios2_reset_reset_bridge_in_reset_reset),           //   input,    width = 1,       clk_reset.reset
		.m0_address              (cpu_onchip_memory_s1_agent_m0_address),                 //  output,   width = 20,              m0.address
		.m0_burstcount           (cpu_onchip_memory_s1_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (cpu_onchip_memory_s1_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (cpu_onchip_memory_s1_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (cpu_onchip_memory_s1_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (cpu_onchip_memory_s1_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (cpu_onchip_memory_s1_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (cpu_onchip_memory_s1_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (cpu_onchip_memory_s1_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (cpu_onchip_memory_s1_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (cpu_onchip_memory_s1_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (cpu_onchip_memory_s1_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (cpu_onchip_memory_s1_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (cpu_onchip_memory_s1_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (cpu_onchip_memory_s1_agent_rp_data),                    //  output,  width = 107,                .data
		.rp_startofpacket        (cpu_onchip_memory_s1_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                 //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                 //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_003_src_data),                                  //   input,  width = 107,                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                         //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                           //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                               //   input,    width = 9,                .channel
		.rf_sink_ready           (cpu_onchip_memory_s1_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (cpu_onchip_memory_s1_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (cpu_onchip_memory_s1_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (cpu_onchip_memory_s1_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (cpu_onchip_memory_s1_agent_rsp_fifo_out_data),          //   input,  width = 108,                .data
		.rf_source_ready         (cpu_onchip_memory_s1_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (cpu_onchip_memory_s1_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (cpu_onchip_memory_s1_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (cpu_onchip_memory_s1_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (cpu_onchip_memory_s1_agent_rf_source_data),             //  output,  width = 108,                .data
		.rdata_fifo_sink_ready   (cpu_onchip_memory_s1_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (cpu_onchip_memory_s1_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (cpu_onchip_memory_s1_agent_rdata_fifo_src_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (cpu_onchip_memory_s1_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (cpu_onchip_memory_s1_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (cpu_onchip_memory_s1_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                 // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                  // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                   // (terminated),                               
	);

	monitor_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cpu_onchip_memory_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                         //   input,    width = 1,       clk.clk
		.reset             (cpu_nios2_reset_reset_bridge_in_reset_reset),           //   input,    width = 1, clk_reset.reset
		.in_data           (cpu_onchip_memory_s1_agent_rf_source_data),             //   input,  width = 108,        in.data
		.in_valid          (cpu_onchip_memory_s1_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (cpu_onchip_memory_s1_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (cpu_onchip_memory_s1_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cpu_onchip_memory_s1_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (cpu_onchip_memory_s1_agent_rsp_fifo_out_data),          //  output,  width = 108,       out.data
		.out_valid         (cpu_onchip_memory_s1_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (cpu_onchip_memory_s1_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (cpu_onchip_memory_s1_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (cpu_onchip_memory_s1_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated),                         
		.csr_read          (1'b0),                                                  // (terminated),                         
		.csr_write         (1'b0),                                                  // (terminated),                         
		.csr_readdata      (),                                                      // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated),                         
		.almost_full_data  (),                                                      // (terminated),                         
		.almost_empty_data (),                                                      // (terminated),                         
		.in_empty          (1'b0),                                                  // (terminated),                         
		.out_empty         (),                                                      // (terminated),                         
		.in_error          (1'b0),                                                  // (terminated),                         
		.out_error         (),                                                      // (terminated),                         
		.in_channel        (1'b0),                                                  // (terminated),                         
		.out_channel       ()                                                       // (terminated),                         
	);

	monitor_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (97),
		.PKT_ORI_BURST_SIZE_L      (95),
		.PKT_RESPONSE_STATUS_H     (94),
		.PKT_RESPONSE_STATUS_L     (93),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (88),
		.PKT_PROTECTION_L          (86),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) led_s1_agent (
		.clk                     (clk_0_clk_clk),                               //   input,    width = 1,             clk.clk
		.reset                   (cpu_nios2_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (led_s1_agent_m0_address),                     //  output,   width = 20,              m0.address
		.m0_burstcount           (led_s1_agent_m0_burstcount),                  //  output,    width = 3,                .burstcount
		.m0_byteenable           (led_s1_agent_m0_byteenable),                  //  output,    width = 4,                .byteenable
		.m0_debugaccess          (led_s1_agent_m0_debugaccess),                 //  output,    width = 1,                .debugaccess
		.m0_lock                 (led_s1_agent_m0_lock),                        //  output,    width = 1,                .lock
		.m0_readdata             (led_s1_agent_m0_readdata),                    //   input,   width = 32,                .readdata
		.m0_readdatavalid        (led_s1_agent_m0_readdatavalid),               //   input,    width = 1,                .readdatavalid
		.m0_read                 (led_s1_agent_m0_read),                        //  output,    width = 1,                .read
		.m0_waitrequest          (led_s1_agent_m0_waitrequest),                 //   input,    width = 1,                .waitrequest
		.m0_writedata            (led_s1_agent_m0_writedata),                   //  output,   width = 32,                .writedata
		.m0_write                (led_s1_agent_m0_write),                       //  output,    width = 1,                .write
		.rp_endofpacket          (led_s1_agent_rp_endofpacket),                 //  output,    width = 1,              rp.endofpacket
		.rp_ready                (led_s1_agent_rp_ready),                       //   input,    width = 1,                .ready
		.rp_valid                (led_s1_agent_rp_valid),                       //  output,    width = 1,                .valid
		.rp_data                 (led_s1_agent_rp_data),                        //  output,  width = 107,                .data
		.rp_startofpacket        (led_s1_agent_rp_startofpacket),               //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                       //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                       //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_004_src_data),                        //   input,  width = 107,                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),               //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                 //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                     //   input,    width = 9,                .channel
		.rf_sink_ready           (led_s1_agent_rsp_fifo_out_ready),             //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (led_s1_agent_rsp_fifo_out_valid),             //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (led_s1_agent_rsp_fifo_out_startofpacket),     //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (led_s1_agent_rsp_fifo_out_endofpacket),       //   input,    width = 1,                .endofpacket
		.rf_sink_data            (led_s1_agent_rsp_fifo_out_data),              //   input,  width = 108,                .data
		.rf_source_ready         (led_s1_agent_rf_source_ready),                //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (led_s1_agent_rf_source_valid),                //  output,    width = 1,                .valid
		.rf_source_startofpacket (led_s1_agent_rf_source_startofpacket),        //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (led_s1_agent_rf_source_endofpacket),          //  output,    width = 1,                .endofpacket
		.rf_source_data          (led_s1_agent_rf_source_data),                 //  output,  width = 108,                .data
		.rdata_fifo_sink_ready   (led_s1_agent_rdata_fifo_src_ready),           //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (led_s1_agent_rdata_fifo_src_valid),           //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (led_s1_agent_rdata_fifo_src_data),            //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (led_s1_agent_rdata_fifo_src_ready),           //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (led_s1_agent_rdata_fifo_src_valid),           //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (led_s1_agent_rdata_fifo_src_data),            //  output,   width = 34,                .data
		.m0_response             (2'b00),                                       // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                        // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                         // (terminated),                               
	);

	monitor_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) led_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset             (cpu_nios2_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (led_s1_agent_rf_source_data),                 //   input,  width = 108,        in.data
		.in_valid          (led_s1_agent_rf_source_valid),                //   input,    width = 1,          .valid
		.in_ready          (led_s1_agent_rf_source_ready),                //  output,    width = 1,          .ready
		.in_startofpacket  (led_s1_agent_rf_source_startofpacket),        //   input,    width = 1,          .startofpacket
		.in_endofpacket    (led_s1_agent_rf_source_endofpacket),          //   input,    width = 1,          .endofpacket
		.out_data          (led_s1_agent_rsp_fifo_out_data),              //  output,  width = 108,       out.data
		.out_valid         (led_s1_agent_rsp_fifo_out_valid),             //  output,    width = 1,          .valid
		.out_ready         (led_s1_agent_rsp_fifo_out_ready),             //   input,    width = 1,          .ready
		.out_startofpacket (led_s1_agent_rsp_fifo_out_startofpacket),     //  output,    width = 1,          .startofpacket
		.out_endofpacket   (led_s1_agent_rsp_fifo_out_endofpacket),       //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                       // (terminated),                         
		.csr_read          (1'b0),                                        // (terminated),                         
		.csr_write         (1'b0),                                        // (terminated),                         
		.csr_readdata      (),                                            // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated),                         
		.almost_full_data  (),                                            // (terminated),                         
		.almost_empty_data (),                                            // (terminated),                         
		.in_empty          (1'b0),                                        // (terminated),                         
		.out_empty         (),                                            // (terminated),                         
		.in_error          (1'b0),                                        // (terminated),                         
		.out_error         (),                                            // (terminated),                         
		.in_channel        (1'b0),                                        // (terminated),                         
		.out_channel       ()                                             // (terminated),                         
	);

	monitor_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (97),
		.PKT_ORI_BURST_SIZE_L      (95),
		.PKT_RESPONSE_STATUS_H     (94),
		.PKT_RESPONSE_STATUS_L     (93),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (88),
		.PKT_PROTECTION_L          (86),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) pio_in_s1_agent (
		.clk                     (clk_0_clk_clk),                               //   input,    width = 1,             clk.clk
		.reset                   (cpu_nios2_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (pio_in_s1_agent_m0_address),                  //  output,   width = 20,              m0.address
		.m0_burstcount           (pio_in_s1_agent_m0_burstcount),               //  output,    width = 3,                .burstcount
		.m0_byteenable           (pio_in_s1_agent_m0_byteenable),               //  output,    width = 4,                .byteenable
		.m0_debugaccess          (pio_in_s1_agent_m0_debugaccess),              //  output,    width = 1,                .debugaccess
		.m0_lock                 (pio_in_s1_agent_m0_lock),                     //  output,    width = 1,                .lock
		.m0_readdata             (pio_in_s1_agent_m0_readdata),                 //   input,   width = 32,                .readdata
		.m0_readdatavalid        (pio_in_s1_agent_m0_readdatavalid),            //   input,    width = 1,                .readdatavalid
		.m0_read                 (pio_in_s1_agent_m0_read),                     //  output,    width = 1,                .read
		.m0_waitrequest          (pio_in_s1_agent_m0_waitrequest),              //   input,    width = 1,                .waitrequest
		.m0_writedata            (pio_in_s1_agent_m0_writedata),                //  output,   width = 32,                .writedata
		.m0_write                (pio_in_s1_agent_m0_write),                    //  output,    width = 1,                .write
		.rp_endofpacket          (pio_in_s1_agent_rp_endofpacket),              //  output,    width = 1,              rp.endofpacket
		.rp_ready                (pio_in_s1_agent_rp_ready),                    //   input,    width = 1,                .ready
		.rp_valid                (pio_in_s1_agent_rp_valid),                    //  output,    width = 1,                .valid
		.rp_data                 (pio_in_s1_agent_rp_data),                     //  output,  width = 107,                .data
		.rp_startofpacket        (pio_in_s1_agent_rp_startofpacket),            //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                       //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                       //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_005_src_data),                        //   input,  width = 107,                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),               //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                 //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                     //   input,    width = 9,                .channel
		.rf_sink_ready           (pio_in_s1_agent_rsp_fifo_out_ready),          //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (pio_in_s1_agent_rsp_fifo_out_valid),          //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (pio_in_s1_agent_rsp_fifo_out_startofpacket),  //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (pio_in_s1_agent_rsp_fifo_out_endofpacket),    //   input,    width = 1,                .endofpacket
		.rf_sink_data            (pio_in_s1_agent_rsp_fifo_out_data),           //   input,  width = 108,                .data
		.rf_source_ready         (pio_in_s1_agent_rf_source_ready),             //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (pio_in_s1_agent_rf_source_valid),             //  output,    width = 1,                .valid
		.rf_source_startofpacket (pio_in_s1_agent_rf_source_startofpacket),     //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (pio_in_s1_agent_rf_source_endofpacket),       //  output,    width = 1,                .endofpacket
		.rf_source_data          (pio_in_s1_agent_rf_source_data),              //  output,  width = 108,                .data
		.rdata_fifo_sink_ready   (pio_in_s1_agent_rdata_fifo_src_ready),        //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (pio_in_s1_agent_rdata_fifo_src_valid),        //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (pio_in_s1_agent_rdata_fifo_src_data),         //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (pio_in_s1_agent_rdata_fifo_src_ready),        //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio_in_s1_agent_rdata_fifo_src_valid),        //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (pio_in_s1_agent_rdata_fifo_src_data),         //  output,   width = 34,                .data
		.m0_response             (2'b00),                                       // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                        // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                         // (terminated),                               
	);

	monitor_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_in_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset             (cpu_nios2_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (pio_in_s1_agent_rf_source_data),              //   input,  width = 108,        in.data
		.in_valid          (pio_in_s1_agent_rf_source_valid),             //   input,    width = 1,          .valid
		.in_ready          (pio_in_s1_agent_rf_source_ready),             //  output,    width = 1,          .ready
		.in_startofpacket  (pio_in_s1_agent_rf_source_startofpacket),     //   input,    width = 1,          .startofpacket
		.in_endofpacket    (pio_in_s1_agent_rf_source_endofpacket),       //   input,    width = 1,          .endofpacket
		.out_data          (pio_in_s1_agent_rsp_fifo_out_data),           //  output,  width = 108,       out.data
		.out_valid         (pio_in_s1_agent_rsp_fifo_out_valid),          //  output,    width = 1,          .valid
		.out_ready         (pio_in_s1_agent_rsp_fifo_out_ready),          //   input,    width = 1,          .ready
		.out_startofpacket (pio_in_s1_agent_rsp_fifo_out_startofpacket),  //  output,    width = 1,          .startofpacket
		.out_endofpacket   (pio_in_s1_agent_rsp_fifo_out_endofpacket),    //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                       // (terminated),                         
		.csr_read          (1'b0),                                        // (terminated),                         
		.csr_write         (1'b0),                                        // (terminated),                         
		.csr_readdata      (),                                            // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated),                         
		.almost_full_data  (),                                            // (terminated),                         
		.almost_empty_data (),                                            // (terminated),                         
		.in_empty          (1'b0),                                        // (terminated),                         
		.out_empty         (),                                            // (terminated),                         
		.in_error          (1'b0),                                        // (terminated),                         
		.out_error         (),                                            // (terminated),                         
		.in_channel        (1'b0),                                        // (terminated),                         
		.out_channel       ()                                             // (terminated),                         
	);

	monitor_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (97),
		.PKT_ORI_BURST_SIZE_L      (95),
		.PKT_RESPONSE_STATUS_H     (94),
		.PKT_RESPONSE_STATUS_L     (93),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (88),
		.PKT_PROTECTION_L          (86),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) pio_out_s1_agent (
		.clk                     (clk_0_clk_clk),                               //   input,    width = 1,             clk.clk
		.reset                   (cpu_nios2_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (pio_out_s1_agent_m0_address),                 //  output,   width = 20,              m0.address
		.m0_burstcount           (pio_out_s1_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (pio_out_s1_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (pio_out_s1_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (pio_out_s1_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (pio_out_s1_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (pio_out_s1_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (pio_out_s1_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (pio_out_s1_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (pio_out_s1_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (pio_out_s1_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (pio_out_s1_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (pio_out_s1_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (pio_out_s1_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (pio_out_s1_agent_rp_data),                    //  output,  width = 107,                .data
		.rp_startofpacket        (pio_out_s1_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                       //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                       //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_006_src_data),                        //   input,  width = 107,                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),               //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                 //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                     //   input,    width = 9,                .channel
		.rf_sink_ready           (pio_out_s1_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (pio_out_s1_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (pio_out_s1_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (pio_out_s1_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (pio_out_s1_agent_rsp_fifo_out_data),          //   input,  width = 108,                .data
		.rf_source_ready         (pio_out_s1_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (pio_out_s1_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (pio_out_s1_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (pio_out_s1_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (pio_out_s1_agent_rf_source_data),             //  output,  width = 108,                .data
		.rdata_fifo_sink_ready   (pio_out_s1_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (pio_out_s1_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (pio_out_s1_agent_rdata_fifo_src_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (pio_out_s1_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio_out_s1_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (pio_out_s1_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                       // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                        // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                         // (terminated),                               
	);

	monitor_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_out_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset             (cpu_nios2_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (pio_out_s1_agent_rf_source_data),             //   input,  width = 108,        in.data
		.in_valid          (pio_out_s1_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (pio_out_s1_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (pio_out_s1_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (pio_out_s1_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (pio_out_s1_agent_rsp_fifo_out_data),          //  output,  width = 108,       out.data
		.out_valid         (pio_out_s1_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (pio_out_s1_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (pio_out_s1_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (pio_out_s1_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                       // (terminated),                         
		.csr_read          (1'b0),                                        // (terminated),                         
		.csr_write         (1'b0),                                        // (terminated),                         
		.csr_readdata      (),                                            // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated),                         
		.almost_full_data  (),                                            // (terminated),                         
		.almost_empty_data (),                                            // (terminated),                         
		.in_empty          (1'b0),                                        // (terminated),                         
		.out_empty         (),                                            // (terminated),                         
		.in_error          (1'b0),                                        // (terminated),                         
		.out_error         (),                                            // (terminated),                         
		.in_channel        (1'b0),                                        // (terminated),                         
		.out_channel       ()                                             // (terminated),                         
	);

	monitor_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (97),
		.PKT_ORI_BURST_SIZE_L      (95),
		.PKT_RESPONSE_STATUS_H     (94),
		.PKT_RESPONSE_STATUS_L     (93),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (88),
		.PKT_PROTECTION_L          (86),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) power_temp_scl_s1_agent (
		.clk                     (clk_0_clk_clk),                                      //   input,    width = 1,             clk.clk
		.reset                   (cpu_nios2_reset_reset_bridge_in_reset_reset),        //   input,    width = 1,       clk_reset.reset
		.m0_address              (power_temp_scl_s1_agent_m0_address),                 //  output,   width = 20,              m0.address
		.m0_burstcount           (power_temp_scl_s1_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (power_temp_scl_s1_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (power_temp_scl_s1_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (power_temp_scl_s1_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (power_temp_scl_s1_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (power_temp_scl_s1_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (power_temp_scl_s1_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (power_temp_scl_s1_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (power_temp_scl_s1_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (power_temp_scl_s1_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (power_temp_scl_s1_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (power_temp_scl_s1_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (power_temp_scl_s1_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (power_temp_scl_s1_agent_rp_data),                    //  output,  width = 107,                .data
		.rp_startofpacket        (power_temp_scl_s1_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                              //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                              //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_007_src_data),                               //   input,  width = 107,                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                      //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                        //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                            //   input,    width = 9,                .channel
		.rf_sink_ready           (power_temp_scl_s1_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (power_temp_scl_s1_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (power_temp_scl_s1_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (power_temp_scl_s1_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (power_temp_scl_s1_agent_rsp_fifo_out_data),          //   input,  width = 108,                .data
		.rf_source_ready         (power_temp_scl_s1_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (power_temp_scl_s1_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (power_temp_scl_s1_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (power_temp_scl_s1_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (power_temp_scl_s1_agent_rf_source_data),             //  output,  width = 108,                .data
		.rdata_fifo_sink_ready   (power_temp_scl_s1_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (power_temp_scl_s1_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (power_temp_scl_s1_agent_rdata_fifo_src_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (power_temp_scl_s1_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (power_temp_scl_s1_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (power_temp_scl_s1_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                              // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                               // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                // (terminated),                               
	);

	monitor_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) power_temp_scl_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset             (cpu_nios2_reset_reset_bridge_in_reset_reset),        //   input,    width = 1, clk_reset.reset
		.in_data           (power_temp_scl_s1_agent_rf_source_data),             //   input,  width = 108,        in.data
		.in_valid          (power_temp_scl_s1_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (power_temp_scl_s1_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (power_temp_scl_s1_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (power_temp_scl_s1_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (power_temp_scl_s1_agent_rsp_fifo_out_data),          //  output,  width = 108,       out.data
		.out_valid         (power_temp_scl_s1_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (power_temp_scl_s1_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (power_temp_scl_s1_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (power_temp_scl_s1_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                              // (terminated),                         
		.csr_read          (1'b0),                                               // (terminated),                         
		.csr_write         (1'b0),                                               // (terminated),                         
		.csr_readdata      (),                                                   // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated),                         
		.almost_full_data  (),                                                   // (terminated),                         
		.almost_empty_data (),                                                   // (terminated),                         
		.in_empty          (1'b0),                                               // (terminated),                         
		.out_empty         (),                                                   // (terminated),                         
		.in_error          (1'b0),                                               // (terminated),                         
		.out_error         (),                                                   // (terminated),                         
		.in_channel        (1'b0),                                               // (terminated),                         
		.out_channel       ()                                                    // (terminated),                         
	);

	monitor_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (97),
		.PKT_ORI_BURST_SIZE_L      (95),
		.PKT_RESPONSE_STATUS_H     (94),
		.PKT_RESPONSE_STATUS_L     (93),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (88),
		.PKT_PROTECTION_L          (86),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) power_temp_sda_s1_agent (
		.clk                     (clk_0_clk_clk),                                      //   input,    width = 1,             clk.clk
		.reset                   (cpu_nios2_reset_reset_bridge_in_reset_reset),        //   input,    width = 1,       clk_reset.reset
		.m0_address              (power_temp_sda_s1_agent_m0_address),                 //  output,   width = 20,              m0.address
		.m0_burstcount           (power_temp_sda_s1_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (power_temp_sda_s1_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (power_temp_sda_s1_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (power_temp_sda_s1_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (power_temp_sda_s1_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (power_temp_sda_s1_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (power_temp_sda_s1_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (power_temp_sda_s1_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (power_temp_sda_s1_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (power_temp_sda_s1_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (power_temp_sda_s1_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (power_temp_sda_s1_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (power_temp_sda_s1_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (power_temp_sda_s1_agent_rp_data),                    //  output,  width = 107,                .data
		.rp_startofpacket        (power_temp_sda_s1_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                              //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                              //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_008_src_data),                               //   input,  width = 107,                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                      //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                        //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                            //   input,    width = 9,                .channel
		.rf_sink_ready           (power_temp_sda_s1_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (power_temp_sda_s1_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (power_temp_sda_s1_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (power_temp_sda_s1_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (power_temp_sda_s1_agent_rsp_fifo_out_data),          //   input,  width = 108,                .data
		.rf_source_ready         (power_temp_sda_s1_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (power_temp_sda_s1_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (power_temp_sda_s1_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (power_temp_sda_s1_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (power_temp_sda_s1_agent_rf_source_data),             //  output,  width = 108,                .data
		.rdata_fifo_sink_ready   (power_temp_sda_s1_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (power_temp_sda_s1_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (power_temp_sda_s1_agent_rdata_fifo_src_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (power_temp_sda_s1_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (power_temp_sda_s1_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (power_temp_sda_s1_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                              // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                               // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                // (terminated),                               
	);

	monitor_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) power_temp_sda_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset             (cpu_nios2_reset_reset_bridge_in_reset_reset),        //   input,    width = 1, clk_reset.reset
		.in_data           (power_temp_sda_s1_agent_rf_source_data),             //   input,  width = 108,        in.data
		.in_valid          (power_temp_sda_s1_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (power_temp_sda_s1_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (power_temp_sda_s1_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (power_temp_sda_s1_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (power_temp_sda_s1_agent_rsp_fifo_out_data),          //  output,  width = 108,       out.data
		.out_valid         (power_temp_sda_s1_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (power_temp_sda_s1_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (power_temp_sda_s1_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (power_temp_sda_s1_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                              // (terminated),                         
		.csr_read          (1'b0),                                               // (terminated),                         
		.csr_write         (1'b0),                                               // (terminated),                         
		.csr_readdata      (),                                                   // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated),                         
		.almost_full_data  (),                                                   // (terminated),                         
		.almost_empty_data (),                                                   // (terminated),                         
		.in_empty          (1'b0),                                               // (terminated),                         
		.out_empty         (),                                                   // (terminated),                         
		.in_error          (1'b0),                                               // (terminated),                         
		.out_error         (),                                                   // (terminated),                         
		.in_channel        (1'b0),                                               // (terminated),                         
		.out_channel       ()                                                    // (terminated),                         
	);

	monitor_altera_merlin_router_181_6vwu4zy router (
		.sink_ready         (cpu_nios2_data_master_agent_cp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (cpu_nios2_data_master_agent_cp_valid),         //   input,    width = 1,          .valid
		.sink_data          (cpu_nios2_data_master_agent_cp_data),          //   input,  width = 107,          .data
		.sink_startofpacket (cpu_nios2_data_master_agent_cp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (cpu_nios2_data_master_agent_cp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clk_0_clk_clk),                                //   input,    width = 1,       clk.clk
		.reset              (cpu_nios2_reset_reset_bridge_in_reset_reset),  //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                             //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                             //  output,    width = 1,          .valid
		.src_data           (router_src_data),                              //  output,  width = 107,          .data
		.src_channel        (router_src_channel),                           //  output,    width = 9,          .channel
		.src_startofpacket  (router_src_startofpacket),                     //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                        //  output,    width = 1,          .endofpacket
	);

	monitor_altera_merlin_router_181_22apfra router_001 (
		.sink_ready         (cpu_nios2_instruction_master_agent_cp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (cpu_nios2_instruction_master_agent_cp_valid),         //   input,    width = 1,          .valid
		.sink_data          (cpu_nios2_instruction_master_agent_cp_data),          //   input,  width = 107,          .data
		.sink_startofpacket (cpu_nios2_instruction_master_agent_cp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (cpu_nios2_instruction_master_agent_cp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clk_0_clk_clk),                                       //   input,    width = 1,       clk.clk
		.reset              (cpu_nios2_reset_reset_bridge_in_reset_reset),         //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                                 //  output,  width = 107,          .data
		.src_channel        (router_001_src_channel),                              //  output,    width = 9,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                        //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                           //  output,    width = 1,          .endofpacket
	);

	monitor_altera_merlin_router_181_sc3zhbi router_002 (
		.sink_ready         (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (jtag_uart_0_avalon_jtag_slave_agent_rp_data),          //   input,  width = 107,          .data
		.sink_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clk_0_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset              (cpu_nios2_reset_reset_bridge_in_reset_reset),          //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                                 //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                                  //  output,  width = 107,          .data
		.src_channel        (router_002_src_channel),                               //  output,    width = 9,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                            //  output,    width = 1,          .endofpacket
	);

	monitor_altera_merlin_router_181_sc3zhbi router_003 (
		.sink_ready         (sysid_qsys_0_control_slave_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (sysid_qsys_0_control_slave_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (sysid_qsys_0_control_slave_agent_rp_data),          //   input,  width = 107,          .data
		.sink_startofpacket (sysid_qsys_0_control_slave_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (sysid_qsys_0_control_slave_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clk_0_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset              (cpu_nios2_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, clk_reset.reset
		.src_ready          (router_003_src_ready),                              //   input,    width = 1,       src.ready
		.src_valid          (router_003_src_valid),                              //  output,    width = 1,          .valid
		.src_data           (router_003_src_data),                               //  output,  width = 107,          .data
		.src_channel        (router_003_src_channel),                            //  output,    width = 9,          .channel
		.src_startofpacket  (router_003_src_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	monitor_altera_merlin_router_181_ygpgyvi router_004 (
		.sink_ready         (cpu_nios2_debug_mem_slave_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (cpu_nios2_debug_mem_slave_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (cpu_nios2_debug_mem_slave_agent_rp_data),          //   input,  width = 107,          .data
		.sink_startofpacket (cpu_nios2_debug_mem_slave_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (cpu_nios2_debug_mem_slave_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clk_0_clk_clk),                                    //   input,    width = 1,       clk.clk
		.reset              (cpu_nios2_reset_reset_bridge_in_reset_reset),      //   input,    width = 1, clk_reset.reset
		.src_ready          (router_004_src_ready),                             //   input,    width = 1,       src.ready
		.src_valid          (router_004_src_valid),                             //  output,    width = 1,          .valid
		.src_data           (router_004_src_data),                              //  output,  width = 107,          .data
		.src_channel        (router_004_src_channel),                           //  output,    width = 9,          .channel
		.src_startofpacket  (router_004_src_startofpacket),                     //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                        //  output,    width = 1,          .endofpacket
	);

	monitor_altera_merlin_router_181_ygpgyvi router_005 (
		.sink_ready         (cpu_onchip_memory_s1_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (cpu_onchip_memory_s1_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (cpu_onchip_memory_s1_agent_rp_data),          //   input,  width = 107,          .data
		.sink_startofpacket (cpu_onchip_memory_s1_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (cpu_onchip_memory_s1_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clk_0_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (cpu_nios2_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_005_src_ready),                        //   input,    width = 1,       src.ready
		.src_valid          (router_005_src_valid),                        //  output,    width = 1,          .valid
		.src_data           (router_005_src_data),                         //  output,  width = 107,          .data
		.src_channel        (router_005_src_channel),                      //  output,    width = 9,          .channel
		.src_startofpacket  (router_005_src_startofpacket),                //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                   //  output,    width = 1,          .endofpacket
	);

	monitor_altera_merlin_router_181_sc3zhbi router_006 (
		.sink_ready         (led_s1_agent_rp_ready),                       //  output,    width = 1,      sink.ready
		.sink_valid         (led_s1_agent_rp_valid),                       //   input,    width = 1,          .valid
		.sink_data          (led_s1_agent_rp_data),                        //   input,  width = 107,          .data
		.sink_startofpacket (led_s1_agent_rp_startofpacket),               //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (led_s1_agent_rp_endofpacket),                 //   input,    width = 1,          .endofpacket
		.clk                (clk_0_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (cpu_nios2_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_006_src_ready),                        //   input,    width = 1,       src.ready
		.src_valid          (router_006_src_valid),                        //  output,    width = 1,          .valid
		.src_data           (router_006_src_data),                         //  output,  width = 107,          .data
		.src_channel        (router_006_src_channel),                      //  output,    width = 9,          .channel
		.src_startofpacket  (router_006_src_startofpacket),                //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                   //  output,    width = 1,          .endofpacket
	);

	monitor_altera_merlin_router_181_sc3zhbi router_007 (
		.sink_ready         (pio_in_s1_agent_rp_ready),                    //  output,    width = 1,      sink.ready
		.sink_valid         (pio_in_s1_agent_rp_valid),                    //   input,    width = 1,          .valid
		.sink_data          (pio_in_s1_agent_rp_data),                     //   input,  width = 107,          .data
		.sink_startofpacket (pio_in_s1_agent_rp_startofpacket),            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (pio_in_s1_agent_rp_endofpacket),              //   input,    width = 1,          .endofpacket
		.clk                (clk_0_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (cpu_nios2_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_007_src_ready),                        //   input,    width = 1,       src.ready
		.src_valid          (router_007_src_valid),                        //  output,    width = 1,          .valid
		.src_data           (router_007_src_data),                         //  output,  width = 107,          .data
		.src_channel        (router_007_src_channel),                      //  output,    width = 9,          .channel
		.src_startofpacket  (router_007_src_startofpacket),                //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                   //  output,    width = 1,          .endofpacket
	);

	monitor_altera_merlin_router_181_sc3zhbi router_008 (
		.sink_ready         (pio_out_s1_agent_rp_ready),                   //  output,    width = 1,      sink.ready
		.sink_valid         (pio_out_s1_agent_rp_valid),                   //   input,    width = 1,          .valid
		.sink_data          (pio_out_s1_agent_rp_data),                    //   input,  width = 107,          .data
		.sink_startofpacket (pio_out_s1_agent_rp_startofpacket),           //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (pio_out_s1_agent_rp_endofpacket),             //   input,    width = 1,          .endofpacket
		.clk                (clk_0_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (cpu_nios2_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_008_src_ready),                        //   input,    width = 1,       src.ready
		.src_valid          (router_008_src_valid),                        //  output,    width = 1,          .valid
		.src_data           (router_008_src_data),                         //  output,  width = 107,          .data
		.src_channel        (router_008_src_channel),                      //  output,    width = 9,          .channel
		.src_startofpacket  (router_008_src_startofpacket),                //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                   //  output,    width = 1,          .endofpacket
	);

	monitor_altera_merlin_router_181_sc3zhbi router_009 (
		.sink_ready         (power_temp_scl_s1_agent_rp_ready),            //  output,    width = 1,      sink.ready
		.sink_valid         (power_temp_scl_s1_agent_rp_valid),            //   input,    width = 1,          .valid
		.sink_data          (power_temp_scl_s1_agent_rp_data),             //   input,  width = 107,          .data
		.sink_startofpacket (power_temp_scl_s1_agent_rp_startofpacket),    //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (power_temp_scl_s1_agent_rp_endofpacket),      //   input,    width = 1,          .endofpacket
		.clk                (clk_0_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (cpu_nios2_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_009_src_ready),                        //   input,    width = 1,       src.ready
		.src_valid          (router_009_src_valid),                        //  output,    width = 1,          .valid
		.src_data           (router_009_src_data),                         //  output,  width = 107,          .data
		.src_channel        (router_009_src_channel),                      //  output,    width = 9,          .channel
		.src_startofpacket  (router_009_src_startofpacket),                //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                   //  output,    width = 1,          .endofpacket
	);

	monitor_altera_merlin_router_181_sc3zhbi router_010 (
		.sink_ready         (power_temp_sda_s1_agent_rp_ready),            //  output,    width = 1,      sink.ready
		.sink_valid         (power_temp_sda_s1_agent_rp_valid),            //   input,    width = 1,          .valid
		.sink_data          (power_temp_sda_s1_agent_rp_data),             //   input,  width = 107,          .data
		.sink_startofpacket (power_temp_sda_s1_agent_rp_startofpacket),    //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (power_temp_sda_s1_agent_rp_endofpacket),      //   input,    width = 1,          .endofpacket
		.clk                (clk_0_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (cpu_nios2_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_010_src_ready),                        //   input,    width = 1,       src.ready
		.src_valid          (router_010_src_valid),                        //  output,    width = 1,          .valid
		.src_data           (router_010_src_data),                         //  output,  width = 107,          .data
		.src_channel        (router_010_src_channel),                      //  output,    width = 9,          .channel
		.src_startofpacket  (router_010_src_startofpacket),                //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                   //  output,    width = 1,          .endofpacket
	);

	monitor_altera_merlin_demultiplexer_181_wcwblji cmd_demux (
		.clk                (clk_0_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (cpu_nios2_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_src_ready),                            //  output,    width = 1,      sink.ready
		.sink_channel       (router_src_channel),                          //   input,    width = 9,          .channel
		.sink_data          (router_src_data),                             //   input,  width = 107,          .data
		.sink_startofpacket (router_src_startofpacket),                    //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                      //   input,    width = 1,          .endofpacket
		.sink_valid         (router_src_valid),                            //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_src0_ready),                        //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                        //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_src0_data),                         //  output,  width = 107,          .data
		.src0_channel       (cmd_demux_src0_channel),                      //  output,    width = 9,          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                  //  output,    width = 1,          .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                        //   input,    width = 1,      src1.ready
		.src1_valid         (cmd_demux_src1_valid),                        //  output,    width = 1,          .valid
		.src1_data          (cmd_demux_src1_data),                         //  output,  width = 107,          .data
		.src1_channel       (cmd_demux_src1_channel),                      //  output,    width = 9,          .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                  //  output,    width = 1,          .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                        //   input,    width = 1,      src2.ready
		.src2_valid         (cmd_demux_src2_valid),                        //  output,    width = 1,          .valid
		.src2_data          (cmd_demux_src2_data),                         //  output,  width = 107,          .data
		.src2_channel       (cmd_demux_src2_channel),                      //  output,    width = 9,          .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                  //  output,    width = 1,          .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                        //   input,    width = 1,      src3.ready
		.src3_valid         (cmd_demux_src3_valid),                        //  output,    width = 1,          .valid
		.src3_data          (cmd_demux_src3_data),                         //  output,  width = 107,          .data
		.src3_channel       (cmd_demux_src3_channel),                      //  output,    width = 9,          .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                //  output,    width = 1,          .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                  //  output,    width = 1,          .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                        //   input,    width = 1,      src4.ready
		.src4_valid         (cmd_demux_src4_valid),                        //  output,    width = 1,          .valid
		.src4_data          (cmd_demux_src4_data),                         //  output,  width = 107,          .data
		.src4_channel       (cmd_demux_src4_channel),                      //  output,    width = 9,          .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                //  output,    width = 1,          .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),                  //  output,    width = 1,          .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                        //   input,    width = 1,      src5.ready
		.src5_valid         (cmd_demux_src5_valid),                        //  output,    width = 1,          .valid
		.src5_data          (cmd_demux_src5_data),                         //  output,  width = 107,          .data
		.src5_channel       (cmd_demux_src5_channel),                      //  output,    width = 9,          .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),                //  output,    width = 1,          .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket),                  //  output,    width = 1,          .endofpacket
		.src6_ready         (cmd_demux_src6_ready),                        //   input,    width = 1,      src6.ready
		.src6_valid         (cmd_demux_src6_valid),                        //  output,    width = 1,          .valid
		.src6_data          (cmd_demux_src6_data),                         //  output,  width = 107,          .data
		.src6_channel       (cmd_demux_src6_channel),                      //  output,    width = 9,          .channel
		.src6_startofpacket (cmd_demux_src6_startofpacket),                //  output,    width = 1,          .startofpacket
		.src6_endofpacket   (cmd_demux_src6_endofpacket),                  //  output,    width = 1,          .endofpacket
		.src7_ready         (cmd_demux_src7_ready),                        //   input,    width = 1,      src7.ready
		.src7_valid         (cmd_demux_src7_valid),                        //  output,    width = 1,          .valid
		.src7_data          (cmd_demux_src7_data),                         //  output,  width = 107,          .data
		.src7_channel       (cmd_demux_src7_channel),                      //  output,    width = 9,          .channel
		.src7_startofpacket (cmd_demux_src7_startofpacket),                //  output,    width = 1,          .startofpacket
		.src7_endofpacket   (cmd_demux_src7_endofpacket),                  //  output,    width = 1,          .endofpacket
		.src8_ready         (cmd_demux_src8_ready),                        //   input,    width = 1,      src8.ready
		.src8_valid         (cmd_demux_src8_valid),                        //  output,    width = 1,          .valid
		.src8_data          (cmd_demux_src8_data),                         //  output,  width = 107,          .data
		.src8_channel       (cmd_demux_src8_channel),                      //  output,    width = 9,          .channel
		.src8_startofpacket (cmd_demux_src8_startofpacket),                //  output,    width = 1,          .startofpacket
		.src8_endofpacket   (cmd_demux_src8_endofpacket)                   //  output,    width = 1,          .endofpacket
	);

	monitor_altera_merlin_demultiplexer_181_zuchasy cmd_demux_001 (
		.clk                (clk_0_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (cpu_nios2_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_001_src_ready),                        //  output,    width = 1,      sink.ready
		.sink_channel       (router_001_src_channel),                      //   input,    width = 9,          .channel
		.sink_data          (router_001_src_data),                         //   input,  width = 107,          .data
		.sink_startofpacket (router_001_src_startofpacket),                //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                  //   input,    width = 1,          .endofpacket
		.sink_valid         (router_001_src_valid),                        //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                    //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                    //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_001_src0_data),                     //  output,  width = 107,          .data
		.src0_channel       (cmd_demux_001_src0_channel),                  //  output,    width = 9,          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),            //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),              //  output,    width = 1,          .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                    //   input,    width = 1,      src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                    //  output,    width = 1,          .valid
		.src1_data          (cmd_demux_001_src1_data),                     //  output,  width = 107,          .data
		.src1_channel       (cmd_demux_001_src1_channel),                  //  output,    width = 9,          .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),            //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket)               //  output,    width = 1,          .endofpacket
	);

	monitor_altera_merlin_multiplexer_181_zml3pxq cmd_mux (
		.clk                 (clk_0_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset               (cpu_nios2_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                           //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                           //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                            //  output,  width = 107,          .data
		.src_channel         (cmd_mux_src_channel),                         //  output,    width = 9,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                   //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                     //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                        //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                        //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                      //   input,    width = 9,          .channel
		.sink0_data          (cmd_demux_src0_data),                         //   input,  width = 107,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                   //   input,    width = 1,          .endofpacket
	);

	monitor_altera_merlin_multiplexer_181_zml3pxq cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset               (cpu_nios2_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                       //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_001_src_valid),                       //  output,    width = 1,          .valid
		.src_data            (cmd_mux_001_src_data),                        //  output,  width = 107,          .data
		.src_channel         (cmd_mux_001_src_channel),                     //  output,    width = 9,          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),               //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                 //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                        //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                        //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src1_channel),                      //   input,    width = 9,          .channel
		.sink0_data          (cmd_demux_src1_data),                         //   input,  width = 107,          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                   //   input,    width = 1,          .endofpacket
	);

	monitor_altera_merlin_multiplexer_181_s3yksmi cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset               (cpu_nios2_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                       //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_002_src_valid),                       //  output,    width = 1,          .valid
		.src_data            (cmd_mux_002_src_data),                        //  output,  width = 107,          .data
		.src_channel         (cmd_mux_002_src_channel),                     //  output,    width = 9,          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),               //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                 //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                        //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                        //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src2_channel),                      //   input,    width = 9,          .channel
		.sink0_data          (cmd_demux_src2_data),                         //   input,  width = 107,          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),                  //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                    //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                    //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                  //   input,    width = 9,          .channel
		.sink1_data          (cmd_demux_001_src0_data),                     //   input,  width = 107,          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),            //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)               //   input,    width = 1,          .endofpacket
	);

	monitor_altera_merlin_multiplexer_181_s3yksmi cmd_mux_003 (
		.clk                 (clk_0_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset               (cpu_nios2_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                       //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_003_src_valid),                       //  output,    width = 1,          .valid
		.src_data            (cmd_mux_003_src_data),                        //  output,  width = 107,          .data
		.src_channel         (cmd_mux_003_src_channel),                     //  output,    width = 9,          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),               //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                 //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                        //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                        //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src3_channel),                      //   input,    width = 9,          .channel
		.sink0_data          (cmd_demux_src3_data),                         //   input,  width = 107,          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),                  //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                    //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                    //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                  //   input,    width = 9,          .channel
		.sink1_data          (cmd_demux_001_src1_data),                     //   input,  width = 107,          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),            //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)               //   input,    width = 1,          .endofpacket
	);

	monitor_altera_merlin_multiplexer_181_zml3pxq cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset               (cpu_nios2_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                       //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_004_src_valid),                       //  output,    width = 1,          .valid
		.src_data            (cmd_mux_004_src_data),                        //  output,  width = 107,          .data
		.src_channel         (cmd_mux_004_src_channel),                     //  output,    width = 9,          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),               //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                 //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                        //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                        //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src4_channel),                      //   input,    width = 9,          .channel
		.sink0_data          (cmd_demux_src4_data),                         //   input,  width = 107,          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)                   //   input,    width = 1,          .endofpacket
	);

	monitor_altera_merlin_multiplexer_181_zml3pxq cmd_mux_005 (
		.clk                 (clk_0_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset               (cpu_nios2_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                       //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_005_src_valid),                       //  output,    width = 1,          .valid
		.src_data            (cmd_mux_005_src_data),                        //  output,  width = 107,          .data
		.src_channel         (cmd_mux_005_src_channel),                     //  output,    width = 9,          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),               //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                 //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                        //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                        //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src5_channel),                      //   input,    width = 9,          .channel
		.sink0_data          (cmd_demux_src5_data),                         //   input,  width = 107,          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)                   //   input,    width = 1,          .endofpacket
	);

	monitor_altera_merlin_multiplexer_181_zml3pxq cmd_mux_006 (
		.clk                 (clk_0_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset               (cpu_nios2_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                       //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_006_src_valid),                       //  output,    width = 1,          .valid
		.src_data            (cmd_mux_006_src_data),                        //  output,  width = 107,          .data
		.src_channel         (cmd_mux_006_src_channel),                     //  output,    width = 9,          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),               //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                 //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                        //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                        //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src6_channel),                      //   input,    width = 9,          .channel
		.sink0_data          (cmd_demux_src6_data),                         //   input,  width = 107,          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket)                   //   input,    width = 1,          .endofpacket
	);

	monitor_altera_merlin_multiplexer_181_zml3pxq cmd_mux_007 (
		.clk                 (clk_0_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset               (cpu_nios2_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                       //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_007_src_valid),                       //  output,    width = 1,          .valid
		.src_data            (cmd_mux_007_src_data),                        //  output,  width = 107,          .data
		.src_channel         (cmd_mux_007_src_channel),                     //  output,    width = 9,          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),               //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                 //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                        //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                        //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src7_channel),                      //   input,    width = 9,          .channel
		.sink0_data          (cmd_demux_src7_data),                         //   input,  width = 107,          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket)                   //   input,    width = 1,          .endofpacket
	);

	monitor_altera_merlin_multiplexer_181_zml3pxq cmd_mux_008 (
		.clk                 (clk_0_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset               (cpu_nios2_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                       //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_008_src_valid),                       //  output,    width = 1,          .valid
		.src_data            (cmd_mux_008_src_data),                        //  output,  width = 107,          .data
		.src_channel         (cmd_mux_008_src_channel),                     //  output,    width = 9,          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),               //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                 //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                        //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                        //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src8_channel),                      //   input,    width = 9,          .channel
		.sink0_data          (cmd_demux_src8_data),                         //   input,  width = 107,          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket)                   //   input,    width = 1,          .endofpacket
	);

	monitor_altera_merlin_demultiplexer_181_qqjp3iy rsp_demux (
		.clk                (clk_0_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (cpu_nios2_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_002_src_ready),                        //  output,    width = 1,      sink.ready
		.sink_channel       (router_002_src_channel),                      //   input,    width = 9,          .channel
		.sink_data          (router_002_src_data),                         //   input,  width = 107,          .data
		.sink_startofpacket (router_002_src_startofpacket),                //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                  //   input,    width = 1,          .endofpacket
		.sink_valid         (router_002_src_valid),                        //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                        //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                        //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                         //  output,  width = 107,          .data
		.src0_channel       (rsp_demux_src0_channel),                      //  output,    width = 9,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                   //  output,    width = 1,          .endofpacket
	);

	monitor_altera_merlin_demultiplexer_181_qqjp3iy rsp_demux_001 (
		.clk                (clk_0_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (cpu_nios2_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_003_src_ready),                        //  output,    width = 1,      sink.ready
		.sink_channel       (router_003_src_channel),                      //   input,    width = 9,          .channel
		.sink_data          (router_003_src_data),                         //   input,  width = 107,          .data
		.sink_startofpacket (router_003_src_startofpacket),                //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                  //   input,    width = 1,          .endofpacket
		.sink_valid         (router_003_src_valid),                        //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                    //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                    //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_001_src0_data),                     //  output,  width = 107,          .data
		.src0_channel       (rsp_demux_001_src0_channel),                  //  output,    width = 9,          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),            //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)               //  output,    width = 1,          .endofpacket
	);

	monitor_altera_merlin_demultiplexer_181_zuchasy rsp_demux_002 (
		.clk                (clk_0_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (cpu_nios2_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_004_src_ready),                        //  output,    width = 1,      sink.ready
		.sink_channel       (router_004_src_channel),                      //   input,    width = 9,          .channel
		.sink_data          (router_004_src_data),                         //   input,  width = 107,          .data
		.sink_startofpacket (router_004_src_startofpacket),                //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                  //   input,    width = 1,          .endofpacket
		.sink_valid         (router_004_src_valid),                        //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                    //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                    //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_002_src0_data),                     //  output,  width = 107,          .data
		.src0_channel       (rsp_demux_002_src0_channel),                  //  output,    width = 9,          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),            //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),              //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                    //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                    //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_002_src1_data),                     //  output,  width = 107,          .data
		.src1_channel       (rsp_demux_002_src1_channel),                  //  output,    width = 9,          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),            //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)               //  output,    width = 1,          .endofpacket
	);

	monitor_altera_merlin_demultiplexer_181_zuchasy rsp_demux_003 (
		.clk                (clk_0_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (cpu_nios2_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_005_src_ready),                        //  output,    width = 1,      sink.ready
		.sink_channel       (router_005_src_channel),                      //   input,    width = 9,          .channel
		.sink_data          (router_005_src_data),                         //   input,  width = 107,          .data
		.sink_startofpacket (router_005_src_startofpacket),                //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                  //   input,    width = 1,          .endofpacket
		.sink_valid         (router_005_src_valid),                        //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                    //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                    //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_003_src0_data),                     //  output,  width = 107,          .data
		.src0_channel       (rsp_demux_003_src0_channel),                  //  output,    width = 9,          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),            //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),              //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                    //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                    //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_003_src1_data),                     //  output,  width = 107,          .data
		.src1_channel       (rsp_demux_003_src1_channel),                  //  output,    width = 9,          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),            //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)               //  output,    width = 1,          .endofpacket
	);

	monitor_altera_merlin_demultiplexer_181_qqjp3iy rsp_demux_004 (
		.clk                (clk_0_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (cpu_nios2_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_006_src_ready),                        //  output,    width = 1,      sink.ready
		.sink_channel       (router_006_src_channel),                      //   input,    width = 9,          .channel
		.sink_data          (router_006_src_data),                         //   input,  width = 107,          .data
		.sink_startofpacket (router_006_src_startofpacket),                //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                  //   input,    width = 1,          .endofpacket
		.sink_valid         (router_006_src_valid),                        //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                    //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                    //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_004_src0_data),                     //  output,  width = 107,          .data
		.src0_channel       (rsp_demux_004_src0_channel),                  //  output,    width = 9,          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),            //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)               //  output,    width = 1,          .endofpacket
	);

	monitor_altera_merlin_demultiplexer_181_qqjp3iy rsp_demux_005 (
		.clk                (clk_0_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (cpu_nios2_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_007_src_ready),                        //  output,    width = 1,      sink.ready
		.sink_channel       (router_007_src_channel),                      //   input,    width = 9,          .channel
		.sink_data          (router_007_src_data),                         //   input,  width = 107,          .data
		.sink_startofpacket (router_007_src_startofpacket),                //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                  //   input,    width = 1,          .endofpacket
		.sink_valid         (router_007_src_valid),                        //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                    //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                    //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_005_src0_data),                     //  output,  width = 107,          .data
		.src0_channel       (rsp_demux_005_src0_channel),                  //  output,    width = 9,          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),            //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)               //  output,    width = 1,          .endofpacket
	);

	monitor_altera_merlin_demultiplexer_181_qqjp3iy rsp_demux_006 (
		.clk                (clk_0_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (cpu_nios2_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_008_src_ready),                        //  output,    width = 1,      sink.ready
		.sink_channel       (router_008_src_channel),                      //   input,    width = 9,          .channel
		.sink_data          (router_008_src_data),                         //   input,  width = 107,          .data
		.sink_startofpacket (router_008_src_startofpacket),                //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                  //   input,    width = 1,          .endofpacket
		.sink_valid         (router_008_src_valid),                        //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                    //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                    //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_006_src0_data),                     //  output,  width = 107,          .data
		.src0_channel       (rsp_demux_006_src0_channel),                  //  output,    width = 9,          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),            //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)               //  output,    width = 1,          .endofpacket
	);

	monitor_altera_merlin_demultiplexer_181_qqjp3iy rsp_demux_007 (
		.clk                (clk_0_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (cpu_nios2_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_009_src_ready),                        //  output,    width = 1,      sink.ready
		.sink_channel       (router_009_src_channel),                      //   input,    width = 9,          .channel
		.sink_data          (router_009_src_data),                         //   input,  width = 107,          .data
		.sink_startofpacket (router_009_src_startofpacket),                //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                  //   input,    width = 1,          .endofpacket
		.sink_valid         (router_009_src_valid),                        //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                    //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                    //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_007_src0_data),                     //  output,  width = 107,          .data
		.src0_channel       (rsp_demux_007_src0_channel),                  //  output,    width = 9,          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),            //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)               //  output,    width = 1,          .endofpacket
	);

	monitor_altera_merlin_demultiplexer_181_qqjp3iy rsp_demux_008 (
		.clk                (clk_0_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (cpu_nios2_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_010_src_ready),                        //  output,    width = 1,      sink.ready
		.sink_channel       (router_010_src_channel),                      //   input,    width = 9,          .channel
		.sink_data          (router_010_src_data),                         //   input,  width = 107,          .data
		.sink_startofpacket (router_010_src_startofpacket),                //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                  //   input,    width = 1,          .endofpacket
		.sink_valid         (router_010_src_valid),                        //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                    //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                    //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_008_src0_data),                     //  output,  width = 107,          .data
		.src0_channel       (rsp_demux_008_src0_channel),                  //  output,    width = 9,          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),            //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)               //  output,    width = 1,          .endofpacket
	);

	monitor_altera_merlin_multiplexer_181_pwas3gq rsp_mux (
		.clk                 (clk_0_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset               (cpu_nios2_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                           //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                           //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                            //  output,  width = 107,          .data
		.src_channel         (rsp_mux_src_channel),                         //  output,    width = 9,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                   //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                     //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                        //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                        //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src0_channel),                      //   input,    width = 9,          .channel
		.sink0_data          (rsp_demux_src0_data),                         //   input,  width = 107,          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                  //   input,    width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                    //  output,    width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                    //   input,    width = 1,          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                  //   input,    width = 9,          .channel
		.sink1_data          (rsp_demux_001_src0_data),                     //   input,  width = 107,          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),            //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),              //   input,    width = 1,          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                    //  output,    width = 1,     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                    //   input,    width = 1,          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                  //   input,    width = 9,          .channel
		.sink2_data          (rsp_demux_002_src0_data),                     //   input,  width = 107,          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),            //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),              //   input,    width = 1,          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                    //  output,    width = 1,     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                    //   input,    width = 1,          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                  //   input,    width = 9,          .channel
		.sink3_data          (rsp_demux_003_src0_data),                     //   input,  width = 107,          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),            //   input,    width = 1,          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),              //   input,    width = 1,          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                    //  output,    width = 1,     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                    //   input,    width = 1,          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),                  //   input,    width = 9,          .channel
		.sink4_data          (rsp_demux_004_src0_data),                     //   input,  width = 107,          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),            //   input,    width = 1,          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket),              //   input,    width = 1,          .endofpacket
		.sink5_ready         (rsp_demux_005_src0_ready),                    //  output,    width = 1,     sink5.ready
		.sink5_valid         (rsp_demux_005_src0_valid),                    //   input,    width = 1,          .valid
		.sink5_channel       (rsp_demux_005_src0_channel),                  //   input,    width = 9,          .channel
		.sink5_data          (rsp_demux_005_src0_data),                     //   input,  width = 107,          .data
		.sink5_startofpacket (rsp_demux_005_src0_startofpacket),            //   input,    width = 1,          .startofpacket
		.sink5_endofpacket   (rsp_demux_005_src0_endofpacket),              //   input,    width = 1,          .endofpacket
		.sink6_ready         (rsp_demux_006_src0_ready),                    //  output,    width = 1,     sink6.ready
		.sink6_valid         (rsp_demux_006_src0_valid),                    //   input,    width = 1,          .valid
		.sink6_channel       (rsp_demux_006_src0_channel),                  //   input,    width = 9,          .channel
		.sink6_data          (rsp_demux_006_src0_data),                     //   input,  width = 107,          .data
		.sink6_startofpacket (rsp_demux_006_src0_startofpacket),            //   input,    width = 1,          .startofpacket
		.sink6_endofpacket   (rsp_demux_006_src0_endofpacket),              //   input,    width = 1,          .endofpacket
		.sink7_ready         (rsp_demux_007_src0_ready),                    //  output,    width = 1,     sink7.ready
		.sink7_valid         (rsp_demux_007_src0_valid),                    //   input,    width = 1,          .valid
		.sink7_channel       (rsp_demux_007_src0_channel),                  //   input,    width = 9,          .channel
		.sink7_data          (rsp_demux_007_src0_data),                     //   input,  width = 107,          .data
		.sink7_startofpacket (rsp_demux_007_src0_startofpacket),            //   input,    width = 1,          .startofpacket
		.sink7_endofpacket   (rsp_demux_007_src0_endofpacket),              //   input,    width = 1,          .endofpacket
		.sink8_ready         (rsp_demux_008_src0_ready),                    //  output,    width = 1,     sink8.ready
		.sink8_valid         (rsp_demux_008_src0_valid),                    //   input,    width = 1,          .valid
		.sink8_channel       (rsp_demux_008_src0_channel),                  //   input,    width = 9,          .channel
		.sink8_data          (rsp_demux_008_src0_data),                     //   input,  width = 107,          .data
		.sink8_startofpacket (rsp_demux_008_src0_startofpacket),            //   input,    width = 1,          .startofpacket
		.sink8_endofpacket   (rsp_demux_008_src0_endofpacket)               //   input,    width = 1,          .endofpacket
	);

	monitor_altera_merlin_multiplexer_181_clwxkgy rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset               (cpu_nios2_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                       //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_001_src_valid),                       //  output,    width = 1,          .valid
		.src_data            (rsp_mux_001_src_data),                        //  output,  width = 107,          .data
		.src_channel         (rsp_mux_001_src_channel),                     //  output,    width = 9,          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),               //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                 //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_002_src1_ready),                    //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_002_src1_valid),                    //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_002_src1_channel),                  //   input,    width = 9,          .channel
		.sink0_data          (rsp_demux_002_src1_data),                     //   input,  width = 107,          .data
		.sink0_startofpacket (rsp_demux_002_src1_startofpacket),            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_002_src1_endofpacket),              //   input,    width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_003_src1_ready),                    //  output,    width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_003_src1_valid),                    //   input,    width = 1,          .valid
		.sink1_channel       (rsp_demux_003_src1_channel),                  //   input,    width = 9,          .channel
		.sink1_data          (rsp_demux_003_src1_data),                     //   input,  width = 107,          .data
		.sink1_startofpacket (rsp_demux_003_src1_startofpacket),            //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_003_src1_endofpacket)               //   input,    width = 1,          .endofpacket
	);

endmodule
