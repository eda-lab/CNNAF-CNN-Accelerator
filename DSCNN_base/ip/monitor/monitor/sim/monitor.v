// monitor.v

// Generated using ACDS version 18.1 222

`timescale 1 ps / 1 ps
module monitor (
		input  wire        clk_clk,               //            clk.clk
		input  wire        reset_reset_n,         //          reset.reset_n
		output wire [1:0]  led_export,            //            led.export
		input  wire [31:0] pio_in_export,         //         pio_in.export
		output wire [31:0] pio_out_export,        //        pio_out.export
		output wire        power_temp_scl_export, // power_temp_scl.export
		inout  wire        power_temp_sda_export  // power_temp_sda.export
	);

	wire         clk_0_clk_clk;                                               // clk_0:clk_out -> [cpu_nios2:clk, cpu_onchip_memory:clk, irq_mapper:clk, jtag_uart_0:clk, led:clk, mm_interconnect_0:clk_0_clk_clk, pio_in:clk, pio_out:clk, power_temp_scl:clk, power_temp_sda:clk, rst_controller:clk, sysid_qsys_0:clock]
	wire  [31:0] cpu_nios2_data_master_readdata;                              // mm_interconnect_0:cpu_nios2_data_master_readdata -> cpu_nios2:d_readdata
	wire         cpu_nios2_data_master_waitrequest;                           // mm_interconnect_0:cpu_nios2_data_master_waitrequest -> cpu_nios2:d_waitrequest
	wire         cpu_nios2_data_master_debugaccess;                           // cpu_nios2:debug_mem_slave_debugaccess_to_roms -> mm_interconnect_0:cpu_nios2_data_master_debugaccess
	wire  [19:0] cpu_nios2_data_master_address;                               // cpu_nios2:d_address -> mm_interconnect_0:cpu_nios2_data_master_address
	wire   [3:0] cpu_nios2_data_master_byteenable;                            // cpu_nios2:d_byteenable -> mm_interconnect_0:cpu_nios2_data_master_byteenable
	wire         cpu_nios2_data_master_read;                                  // cpu_nios2:d_read -> mm_interconnect_0:cpu_nios2_data_master_read
	wire         cpu_nios2_data_master_write;                                 // cpu_nios2:d_write -> mm_interconnect_0:cpu_nios2_data_master_write
	wire  [31:0] cpu_nios2_data_master_writedata;                             // cpu_nios2:d_writedata -> mm_interconnect_0:cpu_nios2_data_master_writedata
	wire  [31:0] cpu_nios2_instruction_master_readdata;                       // mm_interconnect_0:cpu_nios2_instruction_master_readdata -> cpu_nios2:i_readdata
	wire         cpu_nios2_instruction_master_waitrequest;                    // mm_interconnect_0:cpu_nios2_instruction_master_waitrequest -> cpu_nios2:i_waitrequest
	wire  [19:0] cpu_nios2_instruction_master_address;                        // cpu_nios2:i_address -> mm_interconnect_0:cpu_nios2_instruction_master_address
	wire         cpu_nios2_instruction_master_read;                           // cpu_nios2:i_read -> mm_interconnect_0:cpu_nios2_instruction_master_read
	wire         mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_chipselect;  // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_chipselect -> jtag_uart_0:av_chipselect
	wire  [31:0] mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_readdata;    // jtag_uart_0:av_readdata -> mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_readdata
	wire         mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_waitrequest; // jtag_uart_0:av_waitrequest -> mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_waitrequest
	wire   [0:0] mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_address;     // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_address -> jtag_uart_0:av_address
	wire         mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_read;        // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_read -> jtag_uart_0:av_read_n
	wire         mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_write;       // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_write -> jtag_uart_0:av_write_n
	wire  [31:0] mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_writedata;   // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_writedata -> jtag_uart_0:av_writedata
	wire  [31:0] mm_interconnect_0_sysid_qsys_0_control_slave_readdata;       // sysid_qsys_0:readdata -> mm_interconnect_0:sysid_qsys_0_control_slave_readdata
	wire   [0:0] mm_interconnect_0_sysid_qsys_0_control_slave_address;        // mm_interconnect_0:sysid_qsys_0_control_slave_address -> sysid_qsys_0:address
	wire  [31:0] mm_interconnect_0_cpu_nios2_debug_mem_slave_readdata;        // cpu_nios2:debug_mem_slave_readdata -> mm_interconnect_0:cpu_nios2_debug_mem_slave_readdata
	wire         mm_interconnect_0_cpu_nios2_debug_mem_slave_waitrequest;     // cpu_nios2:debug_mem_slave_waitrequest -> mm_interconnect_0:cpu_nios2_debug_mem_slave_waitrequest
	wire         mm_interconnect_0_cpu_nios2_debug_mem_slave_debugaccess;     // mm_interconnect_0:cpu_nios2_debug_mem_slave_debugaccess -> cpu_nios2:debug_mem_slave_debugaccess
	wire   [8:0] mm_interconnect_0_cpu_nios2_debug_mem_slave_address;         // mm_interconnect_0:cpu_nios2_debug_mem_slave_address -> cpu_nios2:debug_mem_slave_address
	wire         mm_interconnect_0_cpu_nios2_debug_mem_slave_read;            // mm_interconnect_0:cpu_nios2_debug_mem_slave_read -> cpu_nios2:debug_mem_slave_read
	wire   [3:0] mm_interconnect_0_cpu_nios2_debug_mem_slave_byteenable;      // mm_interconnect_0:cpu_nios2_debug_mem_slave_byteenable -> cpu_nios2:debug_mem_slave_byteenable
	wire         mm_interconnect_0_cpu_nios2_debug_mem_slave_write;           // mm_interconnect_0:cpu_nios2_debug_mem_slave_write -> cpu_nios2:debug_mem_slave_write
	wire  [31:0] mm_interconnect_0_cpu_nios2_debug_mem_slave_writedata;       // mm_interconnect_0:cpu_nios2_debug_mem_slave_writedata -> cpu_nios2:debug_mem_slave_writedata
	wire         mm_interconnect_0_cpu_onchip_memory_s1_chipselect;           // mm_interconnect_0:cpu_onchip_memory_s1_chipselect -> cpu_onchip_memory:chipselect
	wire  [31:0] mm_interconnect_0_cpu_onchip_memory_s1_readdata;             // cpu_onchip_memory:readdata -> mm_interconnect_0:cpu_onchip_memory_s1_readdata
	wire  [13:0] mm_interconnect_0_cpu_onchip_memory_s1_address;              // mm_interconnect_0:cpu_onchip_memory_s1_address -> cpu_onchip_memory:address
	wire   [3:0] mm_interconnect_0_cpu_onchip_memory_s1_byteenable;           // mm_interconnect_0:cpu_onchip_memory_s1_byteenable -> cpu_onchip_memory:byteenable
	wire         mm_interconnect_0_cpu_onchip_memory_s1_write;                // mm_interconnect_0:cpu_onchip_memory_s1_write -> cpu_onchip_memory:write
	wire  [31:0] mm_interconnect_0_cpu_onchip_memory_s1_writedata;            // mm_interconnect_0:cpu_onchip_memory_s1_writedata -> cpu_onchip_memory:writedata
	wire         mm_interconnect_0_cpu_onchip_memory_s1_clken;                // mm_interconnect_0:cpu_onchip_memory_s1_clken -> cpu_onchip_memory:clken
	wire         mm_interconnect_0_led_s1_chipselect;                         // mm_interconnect_0:led_s1_chipselect -> led:chipselect
	wire  [31:0] mm_interconnect_0_led_s1_readdata;                           // led:readdata -> mm_interconnect_0:led_s1_readdata
	wire   [1:0] mm_interconnect_0_led_s1_address;                            // mm_interconnect_0:led_s1_address -> led:address
	wire         mm_interconnect_0_led_s1_write;                              // mm_interconnect_0:led_s1_write -> led:write_n
	wire  [31:0] mm_interconnect_0_led_s1_writedata;                          // mm_interconnect_0:led_s1_writedata -> led:writedata
	wire  [31:0] mm_interconnect_0_pio_in_s1_readdata;                        // pio_in:readdata -> mm_interconnect_0:pio_in_s1_readdata
	wire   [1:0] mm_interconnect_0_pio_in_s1_address;                         // mm_interconnect_0:pio_in_s1_address -> pio_in:address
	wire         mm_interconnect_0_pio_out_s1_chipselect;                     // mm_interconnect_0:pio_out_s1_chipselect -> pio_out:chipselect
	wire  [31:0] mm_interconnect_0_pio_out_s1_readdata;                       // pio_out:readdata -> mm_interconnect_0:pio_out_s1_readdata
	wire   [1:0] mm_interconnect_0_pio_out_s1_address;                        // mm_interconnect_0:pio_out_s1_address -> pio_out:address
	wire         mm_interconnect_0_pio_out_s1_write;                          // mm_interconnect_0:pio_out_s1_write -> pio_out:write_n
	wire  [31:0] mm_interconnect_0_pio_out_s1_writedata;                      // mm_interconnect_0:pio_out_s1_writedata -> pio_out:writedata
	wire         mm_interconnect_0_power_temp_scl_s1_chipselect;              // mm_interconnect_0:power_temp_scl_s1_chipselect -> power_temp_scl:chipselect
	wire  [31:0] mm_interconnect_0_power_temp_scl_s1_readdata;                // power_temp_scl:readdata -> mm_interconnect_0:power_temp_scl_s1_readdata
	wire   [1:0] mm_interconnect_0_power_temp_scl_s1_address;                 // mm_interconnect_0:power_temp_scl_s1_address -> power_temp_scl:address
	wire         mm_interconnect_0_power_temp_scl_s1_write;                   // mm_interconnect_0:power_temp_scl_s1_write -> power_temp_scl:write_n
	wire  [31:0] mm_interconnect_0_power_temp_scl_s1_writedata;               // mm_interconnect_0:power_temp_scl_s1_writedata -> power_temp_scl:writedata
	wire         mm_interconnect_0_power_temp_sda_s1_chipselect;              // mm_interconnect_0:power_temp_sda_s1_chipselect -> power_temp_sda:chipselect
	wire  [31:0] mm_interconnect_0_power_temp_sda_s1_readdata;                // power_temp_sda:readdata -> mm_interconnect_0:power_temp_sda_s1_readdata
	wire   [1:0] mm_interconnect_0_power_temp_sda_s1_address;                 // mm_interconnect_0:power_temp_sda_s1_address -> power_temp_sda:address
	wire         mm_interconnect_0_power_temp_sda_s1_write;                   // mm_interconnect_0:power_temp_sda_s1_write -> power_temp_sda:write_n
	wire  [31:0] mm_interconnect_0_power_temp_sda_s1_writedata;               // mm_interconnect_0:power_temp_sda_s1_writedata -> power_temp_sda:writedata
	wire         irq_mapper_receiver0_irq;                                    // jtag_uart_0:av_irq -> irq_mapper:receiver0_irq
	wire  [31:0] cpu_nios2_irq_irq;                                           // irq_mapper:sender_irq -> cpu_nios2:irq
	wire         rst_controller_reset_out_reset;                              // rst_controller:reset_out -> [cpu_nios2:reset_n, cpu_onchip_memory:reset, irq_mapper:reset, jtag_uart_0:rst_n, led:reset_n, mm_interconnect_0:cpu_nios2_reset_reset_bridge_in_reset_reset, pio_in:reset_n, pio_out:reset_n, power_temp_scl:reset_n, power_temp_sda:reset_n, rst_translator:in_reset, sysid_qsys_0:reset_n]
	wire         rst_controller_reset_out_reset_req;                          // rst_controller:reset_req -> [cpu_nios2:reset_req, cpu_onchip_memory:reset_req, rst_translator:reset_req_in]
	wire         clk_0_clk_reset_reset;                                       // clk_0:reset_n_out -> rst_controller:reset_in0

	monitor_clk_0 clk_0 (
		.clk_out     (clk_0_clk_clk),         //  output,  width = 1,          clk.clk
		.in_clk      (clk_clk),               //   input,  width = 1,       clk_in.clk
		.reset_n     (reset_reset_n),         //   input,  width = 1, clk_in_reset.reset_n
		.reset_n_out (clk_0_clk_reset_reset)  //  output,  width = 1,    clk_reset.reset_n
	);

	monitor_cpu_nios2 cpu_nios2 (
		.clk                                 (clk_0_clk_clk),                                           //   input,   width = 1,                       clk.clk
		.dummy_ci_port                       (),                                                        //  output,   width = 1, custom_instruction_master.readra
		.d_address                           (cpu_nios2_data_master_address),                           //  output,  width = 20,               data_master.address
		.d_byteenable                        (cpu_nios2_data_master_byteenable),                        //  output,   width = 4,                          .byteenable
		.d_read                              (cpu_nios2_data_master_read),                              //  output,   width = 1,                          .read
		.d_readdata                          (cpu_nios2_data_master_readdata),                          //   input,  width = 32,                          .readdata
		.d_waitrequest                       (cpu_nios2_data_master_waitrequest),                       //   input,   width = 1,                          .waitrequest
		.d_write                             (cpu_nios2_data_master_write),                             //  output,   width = 1,                          .write
		.d_writedata                         (cpu_nios2_data_master_writedata),                         //  output,  width = 32,                          .writedata
		.debug_mem_slave_debugaccess_to_roms (cpu_nios2_data_master_debugaccess),                       //  output,   width = 1,                          .debugaccess
		.debug_mem_slave_address             (mm_interconnect_0_cpu_nios2_debug_mem_slave_address),     //   input,   width = 9,           debug_mem_slave.address
		.debug_mem_slave_byteenable          (mm_interconnect_0_cpu_nios2_debug_mem_slave_byteenable),  //   input,   width = 4,                          .byteenable
		.debug_mem_slave_debugaccess         (mm_interconnect_0_cpu_nios2_debug_mem_slave_debugaccess), //   input,   width = 1,                          .debugaccess
		.debug_mem_slave_read                (mm_interconnect_0_cpu_nios2_debug_mem_slave_read),        //   input,   width = 1,                          .read
		.debug_mem_slave_readdata            (mm_interconnect_0_cpu_nios2_debug_mem_slave_readdata),    //  output,  width = 32,                          .readdata
		.debug_mem_slave_waitrequest         (mm_interconnect_0_cpu_nios2_debug_mem_slave_waitrequest), //  output,   width = 1,                          .waitrequest
		.debug_mem_slave_write               (mm_interconnect_0_cpu_nios2_debug_mem_slave_write),       //   input,   width = 1,                          .write
		.debug_mem_slave_writedata           (mm_interconnect_0_cpu_nios2_debug_mem_slave_writedata),   //   input,  width = 32,                          .writedata
		.debug_reset_request                 (),                                                        //  output,   width = 1,       debug_reset_request.reset
		.i_address                           (cpu_nios2_instruction_master_address),                    //  output,  width = 20,        instruction_master.address
		.i_read                              (cpu_nios2_instruction_master_read),                       //  output,   width = 1,                          .read
		.i_readdata                          (cpu_nios2_instruction_master_readdata),                   //   input,  width = 32,                          .readdata
		.i_waitrequest                       (cpu_nios2_instruction_master_waitrequest),                //   input,   width = 1,                          .waitrequest
		.irq                                 (cpu_nios2_irq_irq),                                       //   input,  width = 32,                       irq.irq
		.reset_n                             (~rst_controller_reset_out_reset),                         //   input,   width = 1,                     reset.reset_n
		.reset_req                           (rst_controller_reset_out_reset_req)                       //   input,   width = 1,                          .reset_req
	);

	monitor_cpu_onchip_memory cpu_onchip_memory (
		.clk        (clk_0_clk_clk),                                     //   input,   width = 1,   clk1.clk
		.reset      (rst_controller_reset_out_reset),                    //   input,   width = 1, reset1.reset
		.reset_req  (rst_controller_reset_out_reset_req),                //   input,   width = 1,       .reset_req
		.address    (mm_interconnect_0_cpu_onchip_memory_s1_address),    //   input,  width = 14,     s1.address
		.clken      (mm_interconnect_0_cpu_onchip_memory_s1_clken),      //   input,   width = 1,       .clken
		.chipselect (mm_interconnect_0_cpu_onchip_memory_s1_chipselect), //   input,   width = 1,       .chipselect
		.write      (mm_interconnect_0_cpu_onchip_memory_s1_write),      //   input,   width = 1,       .write
		.readdata   (mm_interconnect_0_cpu_onchip_memory_s1_readdata),   //  output,  width = 32,       .readdata
		.writedata  (mm_interconnect_0_cpu_onchip_memory_s1_writedata),  //   input,  width = 32,       .writedata
		.byteenable (mm_interconnect_0_cpu_onchip_memory_s1_byteenable)  //   input,   width = 4,       .byteenable
	);

	monitor_jtag_uart_0 jtag_uart_0 (
		.av_chipselect  (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_chipselect),  //   input,   width = 1, avalon_jtag_slave.chipselect
		.av_address     (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_address),     //   input,   width = 1,                  .address
		.av_read_n      (~mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_read),       //   input,   width = 1,                  .read_n
		.av_readdata    (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_readdata),    //  output,  width = 32,                  .readdata
		.av_write_n     (~mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_write),      //   input,   width = 1,                  .write_n
		.av_writedata   (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_writedata),   //   input,  width = 32,                  .writedata
		.av_waitrequest (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_waitrequest), //  output,   width = 1,                  .waitrequest
		.clk            (clk_0_clk_clk),                                               //   input,   width = 1,               clk.clk
		.av_irq         (irq_mapper_receiver0_irq),                                    //  output,   width = 1,               irq.irq
		.rst_n          (~rst_controller_reset_out_reset)                              //   input,   width = 1,             reset.reset_n
	);

	monitor_led led (
		.clk        (clk_0_clk_clk),                       //   input,   width = 1,                 clk.clk
		.out_port   (led_export),                          //  output,   width = 2, external_connection.export
		.reset_n    (~rst_controller_reset_out_reset),     //   input,   width = 1,               reset.reset_n
		.address    (mm_interconnect_0_led_s1_address),    //   input,   width = 2,                  s1.address
		.write_n    (~mm_interconnect_0_led_s1_write),     //   input,   width = 1,                    .write_n
		.writedata  (mm_interconnect_0_led_s1_writedata),  //   input,  width = 32,                    .writedata
		.chipselect (mm_interconnect_0_led_s1_chipselect), //   input,   width = 1,                    .chipselect
		.readdata   (mm_interconnect_0_led_s1_readdata)    //  output,  width = 32,                    .readdata
	);

	monitor_pio_in pio_in (
		.clk      (clk_0_clk_clk),                        //   input,   width = 1,                 clk.clk
		.in_port  (pio_in_export),                        //   input,  width = 32, external_connection.export
		.reset_n  (~rst_controller_reset_out_reset),      //   input,   width = 1,               reset.reset_n
		.address  (mm_interconnect_0_pio_in_s1_address),  //   input,   width = 2,                  s1.address
		.readdata (mm_interconnect_0_pio_in_s1_readdata)  //  output,  width = 32,                    .readdata
	);

	monitor_pio_out pio_out (
		.clk        (clk_0_clk_clk),                           //   input,   width = 1,                 clk.clk
		.out_port   (pio_out_export),                          //  output,  width = 32, external_connection.export
		.reset_n    (~rst_controller_reset_out_reset),         //   input,   width = 1,               reset.reset_n
		.address    (mm_interconnect_0_pio_out_s1_address),    //   input,   width = 2,                  s1.address
		.write_n    (~mm_interconnect_0_pio_out_s1_write),     //   input,   width = 1,                    .write_n
		.writedata  (mm_interconnect_0_pio_out_s1_writedata),  //   input,  width = 32,                    .writedata
		.chipselect (mm_interconnect_0_pio_out_s1_chipselect), //   input,   width = 1,                    .chipselect
		.readdata   (mm_interconnect_0_pio_out_s1_readdata)    //  output,  width = 32,                    .readdata
	);

	monitor_power_temp_scl power_temp_scl (
		.clk        (clk_0_clk_clk),                                  //   input,   width = 1,                 clk.clk
		.out_port   (power_temp_scl_export),                          //  output,   width = 1, external_connection.export
		.reset_n    (~rst_controller_reset_out_reset),                //   input,   width = 1,               reset.reset_n
		.address    (mm_interconnect_0_power_temp_scl_s1_address),    //   input,   width = 2,                  s1.address
		.write_n    (~mm_interconnect_0_power_temp_scl_s1_write),     //   input,   width = 1,                    .write_n
		.writedata  (mm_interconnect_0_power_temp_scl_s1_writedata),  //   input,  width = 32,                    .writedata
		.chipselect (mm_interconnect_0_power_temp_scl_s1_chipselect), //   input,   width = 1,                    .chipselect
		.readdata   (mm_interconnect_0_power_temp_scl_s1_readdata)    //  output,  width = 32,                    .readdata
	);

	monitor_power_temp_sda power_temp_sda (
		.clk        (clk_0_clk_clk),                                  //   input,   width = 1,                 clk.clk
		.bidir_port (power_temp_sda_export),                          //   inout,   width = 1, external_connection.export
		.reset_n    (~rst_controller_reset_out_reset),                //   input,   width = 1,               reset.reset_n
		.address    (mm_interconnect_0_power_temp_sda_s1_address),    //   input,   width = 2,                  s1.address
		.write_n    (~mm_interconnect_0_power_temp_sda_s1_write),     //   input,   width = 1,                    .write_n
		.writedata  (mm_interconnect_0_power_temp_sda_s1_writedata),  //   input,  width = 32,                    .writedata
		.chipselect (mm_interconnect_0_power_temp_sda_s1_chipselect), //   input,   width = 1,                    .chipselect
		.readdata   (mm_interconnect_0_power_temp_sda_s1_readdata)    //  output,  width = 32,                    .readdata
	);

	monitor_sysid_qsys_0 sysid_qsys_0 (
		.clock    (clk_0_clk_clk),                                         //   input,   width = 1,           clk.clk
		.readdata (mm_interconnect_0_sysid_qsys_0_control_slave_readdata), //  output,  width = 32, control_slave.readdata
		.address  (mm_interconnect_0_sysid_qsys_0_control_slave_address),  //   input,   width = 1,              .address
		.reset_n  (~rst_controller_reset_out_reset)                        //   input,   width = 1,         reset.reset_n
	);

	monitor_altera_mm_interconnect_181_qntooey mm_interconnect_0 (
		.cpu_nios2_data_master_address               (cpu_nios2_data_master_address),                               //   input,  width = 20,                 cpu_nios2_data_master.address
		.cpu_nios2_data_master_waitrequest           (cpu_nios2_data_master_waitrequest),                           //  output,   width = 1,                                      .waitrequest
		.cpu_nios2_data_master_byteenable            (cpu_nios2_data_master_byteenable),                            //   input,   width = 4,                                      .byteenable
		.cpu_nios2_data_master_read                  (cpu_nios2_data_master_read),                                  //   input,   width = 1,                                      .read
		.cpu_nios2_data_master_readdata              (cpu_nios2_data_master_readdata),                              //  output,  width = 32,                                      .readdata
		.cpu_nios2_data_master_write                 (cpu_nios2_data_master_write),                                 //   input,   width = 1,                                      .write
		.cpu_nios2_data_master_writedata             (cpu_nios2_data_master_writedata),                             //   input,  width = 32,                                      .writedata
		.cpu_nios2_data_master_debugaccess           (cpu_nios2_data_master_debugaccess),                           //   input,   width = 1,                                      .debugaccess
		.cpu_nios2_instruction_master_address        (cpu_nios2_instruction_master_address),                        //   input,  width = 20,          cpu_nios2_instruction_master.address
		.cpu_nios2_instruction_master_waitrequest    (cpu_nios2_instruction_master_waitrequest),                    //  output,   width = 1,                                      .waitrequest
		.cpu_nios2_instruction_master_read           (cpu_nios2_instruction_master_read),                           //   input,   width = 1,                                      .read
		.cpu_nios2_instruction_master_readdata       (cpu_nios2_instruction_master_readdata),                       //  output,  width = 32,                                      .readdata
		.jtag_uart_0_avalon_jtag_slave_address       (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_address),     //  output,   width = 1,         jtag_uart_0_avalon_jtag_slave.address
		.jtag_uart_0_avalon_jtag_slave_write         (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_write),       //  output,   width = 1,                                      .write
		.jtag_uart_0_avalon_jtag_slave_read          (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_read),        //  output,   width = 1,                                      .read
		.jtag_uart_0_avalon_jtag_slave_readdata      (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_readdata),    //   input,  width = 32,                                      .readdata
		.jtag_uart_0_avalon_jtag_slave_writedata     (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_writedata),   //  output,  width = 32,                                      .writedata
		.jtag_uart_0_avalon_jtag_slave_waitrequest   (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_waitrequest), //   input,   width = 1,                                      .waitrequest
		.jtag_uart_0_avalon_jtag_slave_chipselect    (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_chipselect),  //  output,   width = 1,                                      .chipselect
		.sysid_qsys_0_control_slave_address          (mm_interconnect_0_sysid_qsys_0_control_slave_address),        //  output,   width = 1,            sysid_qsys_0_control_slave.address
		.sysid_qsys_0_control_slave_readdata         (mm_interconnect_0_sysid_qsys_0_control_slave_readdata),       //   input,  width = 32,                                      .readdata
		.cpu_nios2_debug_mem_slave_address           (mm_interconnect_0_cpu_nios2_debug_mem_slave_address),         //  output,   width = 9,             cpu_nios2_debug_mem_slave.address
		.cpu_nios2_debug_mem_slave_write             (mm_interconnect_0_cpu_nios2_debug_mem_slave_write),           //  output,   width = 1,                                      .write
		.cpu_nios2_debug_mem_slave_read              (mm_interconnect_0_cpu_nios2_debug_mem_slave_read),            //  output,   width = 1,                                      .read
		.cpu_nios2_debug_mem_slave_readdata          (mm_interconnect_0_cpu_nios2_debug_mem_slave_readdata),        //   input,  width = 32,                                      .readdata
		.cpu_nios2_debug_mem_slave_writedata         (mm_interconnect_0_cpu_nios2_debug_mem_slave_writedata),       //  output,  width = 32,                                      .writedata
		.cpu_nios2_debug_mem_slave_byteenable        (mm_interconnect_0_cpu_nios2_debug_mem_slave_byteenable),      //  output,   width = 4,                                      .byteenable
		.cpu_nios2_debug_mem_slave_waitrequest       (mm_interconnect_0_cpu_nios2_debug_mem_slave_waitrequest),     //   input,   width = 1,                                      .waitrequest
		.cpu_nios2_debug_mem_slave_debugaccess       (mm_interconnect_0_cpu_nios2_debug_mem_slave_debugaccess),     //  output,   width = 1,                                      .debugaccess
		.cpu_onchip_memory_s1_address                (mm_interconnect_0_cpu_onchip_memory_s1_address),              //  output,  width = 14,                  cpu_onchip_memory_s1.address
		.cpu_onchip_memory_s1_write                  (mm_interconnect_0_cpu_onchip_memory_s1_write),                //  output,   width = 1,                                      .write
		.cpu_onchip_memory_s1_readdata               (mm_interconnect_0_cpu_onchip_memory_s1_readdata),             //   input,  width = 32,                                      .readdata
		.cpu_onchip_memory_s1_writedata              (mm_interconnect_0_cpu_onchip_memory_s1_writedata),            //  output,  width = 32,                                      .writedata
		.cpu_onchip_memory_s1_byteenable             (mm_interconnect_0_cpu_onchip_memory_s1_byteenable),           //  output,   width = 4,                                      .byteenable
		.cpu_onchip_memory_s1_chipselect             (mm_interconnect_0_cpu_onchip_memory_s1_chipselect),           //  output,   width = 1,                                      .chipselect
		.cpu_onchip_memory_s1_clken                  (mm_interconnect_0_cpu_onchip_memory_s1_clken),                //  output,   width = 1,                                      .clken
		.led_s1_address                              (mm_interconnect_0_led_s1_address),                            //  output,   width = 2,                                led_s1.address
		.led_s1_write                                (mm_interconnect_0_led_s1_write),                              //  output,   width = 1,                                      .write
		.led_s1_readdata                             (mm_interconnect_0_led_s1_readdata),                           //   input,  width = 32,                                      .readdata
		.led_s1_writedata                            (mm_interconnect_0_led_s1_writedata),                          //  output,  width = 32,                                      .writedata
		.led_s1_chipselect                           (mm_interconnect_0_led_s1_chipselect),                         //  output,   width = 1,                                      .chipselect
		.pio_in_s1_address                           (mm_interconnect_0_pio_in_s1_address),                         //  output,   width = 2,                             pio_in_s1.address
		.pio_in_s1_readdata                          (mm_interconnect_0_pio_in_s1_readdata),                        //   input,  width = 32,                                      .readdata
		.pio_out_s1_address                          (mm_interconnect_0_pio_out_s1_address),                        //  output,   width = 2,                            pio_out_s1.address
		.pio_out_s1_write                            (mm_interconnect_0_pio_out_s1_write),                          //  output,   width = 1,                                      .write
		.pio_out_s1_readdata                         (mm_interconnect_0_pio_out_s1_readdata),                       //   input,  width = 32,                                      .readdata
		.pio_out_s1_writedata                        (mm_interconnect_0_pio_out_s1_writedata),                      //  output,  width = 32,                                      .writedata
		.pio_out_s1_chipselect                       (mm_interconnect_0_pio_out_s1_chipselect),                     //  output,   width = 1,                                      .chipselect
		.power_temp_scl_s1_address                   (mm_interconnect_0_power_temp_scl_s1_address),                 //  output,   width = 2,                     power_temp_scl_s1.address
		.power_temp_scl_s1_write                     (mm_interconnect_0_power_temp_scl_s1_write),                   //  output,   width = 1,                                      .write
		.power_temp_scl_s1_readdata                  (mm_interconnect_0_power_temp_scl_s1_readdata),                //   input,  width = 32,                                      .readdata
		.power_temp_scl_s1_writedata                 (mm_interconnect_0_power_temp_scl_s1_writedata),               //  output,  width = 32,                                      .writedata
		.power_temp_scl_s1_chipselect                (mm_interconnect_0_power_temp_scl_s1_chipselect),              //  output,   width = 1,                                      .chipselect
		.power_temp_sda_s1_address                   (mm_interconnect_0_power_temp_sda_s1_address),                 //  output,   width = 2,                     power_temp_sda_s1.address
		.power_temp_sda_s1_write                     (mm_interconnect_0_power_temp_sda_s1_write),                   //  output,   width = 1,                                      .write
		.power_temp_sda_s1_readdata                  (mm_interconnect_0_power_temp_sda_s1_readdata),                //   input,  width = 32,                                      .readdata
		.power_temp_sda_s1_writedata                 (mm_interconnect_0_power_temp_sda_s1_writedata),               //  output,  width = 32,                                      .writedata
		.power_temp_sda_s1_chipselect                (mm_interconnect_0_power_temp_sda_s1_chipselect),              //  output,   width = 1,                                      .chipselect
		.cpu_nios2_reset_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),                              //   input,   width = 1, cpu_nios2_reset_reset_bridge_in_reset.reset
		.clk_0_clk_clk                               (clk_0_clk_clk)                                                //   input,   width = 1,                             clk_0_clk.clk
	);

	monitor_altera_irq_mapper_181_ayrpisy irq_mapper (
		.clk           (clk_0_clk_clk),                  //   input,   width = 1,       clk.clk
		.reset         (rst_controller_reset_out_reset), //   input,   width = 1, clk_reset.reset
		.receiver0_irq (irq_mapper_receiver0_irq),       //   input,   width = 1, receiver0.irq
		.sender_irq    (cpu_nios2_irq_irq)               //  output,  width = 32,    sender.irq
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~clk_0_clk_reset_reset),             //   input,  width = 1, reset_in0.reset
		.clk            (clk_0_clk_clk),                      //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_reset_out_reset),     //  output,  width = 1, reset_out.reset
		.reset_req      (rst_controller_reset_out_reset_req), //  output,  width = 1,          .reset_req
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_in1      (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

endmodule
