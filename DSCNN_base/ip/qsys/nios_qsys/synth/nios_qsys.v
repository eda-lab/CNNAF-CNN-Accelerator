// nios_qsys.v

// Generated using ACDS version 18.1 222

`timescale 1 ps / 1 ps
module nios_qsys (
		input  wire [31:0] calc_data_export,       //       calc_data.export
		input  wire        calc_finish_export,     //     calc_finish.export
		input  wire [31:0] calc_fps_export,        //        calc_fps.export
		input  wire [31:0] calc_unit_total_export, // calc_unit_total.export
		input  wire [31:0] calc_unit_used_export,  //  calc_unit_used.export
		input  wire        clk_clk,                //             clk.clk
		output wire [31:0] data_addr_export,       //       data_addr.export
		output wire        power_temp_scl_export,  //  power_temp_scl.export
		inout  wire        power_temp_sda_export,  //  power_temp_sda.export
		input  wire        reset_reset,            //           reset.reset
		input  wire [31:0] unused_ddrvld_export,   //   unused_ddrvld.export
		input  wire [31:0] used_ddrvld_export,     //     used_ddrvld.export
		input  wire [31:0] wr_ddrvld_export        //       wr_ddrvld.export
	);

	wire         clock_in_out_clk_clk;                                 // clock_in:out_clk -> [calc_data:clk, calc_finish:clk, calc_fps:clk, calc_unit_total:clk, calc_unit_used:clk, data_addr:clk, irq_mapper:clk, jtag:clk, mm_interconnect_0:clock_in_out_clk_clk, nios2:clk, onchip_ram:clk, power_temp_scl:clk, power_temp_sda:clk, reset_in:clk, rst_controller:clk, sysid:clock, timer:clk, unused_ddrvld:clk, used_ddrvld:clk, wr_ddrvld:clk]
	wire  [31:0] nios2_data_master_readdata;                           // mm_interconnect_0:nios2_data_master_readdata -> nios2:d_readdata
	wire         nios2_data_master_waitrequest;                        // mm_interconnect_0:nios2_data_master_waitrequest -> nios2:d_waitrequest
	wire         nios2_data_master_debugaccess;                        // nios2:debug_mem_slave_debugaccess_to_roms -> mm_interconnect_0:nios2_data_master_debugaccess
	wire  [16:0] nios2_data_master_address;                            // nios2:d_address -> mm_interconnect_0:nios2_data_master_address
	wire   [3:0] nios2_data_master_byteenable;                         // nios2:d_byteenable -> mm_interconnect_0:nios2_data_master_byteenable
	wire         nios2_data_master_read;                               // nios2:d_read -> mm_interconnect_0:nios2_data_master_read
	wire         nios2_data_master_readdatavalid;                      // mm_interconnect_0:nios2_data_master_readdatavalid -> nios2:d_readdatavalid
	wire         nios2_data_master_write;                              // nios2:d_write -> mm_interconnect_0:nios2_data_master_write
	wire  [31:0] nios2_data_master_writedata;                          // nios2:d_writedata -> mm_interconnect_0:nios2_data_master_writedata
	wire  [31:0] nios2_instruction_master_readdata;                    // mm_interconnect_0:nios2_instruction_master_readdata -> nios2:i_readdata
	wire         nios2_instruction_master_waitrequest;                 // mm_interconnect_0:nios2_instruction_master_waitrequest -> nios2:i_waitrequest
	wire  [16:0] nios2_instruction_master_address;                     // nios2:i_address -> mm_interconnect_0:nios2_instruction_master_address
	wire         nios2_instruction_master_read;                        // nios2:i_read -> mm_interconnect_0:nios2_instruction_master_read
	wire         nios2_instruction_master_readdatavalid;               // mm_interconnect_0:nios2_instruction_master_readdatavalid -> nios2:i_readdatavalid
	wire         mm_interconnect_0_jtag_avalon_jtag_slave_chipselect;  // mm_interconnect_0:jtag_avalon_jtag_slave_chipselect -> jtag:av_chipselect
	wire  [31:0] mm_interconnect_0_jtag_avalon_jtag_slave_readdata;    // jtag:av_readdata -> mm_interconnect_0:jtag_avalon_jtag_slave_readdata
	wire         mm_interconnect_0_jtag_avalon_jtag_slave_waitrequest; // jtag:av_waitrequest -> mm_interconnect_0:jtag_avalon_jtag_slave_waitrequest
	wire   [0:0] mm_interconnect_0_jtag_avalon_jtag_slave_address;     // mm_interconnect_0:jtag_avalon_jtag_slave_address -> jtag:av_address
	wire         mm_interconnect_0_jtag_avalon_jtag_slave_read;        // mm_interconnect_0:jtag_avalon_jtag_slave_read -> jtag:av_read_n
	wire         mm_interconnect_0_jtag_avalon_jtag_slave_write;       // mm_interconnect_0:jtag_avalon_jtag_slave_write -> jtag:av_write_n
	wire  [31:0] mm_interconnect_0_jtag_avalon_jtag_slave_writedata;   // mm_interconnect_0:jtag_avalon_jtag_slave_writedata -> jtag:av_writedata
	wire  [31:0] mm_interconnect_0_sysid_control_slave_readdata;       // sysid:readdata -> mm_interconnect_0:sysid_control_slave_readdata
	wire   [0:0] mm_interconnect_0_sysid_control_slave_address;        // mm_interconnect_0:sysid_control_slave_address -> sysid:address
	wire  [31:0] mm_interconnect_0_nios2_debug_mem_slave_readdata;     // nios2:debug_mem_slave_readdata -> mm_interconnect_0:nios2_debug_mem_slave_readdata
	wire         mm_interconnect_0_nios2_debug_mem_slave_waitrequest;  // nios2:debug_mem_slave_waitrequest -> mm_interconnect_0:nios2_debug_mem_slave_waitrequest
	wire         mm_interconnect_0_nios2_debug_mem_slave_debugaccess;  // mm_interconnect_0:nios2_debug_mem_slave_debugaccess -> nios2:debug_mem_slave_debugaccess
	wire   [8:0] mm_interconnect_0_nios2_debug_mem_slave_address;      // mm_interconnect_0:nios2_debug_mem_slave_address -> nios2:debug_mem_slave_address
	wire         mm_interconnect_0_nios2_debug_mem_slave_read;         // mm_interconnect_0:nios2_debug_mem_slave_read -> nios2:debug_mem_slave_read
	wire   [3:0] mm_interconnect_0_nios2_debug_mem_slave_byteenable;   // mm_interconnect_0:nios2_debug_mem_slave_byteenable -> nios2:debug_mem_slave_byteenable
	wire         mm_interconnect_0_nios2_debug_mem_slave_write;        // mm_interconnect_0:nios2_debug_mem_slave_write -> nios2:debug_mem_slave_write
	wire  [31:0] mm_interconnect_0_nios2_debug_mem_slave_writedata;    // mm_interconnect_0:nios2_debug_mem_slave_writedata -> nios2:debug_mem_slave_writedata
	wire         mm_interconnect_0_onchip_ram_s1_chipselect;           // mm_interconnect_0:onchip_ram_s1_chipselect -> onchip_ram:chipselect
	wire  [31:0] mm_interconnect_0_onchip_ram_s1_readdata;             // onchip_ram:readdata -> mm_interconnect_0:onchip_ram_s1_readdata
	wire  [13:0] mm_interconnect_0_onchip_ram_s1_address;              // mm_interconnect_0:onchip_ram_s1_address -> onchip_ram:address
	wire   [3:0] mm_interconnect_0_onchip_ram_s1_byteenable;           // mm_interconnect_0:onchip_ram_s1_byteenable -> onchip_ram:byteenable
	wire         mm_interconnect_0_onchip_ram_s1_write;                // mm_interconnect_0:onchip_ram_s1_write -> onchip_ram:write
	wire  [31:0] mm_interconnect_0_onchip_ram_s1_writedata;            // mm_interconnect_0:onchip_ram_s1_writedata -> onchip_ram:writedata
	wire         mm_interconnect_0_onchip_ram_s1_clken;                // mm_interconnect_0:onchip_ram_s1_clken -> onchip_ram:clken
	wire  [31:0] mm_interconnect_0_calc_data_s1_readdata;              // calc_data:readdata -> mm_interconnect_0:calc_data_s1_readdata
	wire   [1:0] mm_interconnect_0_calc_data_s1_address;               // mm_interconnect_0:calc_data_s1_address -> calc_data:address
	wire         mm_interconnect_0_calc_finish_s1_chipselect;          // mm_interconnect_0:calc_finish_s1_chipselect -> calc_finish:chipselect
	wire  [31:0] mm_interconnect_0_calc_finish_s1_readdata;            // calc_finish:readdata -> mm_interconnect_0:calc_finish_s1_readdata
	wire   [1:0] mm_interconnect_0_calc_finish_s1_address;             // mm_interconnect_0:calc_finish_s1_address -> calc_finish:address
	wire         mm_interconnect_0_calc_finish_s1_write;               // mm_interconnect_0:calc_finish_s1_write -> calc_finish:write_n
	wire  [31:0] mm_interconnect_0_calc_finish_s1_writedata;           // mm_interconnect_0:calc_finish_s1_writedata -> calc_finish:writedata
	wire         mm_interconnect_0_data_addr_s1_chipselect;            // mm_interconnect_0:data_addr_s1_chipselect -> data_addr:chipselect
	wire  [31:0] mm_interconnect_0_data_addr_s1_readdata;              // data_addr:readdata -> mm_interconnect_0:data_addr_s1_readdata
	wire   [1:0] mm_interconnect_0_data_addr_s1_address;               // mm_interconnect_0:data_addr_s1_address -> data_addr:address
	wire         mm_interconnect_0_data_addr_s1_write;                 // mm_interconnect_0:data_addr_s1_write -> data_addr:write_n
	wire  [31:0] mm_interconnect_0_data_addr_s1_writedata;             // mm_interconnect_0:data_addr_s1_writedata -> data_addr:writedata
	wire  [31:0] mm_interconnect_0_calc_fps_s1_readdata;               // calc_fps:readdata -> mm_interconnect_0:calc_fps_s1_readdata
	wire   [1:0] mm_interconnect_0_calc_fps_s1_address;                // mm_interconnect_0:calc_fps_s1_address -> calc_fps:address
	wire         mm_interconnect_0_timer_s1_chipselect;                // mm_interconnect_0:timer_s1_chipselect -> timer:chipselect
	wire  [15:0] mm_interconnect_0_timer_s1_readdata;                  // timer:readdata -> mm_interconnect_0:timer_s1_readdata
	wire   [2:0] mm_interconnect_0_timer_s1_address;                   // mm_interconnect_0:timer_s1_address -> timer:address
	wire         mm_interconnect_0_timer_s1_write;                     // mm_interconnect_0:timer_s1_write -> timer:write_n
	wire  [15:0] mm_interconnect_0_timer_s1_writedata;                 // mm_interconnect_0:timer_s1_writedata -> timer:writedata
	wire  [31:0] mm_interconnect_0_used_ddrvld_s1_readdata;            // used_ddrvld:readdata -> mm_interconnect_0:used_ddrvld_s1_readdata
	wire   [1:0] mm_interconnect_0_used_ddrvld_s1_address;             // mm_interconnect_0:used_ddrvld_s1_address -> used_ddrvld:address
	wire  [31:0] mm_interconnect_0_unused_ddrvld_s1_readdata;          // unused_ddrvld:readdata -> mm_interconnect_0:unused_ddrvld_s1_readdata
	wire   [1:0] mm_interconnect_0_unused_ddrvld_s1_address;           // mm_interconnect_0:unused_ddrvld_s1_address -> unused_ddrvld:address
	wire  [31:0] mm_interconnect_0_calc_unit_used_s1_readdata;         // calc_unit_used:readdata -> mm_interconnect_0:calc_unit_used_s1_readdata
	wire   [1:0] mm_interconnect_0_calc_unit_used_s1_address;          // mm_interconnect_0:calc_unit_used_s1_address -> calc_unit_used:address
	wire  [31:0] mm_interconnect_0_calc_unit_total_s1_readdata;        // calc_unit_total:readdata -> mm_interconnect_0:calc_unit_total_s1_readdata
	wire   [1:0] mm_interconnect_0_calc_unit_total_s1_address;         // mm_interconnect_0:calc_unit_total_s1_address -> calc_unit_total:address
	wire  [31:0] mm_interconnect_0_wr_ddrvld_s1_readdata;              // wr_ddrvld:readdata -> mm_interconnect_0:wr_ddrvld_s1_readdata
	wire   [1:0] mm_interconnect_0_wr_ddrvld_s1_address;               // mm_interconnect_0:wr_ddrvld_s1_address -> wr_ddrvld:address
	wire         mm_interconnect_0_power_temp_scl_s1_chipselect;       // mm_interconnect_0:power_temp_scl_s1_chipselect -> power_temp_scl:chipselect
	wire  [31:0] mm_interconnect_0_power_temp_scl_s1_readdata;         // power_temp_scl:readdata -> mm_interconnect_0:power_temp_scl_s1_readdata
	wire   [1:0] mm_interconnect_0_power_temp_scl_s1_address;          // mm_interconnect_0:power_temp_scl_s1_address -> power_temp_scl:address
	wire         mm_interconnect_0_power_temp_scl_s1_write;            // mm_interconnect_0:power_temp_scl_s1_write -> power_temp_scl:write_n
	wire  [31:0] mm_interconnect_0_power_temp_scl_s1_writedata;        // mm_interconnect_0:power_temp_scl_s1_writedata -> power_temp_scl:writedata
	wire         mm_interconnect_0_power_temp_sda_s1_chipselect;       // mm_interconnect_0:power_temp_sda_s1_chipselect -> power_temp_sda:chipselect
	wire  [31:0] mm_interconnect_0_power_temp_sda_s1_readdata;         // power_temp_sda:readdata -> mm_interconnect_0:power_temp_sda_s1_readdata
	wire   [1:0] mm_interconnect_0_power_temp_sda_s1_address;          // mm_interconnect_0:power_temp_sda_s1_address -> power_temp_sda:address
	wire         mm_interconnect_0_power_temp_sda_s1_write;            // mm_interconnect_0:power_temp_sda_s1_write -> power_temp_sda:write_n
	wire  [31:0] mm_interconnect_0_power_temp_sda_s1_writedata;        // mm_interconnect_0:power_temp_sda_s1_writedata -> power_temp_sda:writedata
	wire         irq_mapper_receiver0_irq;                             // jtag:av_irq -> irq_mapper:receiver0_irq
	wire         irq_mapper_receiver1_irq;                             // calc_finish:irq -> irq_mapper:receiver1_irq
	wire         irq_mapper_receiver2_irq;                             // timer:irq -> irq_mapper:receiver2_irq
	wire  [31:0] nios2_irq_irq;                                        // irq_mapper:sender_irq -> nios2:irq
	wire         rst_controller_reset_out_reset;                       // rst_controller:reset_out -> [calc_data:reset_n, calc_finish:reset_n, calc_fps:reset_n, calc_unit_total:reset_n, calc_unit_used:reset_n, data_addr:reset_n, irq_mapper:reset, jtag:rst_n, mm_interconnect_0:nios2_reset_reset_bridge_in_reset_reset, nios2:reset_n, onchip_ram:reset, power_temp_scl:reset_n, power_temp_sda:reset_n, rst_translator:in_reset, sysid:reset_n, timer:reset_n, unused_ddrvld:reset_n, used_ddrvld:reset_n, wr_ddrvld:reset_n]
	wire         rst_controller_reset_out_reset_req;                   // rst_controller:reset_req -> [nios2:reset_req, onchip_ram:reset_req, rst_translator:reset_req_in]
	wire         nios2_debug_reset_request_reset;                      // nios2:debug_reset_request -> rst_controller:reset_in0
	wire         reset_in_out_reset_reset;                             // reset_in:out_reset -> rst_controller:reset_in1

	nios_qsys_pio_0 calc_data (
		.clk      (clock_in_out_clk_clk),                    //   input,   width = 1,                 clk.clk
		.reset_n  (~rst_controller_reset_out_reset),         //   input,   width = 1,               reset.reset_n
		.address  (mm_interconnect_0_calc_data_s1_address),  //   input,   width = 2,                  s1.address
		.readdata (mm_interconnect_0_calc_data_s1_readdata), //  output,  width = 32,                    .readdata
		.in_port  (calc_data_export)                         //   input,  width = 32, external_connection.export
	);

	nios_qsys_pio_1 calc_finish (
		.clk        (clock_in_out_clk_clk),                        //   input,   width = 1,                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),             //   input,   width = 1,               reset.reset_n
		.address    (mm_interconnect_0_calc_finish_s1_address),    //   input,   width = 2,                  s1.address
		.write_n    (~mm_interconnect_0_calc_finish_s1_write),     //   input,   width = 1,                    .write_n
		.writedata  (mm_interconnect_0_calc_finish_s1_writedata),  //   input,  width = 32,                    .writedata
		.chipselect (mm_interconnect_0_calc_finish_s1_chipselect), //   input,   width = 1,                    .chipselect
		.readdata   (mm_interconnect_0_calc_finish_s1_readdata),   //  output,  width = 32,                    .readdata
		.in_port    (calc_finish_export),                          //   input,   width = 1, external_connection.export
		.irq        (irq_mapper_receiver1_irq)                     //  output,   width = 1,                 irq.irq
	);

	nios_qsys_pio_3 calc_fps (
		.clk      (clock_in_out_clk_clk),                   //   input,   width = 1,                 clk.clk
		.reset_n  (~rst_controller_reset_out_reset),        //   input,   width = 1,               reset.reset_n
		.address  (mm_interconnect_0_calc_fps_s1_address),  //   input,   width = 2,                  s1.address
		.readdata (mm_interconnect_0_calc_fps_s1_readdata), //  output,  width = 32,                    .readdata
		.in_port  (calc_fps_export)                         //   input,  width = 32, external_connection.export
	);

	nios_qsys_pio_7 calc_unit_total (
		.clk      (clock_in_out_clk_clk),                          //   input,   width = 1,                 clk.clk
		.reset_n  (~rst_controller_reset_out_reset),               //   input,   width = 1,               reset.reset_n
		.address  (mm_interconnect_0_calc_unit_total_s1_address),  //   input,   width = 2,                  s1.address
		.readdata (mm_interconnect_0_calc_unit_total_s1_readdata), //  output,  width = 32,                    .readdata
		.in_port  (calc_unit_total_export)                         //   input,  width = 32, external_connection.export
	);

	nios_qsys_pio_6 calc_unit_used (
		.clk      (clock_in_out_clk_clk),                         //   input,   width = 1,                 clk.clk
		.reset_n  (~rst_controller_reset_out_reset),              //   input,   width = 1,               reset.reset_n
		.address  (mm_interconnect_0_calc_unit_used_s1_address),  //   input,   width = 2,                  s1.address
		.readdata (mm_interconnect_0_calc_unit_used_s1_readdata), //  output,  width = 32,                    .readdata
		.in_port  (calc_unit_used_export)                         //   input,  width = 32, external_connection.export
	);

	nios_qsys_clock_in clock_in (
		.in_clk  (clk_clk),              //   input,  width = 1,  in_clk.clk
		.out_clk (clock_in_out_clk_clk)  //  output,  width = 1, out_clk.clk
	);

	nios_qsys_pio_2 data_addr (
		.clk        (clock_in_out_clk_clk),                      //   input,   width = 1,                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),           //   input,   width = 1,               reset.reset_n
		.address    (mm_interconnect_0_data_addr_s1_address),    //   input,   width = 2,                  s1.address
		.write_n    (~mm_interconnect_0_data_addr_s1_write),     //   input,   width = 1,                    .write_n
		.writedata  (mm_interconnect_0_data_addr_s1_writedata),  //   input,  width = 32,                    .writedata
		.chipselect (mm_interconnect_0_data_addr_s1_chipselect), //   input,   width = 1,                    .chipselect
		.readdata   (mm_interconnect_0_data_addr_s1_readdata),   //  output,  width = 32,                    .readdata
		.out_port   (data_addr_export)                           //  output,  width = 32, external_connection.export
	);

	nios_qsys_jtag_uart_0 jtag (
		.clk            (clock_in_out_clk_clk),                                 //   input,   width = 1,               clk.clk
		.rst_n          (~rst_controller_reset_out_reset),                      //   input,   width = 1,             reset.reset_n
		.av_chipselect  (mm_interconnect_0_jtag_avalon_jtag_slave_chipselect),  //   input,   width = 1, avalon_jtag_slave.chipselect
		.av_address     (mm_interconnect_0_jtag_avalon_jtag_slave_address),     //   input,   width = 1,                  .address
		.av_read_n      (~mm_interconnect_0_jtag_avalon_jtag_slave_read),       //   input,   width = 1,                  .read_n
		.av_readdata    (mm_interconnect_0_jtag_avalon_jtag_slave_readdata),    //  output,  width = 32,                  .readdata
		.av_write_n     (~mm_interconnect_0_jtag_avalon_jtag_slave_write),      //   input,   width = 1,                  .write_n
		.av_writedata   (mm_interconnect_0_jtag_avalon_jtag_slave_writedata),   //   input,  width = 32,                  .writedata
		.av_waitrequest (mm_interconnect_0_jtag_avalon_jtag_slave_waitrequest), //  output,   width = 1,                  .waitrequest
		.av_irq         (irq_mapper_receiver0_irq)                              //  output,   width = 1,               irq.irq
	);

	nios_qsys_nios2_gen2_0 nios2 (
		.clk                                 (clock_in_out_clk_clk),                                //   input,   width = 1,                       clk.clk
		.reset_n                             (~rst_controller_reset_out_reset),                     //   input,   width = 1,                     reset.reset_n
		.reset_req                           (rst_controller_reset_out_reset_req),                  //   input,   width = 1,                          .reset_req
		.d_address                           (nios2_data_master_address),                           //  output,  width = 17,               data_master.address
		.d_byteenable                        (nios2_data_master_byteenable),                        //  output,   width = 4,                          .byteenable
		.d_read                              (nios2_data_master_read),                              //  output,   width = 1,                          .read
		.d_readdata                          (nios2_data_master_readdata),                          //   input,  width = 32,                          .readdata
		.d_waitrequest                       (nios2_data_master_waitrequest),                       //   input,   width = 1,                          .waitrequest
		.d_write                             (nios2_data_master_write),                             //  output,   width = 1,                          .write
		.d_writedata                         (nios2_data_master_writedata),                         //  output,  width = 32,                          .writedata
		.d_readdatavalid                     (nios2_data_master_readdatavalid),                     //   input,   width = 1,                          .readdatavalid
		.debug_mem_slave_debugaccess_to_roms (nios2_data_master_debugaccess),                       //  output,   width = 1,                          .debugaccess
		.i_address                           (nios2_instruction_master_address),                    //  output,  width = 17,        instruction_master.address
		.i_read                              (nios2_instruction_master_read),                       //  output,   width = 1,                          .read
		.i_readdata                          (nios2_instruction_master_readdata),                   //   input,  width = 32,                          .readdata
		.i_waitrequest                       (nios2_instruction_master_waitrequest),                //   input,   width = 1,                          .waitrequest
		.i_readdatavalid                     (nios2_instruction_master_readdatavalid),              //   input,   width = 1,                          .readdatavalid
		.irq                                 (nios2_irq_irq),                                       //   input,  width = 32,                       irq.irq
		.debug_reset_request                 (nios2_debug_reset_request_reset),                     //  output,   width = 1,       debug_reset_request.reset
		.debug_mem_slave_address             (mm_interconnect_0_nios2_debug_mem_slave_address),     //   input,   width = 9,           debug_mem_slave.address
		.debug_mem_slave_byteenable          (mm_interconnect_0_nios2_debug_mem_slave_byteenable),  //   input,   width = 4,                          .byteenable
		.debug_mem_slave_debugaccess         (mm_interconnect_0_nios2_debug_mem_slave_debugaccess), //   input,   width = 1,                          .debugaccess
		.debug_mem_slave_read                (mm_interconnect_0_nios2_debug_mem_slave_read),        //   input,   width = 1,                          .read
		.debug_mem_slave_readdata            (mm_interconnect_0_nios2_debug_mem_slave_readdata),    //  output,  width = 32,                          .readdata
		.debug_mem_slave_waitrequest         (mm_interconnect_0_nios2_debug_mem_slave_waitrequest), //  output,   width = 1,                          .waitrequest
		.debug_mem_slave_write               (mm_interconnect_0_nios2_debug_mem_slave_write),       //   input,   width = 1,                          .write
		.debug_mem_slave_writedata           (mm_interconnect_0_nios2_debug_mem_slave_writedata),   //   input,  width = 32,                          .writedata
		.dummy_ci_port                       ()                                                     //  output,   width = 1, custom_instruction_master.readra
	);

	nios_qsys_onchip_memory2_0 onchip_ram (
		.clk        (clock_in_out_clk_clk),                       //   input,   width = 1,   clk1.clk
		.address    (mm_interconnect_0_onchip_ram_s1_address),    //   input,  width = 14,     s1.address
		.clken      (mm_interconnect_0_onchip_ram_s1_clken),      //   input,   width = 1,       .clken
		.chipselect (mm_interconnect_0_onchip_ram_s1_chipselect), //   input,   width = 1,       .chipselect
		.write      (mm_interconnect_0_onchip_ram_s1_write),      //   input,   width = 1,       .write
		.readdata   (mm_interconnect_0_onchip_ram_s1_readdata),   //  output,  width = 32,       .readdata
		.writedata  (mm_interconnect_0_onchip_ram_s1_writedata),  //   input,  width = 32,       .writedata
		.byteenable (mm_interconnect_0_onchip_ram_s1_byteenable), //   input,   width = 4,       .byteenable
		.reset      (rst_controller_reset_out_reset),             //   input,   width = 1, reset1.reset
		.reset_req  (rst_controller_reset_out_reset_req)          //   input,   width = 1,       .reset_req
	);

	power_temp_scl power_temp_scl (
		.clk        (clock_in_out_clk_clk),                           //   input,   width = 1,                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),                //   input,   width = 1,               reset.reset_n
		.address    (mm_interconnect_0_power_temp_scl_s1_address),    //   input,   width = 2,                  s1.address
		.write_n    (~mm_interconnect_0_power_temp_scl_s1_write),     //   input,   width = 1,                    .write_n
		.writedata  (mm_interconnect_0_power_temp_scl_s1_writedata),  //   input,  width = 32,                    .writedata
		.chipselect (mm_interconnect_0_power_temp_scl_s1_chipselect), //   input,   width = 1,                    .chipselect
		.readdata   (mm_interconnect_0_power_temp_scl_s1_readdata),   //  output,  width = 32,                    .readdata
		.out_port   (power_temp_scl_export)                           //  output,   width = 1, external_connection.export
	);

	power_temp_sda power_temp_sda (
		.clk        (clock_in_out_clk_clk),                           //   input,   width = 1,                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),                //   input,   width = 1,               reset.reset_n
		.address    (mm_interconnect_0_power_temp_sda_s1_address),    //   input,   width = 2,                  s1.address
		.write_n    (~mm_interconnect_0_power_temp_sda_s1_write),     //   input,   width = 1,                    .write_n
		.writedata  (mm_interconnect_0_power_temp_sda_s1_writedata),  //   input,  width = 32,                    .writedata
		.chipselect (mm_interconnect_0_power_temp_sda_s1_chipselect), //   input,   width = 1,                    .chipselect
		.readdata   (mm_interconnect_0_power_temp_sda_s1_readdata),   //  output,  width = 32,                    .readdata
		.bidir_port (power_temp_sda_export)                           //   inout,   width = 1, external_connection.export
	);

	nios_qsys_reset_in reset_in (
		.clk       (clock_in_out_clk_clk),     //   input,  width = 1,       clk.clk
		.in_reset  (reset_reset),              //   input,  width = 1,  in_reset.reset
		.out_reset (reset_in_out_reset_reset)  //  output,  width = 1, out_reset.reset
	);

	nios_qsys_sysid_qsys_0 sysid (
		.clock    (clock_in_out_clk_clk),                           //   input,   width = 1,           clk.clk
		.reset_n  (~rst_controller_reset_out_reset),                //   input,   width = 1,         reset.reset_n
		.readdata (mm_interconnect_0_sysid_control_slave_readdata), //  output,  width = 32, control_slave.readdata
		.address  (mm_interconnect_0_sysid_control_slave_address)   //   input,   width = 1,              .address
	);

	nios_qsys_timer_0 timer (
		.clk        (clock_in_out_clk_clk),                  //   input,   width = 1,   clk.clk
		.reset_n    (~rst_controller_reset_out_reset),       //   input,   width = 1, reset.reset_n
		.address    (mm_interconnect_0_timer_s1_address),    //   input,   width = 3,    s1.address
		.writedata  (mm_interconnect_0_timer_s1_writedata),  //   input,  width = 16,      .writedata
		.readdata   (mm_interconnect_0_timer_s1_readdata),   //  output,  width = 16,      .readdata
		.chipselect (mm_interconnect_0_timer_s1_chipselect), //   input,   width = 1,      .chipselect
		.write_n    (~mm_interconnect_0_timer_s1_write),     //   input,   width = 1,      .write_n
		.irq        (irq_mapper_receiver2_irq)               //  output,   width = 1,   irq.irq
	);

	nios_qsys_pio_5 unused_ddrvld (
		.clk      (clock_in_out_clk_clk),                        //   input,   width = 1,                 clk.clk
		.reset_n  (~rst_controller_reset_out_reset),             //   input,   width = 1,               reset.reset_n
		.address  (mm_interconnect_0_unused_ddrvld_s1_address),  //   input,   width = 2,                  s1.address
		.readdata (mm_interconnect_0_unused_ddrvld_s1_readdata), //  output,  width = 32,                    .readdata
		.in_port  (unused_ddrvld_export)                         //   input,  width = 32, external_connection.export
	);

	nios_qsys_pio_4 used_ddrvld (
		.clk      (clock_in_out_clk_clk),                      //   input,   width = 1,                 clk.clk
		.reset_n  (~rst_controller_reset_out_reset),           //   input,   width = 1,               reset.reset_n
		.address  (mm_interconnect_0_used_ddrvld_s1_address),  //   input,   width = 2,                  s1.address
		.readdata (mm_interconnect_0_used_ddrvld_s1_readdata), //  output,  width = 32,                    .readdata
		.in_port  (used_ddrvld_export)                         //   input,  width = 32, external_connection.export
	);

	nios_qsys_pio_8 wr_ddrvld (
		.clk      (clock_in_out_clk_clk),                    //   input,   width = 1,                 clk.clk
		.reset_n  (~rst_controller_reset_out_reset),         //   input,   width = 1,               reset.reset_n
		.address  (mm_interconnect_0_wr_ddrvld_s1_address),  //   input,   width = 2,                  s1.address
		.readdata (mm_interconnect_0_wr_ddrvld_s1_readdata), //  output,  width = 32,                    .readdata
		.in_port  (wr_ddrvld_export)                         //   input,  width = 32, external_connection.export
	);

	nios_qsys_altera_mm_interconnect_181_3r34ydq mm_interconnect_0 (
		.nios2_data_master_address               (nios2_data_master_address),                            //   input,  width = 17,                 nios2_data_master.address
		.nios2_data_master_waitrequest           (nios2_data_master_waitrequest),                        //  output,   width = 1,                                  .waitrequest
		.nios2_data_master_byteenable            (nios2_data_master_byteenable),                         //   input,   width = 4,                                  .byteenable
		.nios2_data_master_read                  (nios2_data_master_read),                               //   input,   width = 1,                                  .read
		.nios2_data_master_readdata              (nios2_data_master_readdata),                           //  output,  width = 32,                                  .readdata
		.nios2_data_master_readdatavalid         (nios2_data_master_readdatavalid),                      //  output,   width = 1,                                  .readdatavalid
		.nios2_data_master_write                 (nios2_data_master_write),                              //   input,   width = 1,                                  .write
		.nios2_data_master_writedata             (nios2_data_master_writedata),                          //   input,  width = 32,                                  .writedata
		.nios2_data_master_debugaccess           (nios2_data_master_debugaccess),                        //   input,   width = 1,                                  .debugaccess
		.nios2_instruction_master_address        (nios2_instruction_master_address),                     //   input,  width = 17,          nios2_instruction_master.address
		.nios2_instruction_master_waitrequest    (nios2_instruction_master_waitrequest),                 //  output,   width = 1,                                  .waitrequest
		.nios2_instruction_master_read           (nios2_instruction_master_read),                        //   input,   width = 1,                                  .read
		.nios2_instruction_master_readdata       (nios2_instruction_master_readdata),                    //  output,  width = 32,                                  .readdata
		.nios2_instruction_master_readdatavalid  (nios2_instruction_master_readdatavalid),               //  output,   width = 1,                                  .readdatavalid
		.jtag_avalon_jtag_slave_address          (mm_interconnect_0_jtag_avalon_jtag_slave_address),     //  output,   width = 1,            jtag_avalon_jtag_slave.address
		.jtag_avalon_jtag_slave_write            (mm_interconnect_0_jtag_avalon_jtag_slave_write),       //  output,   width = 1,                                  .write
		.jtag_avalon_jtag_slave_read             (mm_interconnect_0_jtag_avalon_jtag_slave_read),        //  output,   width = 1,                                  .read
		.jtag_avalon_jtag_slave_readdata         (mm_interconnect_0_jtag_avalon_jtag_slave_readdata),    //   input,  width = 32,                                  .readdata
		.jtag_avalon_jtag_slave_writedata        (mm_interconnect_0_jtag_avalon_jtag_slave_writedata),   //  output,  width = 32,                                  .writedata
		.jtag_avalon_jtag_slave_waitrequest      (mm_interconnect_0_jtag_avalon_jtag_slave_waitrequest), //   input,   width = 1,                                  .waitrequest
		.jtag_avalon_jtag_slave_chipselect       (mm_interconnect_0_jtag_avalon_jtag_slave_chipselect),  //  output,   width = 1,                                  .chipselect
		.sysid_control_slave_address             (mm_interconnect_0_sysid_control_slave_address),        //  output,   width = 1,               sysid_control_slave.address
		.sysid_control_slave_readdata            (mm_interconnect_0_sysid_control_slave_readdata),       //   input,  width = 32,                                  .readdata
		.nios2_debug_mem_slave_address           (mm_interconnect_0_nios2_debug_mem_slave_address),      //  output,   width = 9,             nios2_debug_mem_slave.address
		.nios2_debug_mem_slave_write             (mm_interconnect_0_nios2_debug_mem_slave_write),        //  output,   width = 1,                                  .write
		.nios2_debug_mem_slave_read              (mm_interconnect_0_nios2_debug_mem_slave_read),         //  output,   width = 1,                                  .read
		.nios2_debug_mem_slave_readdata          (mm_interconnect_0_nios2_debug_mem_slave_readdata),     //   input,  width = 32,                                  .readdata
		.nios2_debug_mem_slave_writedata         (mm_interconnect_0_nios2_debug_mem_slave_writedata),    //  output,  width = 32,                                  .writedata
		.nios2_debug_mem_slave_byteenable        (mm_interconnect_0_nios2_debug_mem_slave_byteenable),   //  output,   width = 4,                                  .byteenable
		.nios2_debug_mem_slave_waitrequest       (mm_interconnect_0_nios2_debug_mem_slave_waitrequest),  //   input,   width = 1,                                  .waitrequest
		.nios2_debug_mem_slave_debugaccess       (mm_interconnect_0_nios2_debug_mem_slave_debugaccess),  //  output,   width = 1,                                  .debugaccess
		.onchip_ram_s1_address                   (mm_interconnect_0_onchip_ram_s1_address),              //  output,  width = 14,                     onchip_ram_s1.address
		.onchip_ram_s1_write                     (mm_interconnect_0_onchip_ram_s1_write),                //  output,   width = 1,                                  .write
		.onchip_ram_s1_readdata                  (mm_interconnect_0_onchip_ram_s1_readdata),             //   input,  width = 32,                                  .readdata
		.onchip_ram_s1_writedata                 (mm_interconnect_0_onchip_ram_s1_writedata),            //  output,  width = 32,                                  .writedata
		.onchip_ram_s1_byteenable                (mm_interconnect_0_onchip_ram_s1_byteenable),           //  output,   width = 4,                                  .byteenable
		.onchip_ram_s1_chipselect                (mm_interconnect_0_onchip_ram_s1_chipselect),           //  output,   width = 1,                                  .chipselect
		.onchip_ram_s1_clken                     (mm_interconnect_0_onchip_ram_s1_clken),                //  output,   width = 1,                                  .clken
		.calc_data_s1_address                    (mm_interconnect_0_calc_data_s1_address),               //  output,   width = 2,                      calc_data_s1.address
		.calc_data_s1_readdata                   (mm_interconnect_0_calc_data_s1_readdata),              //   input,  width = 32,                                  .readdata
		.calc_finish_s1_address                  (mm_interconnect_0_calc_finish_s1_address),             //  output,   width = 2,                    calc_finish_s1.address
		.calc_finish_s1_write                    (mm_interconnect_0_calc_finish_s1_write),               //  output,   width = 1,                                  .write
		.calc_finish_s1_readdata                 (mm_interconnect_0_calc_finish_s1_readdata),            //   input,  width = 32,                                  .readdata
		.calc_finish_s1_writedata                (mm_interconnect_0_calc_finish_s1_writedata),           //  output,  width = 32,                                  .writedata
		.calc_finish_s1_chipselect               (mm_interconnect_0_calc_finish_s1_chipselect),          //  output,   width = 1,                                  .chipselect
		.data_addr_s1_address                    (mm_interconnect_0_data_addr_s1_address),               //  output,   width = 2,                      data_addr_s1.address
		.data_addr_s1_write                      (mm_interconnect_0_data_addr_s1_write),                 //  output,   width = 1,                                  .write
		.data_addr_s1_readdata                   (mm_interconnect_0_data_addr_s1_readdata),              //   input,  width = 32,                                  .readdata
		.data_addr_s1_writedata                  (mm_interconnect_0_data_addr_s1_writedata),             //  output,  width = 32,                                  .writedata
		.data_addr_s1_chipselect                 (mm_interconnect_0_data_addr_s1_chipselect),            //  output,   width = 1,                                  .chipselect
		.calc_fps_s1_address                     (mm_interconnect_0_calc_fps_s1_address),                //  output,   width = 2,                       calc_fps_s1.address
		.calc_fps_s1_readdata                    (mm_interconnect_0_calc_fps_s1_readdata),               //   input,  width = 32,                                  .readdata
		.timer_s1_address                        (mm_interconnect_0_timer_s1_address),                   //  output,   width = 3,                          timer_s1.address
		.timer_s1_write                          (mm_interconnect_0_timer_s1_write),                     //  output,   width = 1,                                  .write
		.timer_s1_readdata                       (mm_interconnect_0_timer_s1_readdata),                  //   input,  width = 16,                                  .readdata
		.timer_s1_writedata                      (mm_interconnect_0_timer_s1_writedata),                 //  output,  width = 16,                                  .writedata
		.timer_s1_chipselect                     (mm_interconnect_0_timer_s1_chipselect),                //  output,   width = 1,                                  .chipselect
		.used_ddrvld_s1_address                  (mm_interconnect_0_used_ddrvld_s1_address),             //  output,   width = 2,                    used_ddrvld_s1.address
		.used_ddrvld_s1_readdata                 (mm_interconnect_0_used_ddrvld_s1_readdata),            //   input,  width = 32,                                  .readdata
		.unused_ddrvld_s1_address                (mm_interconnect_0_unused_ddrvld_s1_address),           //  output,   width = 2,                  unused_ddrvld_s1.address
		.unused_ddrvld_s1_readdata               (mm_interconnect_0_unused_ddrvld_s1_readdata),          //   input,  width = 32,                                  .readdata
		.calc_unit_used_s1_address               (mm_interconnect_0_calc_unit_used_s1_address),          //  output,   width = 2,                 calc_unit_used_s1.address
		.calc_unit_used_s1_readdata              (mm_interconnect_0_calc_unit_used_s1_readdata),         //   input,  width = 32,                                  .readdata
		.calc_unit_total_s1_address              (mm_interconnect_0_calc_unit_total_s1_address),         //  output,   width = 2,                calc_unit_total_s1.address
		.calc_unit_total_s1_readdata             (mm_interconnect_0_calc_unit_total_s1_readdata),        //   input,  width = 32,                                  .readdata
		.wr_ddrvld_s1_address                    (mm_interconnect_0_wr_ddrvld_s1_address),               //  output,   width = 2,                      wr_ddrvld_s1.address
		.wr_ddrvld_s1_readdata                   (mm_interconnect_0_wr_ddrvld_s1_readdata),              //   input,  width = 32,                                  .readdata
		.power_temp_scl_s1_address               (mm_interconnect_0_power_temp_scl_s1_address),          //  output,   width = 2,                 power_temp_scl_s1.address
		.power_temp_scl_s1_write                 (mm_interconnect_0_power_temp_scl_s1_write),            //  output,   width = 1,                                  .write
		.power_temp_scl_s1_readdata              (mm_interconnect_0_power_temp_scl_s1_readdata),         //   input,  width = 32,                                  .readdata
		.power_temp_scl_s1_writedata             (mm_interconnect_0_power_temp_scl_s1_writedata),        //  output,  width = 32,                                  .writedata
		.power_temp_scl_s1_chipselect            (mm_interconnect_0_power_temp_scl_s1_chipselect),       //  output,   width = 1,                                  .chipselect
		.power_temp_sda_s1_address               (mm_interconnect_0_power_temp_sda_s1_address),          //  output,   width = 2,                 power_temp_sda_s1.address
		.power_temp_sda_s1_write                 (mm_interconnect_0_power_temp_sda_s1_write),            //  output,   width = 1,                                  .write
		.power_temp_sda_s1_readdata              (mm_interconnect_0_power_temp_sda_s1_readdata),         //   input,  width = 32,                                  .readdata
		.power_temp_sda_s1_writedata             (mm_interconnect_0_power_temp_sda_s1_writedata),        //  output,  width = 32,                                  .writedata
		.power_temp_sda_s1_chipselect            (mm_interconnect_0_power_temp_sda_s1_chipselect),       //  output,   width = 1,                                  .chipselect
		.nios2_reset_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),                       //   input,   width = 1, nios2_reset_reset_bridge_in_reset.reset
		.clock_in_out_clk_clk                    (clock_in_out_clk_clk)                                  //   input,   width = 1,                  clock_in_out_clk.clk
	);

	nios_qsys_altera_irq_mapper_181_nvr6dfi irq_mapper (
		.clk           (clock_in_out_clk_clk),           //   input,   width = 1,       clk.clk
		.reset         (rst_controller_reset_out_reset), //   input,   width = 1, clk_reset.reset
		.receiver0_irq (irq_mapper_receiver0_irq),       //   input,   width = 1, receiver0.irq
		.receiver1_irq (irq_mapper_receiver1_irq),       //   input,   width = 1, receiver1.irq
		.receiver2_irq (irq_mapper_receiver2_irq),       //   input,   width = 1, receiver2.irq
		.sender_irq    (nios2_irq_irq)                   //  output,  width = 32,    sender.irq
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (nios2_debug_reset_request_reset),    //   input,  width = 1, reset_in0.reset
		.reset_in1      (reset_in_out_reset_reset),           //   input,  width = 1, reset_in1.reset
		.clk            (clock_in_out_clk_clk),               //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_reset_out_reset),     //  output,  width = 1, reset_out.reset
		.reset_req      (rst_controller_reset_out_reset_req), //  output,  width = 1,          .reset_req
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

endmodule
