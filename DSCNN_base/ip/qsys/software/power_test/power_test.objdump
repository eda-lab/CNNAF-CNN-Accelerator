
power_test.elf:     file format elf32-littlenios2
power_test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010238

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00003e60 memsz 0x00003e60 flags r-x
    LOAD off    0x00004e80 vaddr 0x00013e80 paddr 0x00014164 align 2**12
         filesz 0x000002e4 memsz 0x000002e4 flags rw-
    LOAD off    0x00005448 vaddr 0x00014448 paddr 0x00014448 align 2**12
         filesz 0x00000000 memsz 0x00000124 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000218  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003784  00010238  00010238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004c4  000139bc  000139bc  000049bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e4  00013e80  00014164  00004e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000124  00014448  00014448  00005448  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_ram   00000000  0001456c  0001456c  00005164  2**0
                  CONTENTS
  7 .comment      0000002c  00000000  00000000  00005164  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000618  00000000  00000000  00005190  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00019671  00000000  00000000  000057a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000052b1  00000000  00000000  0001ee19  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00005632  00000000  00000000  000240ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000c24  00000000  00000000  000296fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000239f  00000000  00000000  0002a320  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001377  00000000  00000000  0002c6bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0002da38  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000240  00000000  00000000  0002da68  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0002f7d1  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0002f7d4  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0002f7d9  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0002f7da  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0002f7db  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0002f7df  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0002f7e3  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000004  00000000  00000000  0002f7e7  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000004  00000000  00000000  0002f7eb  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000004  00000000  00000000  0002f7ef  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000009  00000000  00000000  0002f7f3  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000005d  00000000  00000000  0002f7fc  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00106ea1  00000000  00000000  0002f859  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010238 l    d  .text	00000000 .text
000139bc l    d  .rodata	00000000 .rodata
00013e80 l    d  .rwdata	00000000 .rwdata
00014448 l    d  .bss	00000000 .bss
0001456c l    d  .onchip_ram	00000000 .onchip_ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /home/gtd/workspace/qts_prj/cnn/Mobilenet_FPGA_Accelarator_test_basic_power/ip/qsys/software/power_test_bsp//obj/HAL/src/crt0.o
00010280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 ina3221.c
00000000 l    df *ABS*	00000000 qsys.c
00000000 l    df *ABS*	00000000 tmp513.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00011b54 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00013e80 l     O .rwdata	000000e4 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
000121c8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00012320 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00013f64 l     O .rwdata	0000002c jtag
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00012718 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
0001280c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00012960 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000129c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00012d68 l     F .text	000000b0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00012e94 l     F .text	0000003c alt_get_errno
00012ed0 l     F .text	000000b8 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00014468 g     O .bss	00000004 alt_instruction_exception_handler
000122b4 g     F .text	0000006c alt_main
00011aa4 g     F .text	00000084 _puts_r
0001446c g     O .bss	00000100 alt_irq
00014164 g       *ABS*	00000000 __flash_rwdata_start
00011a5c g     F .text	00000048 printf
00010c1c g     F .text	000000fc Power_Monitor
00010d54 g     F .text	000003d0 Tmp513_Reg_Write
000132fc g     F .text	00000024 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000001c __reset
000115c4 g     F .text	00000154 Read_Tmp513_Information
00010020 g       *ABS*	00000000 __flash_exceptions_start
00014448 g     O .bss	00000004 errno
00014450 g     O .bss	00000004 alt_argv
0001c138 g       *ABS*	00000000 _gp
00013fb8 g     O .rwdata	00000180 alt_fd_list
00013320 g     F .text	00000160 alt_find_dev
00010ac8 g     F .text	00000154 Read_Ina3221_Information
00012e18 g     F .text	0000007c alt_io_redirect
00011b28 g     F .text	00000010 puts
00013734 g     F .text	00000098 alt_exception_cause_generated_bad_addr
00012598 g     F .text	000000ec altera_avalon_jtag_uart_read
00011a20 g     F .text	0000003c _printf_r
00011964 g     F .text	00000064 .hidden __udivsi3
000136a4 g     F .text	00000090 alt_icache_flush
00014150 g     O .rwdata	00000004 alt_max_fd
00014138 g     O .rwdata	00000004 _global_impure_ptr
0001456c g       *ABS*	00000000 __bss_end
00012c84 g     F .text	000000e4 alt_iic_isr_register
000131d0 g     F .text	0000012c alt_tick
00012c38 g     F .text	0000004c alt_ic_irq_enabled
00013134 g     F .text	0000009c alt_alarm_stop
00014458 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	000000c8 alt_irq_handler
00013f90 g     O .rwdata	00000028 alt_dev_null
00012918 g     F .text	00000048 alt_dcache_flush_all
00014164 g       *ABS*	00000000 __ram_rwdata_end
00014148 g     O .rwdata	00000008 alt_dev_list
0001235c g     F .text	000000f8 write
00013e80 g       *ABS*	00000000 __ram_rodata_end
000119c8 g     F .text	00000058 .hidden __umodsi3
0001456c g       *ABS*	00000000 end
0001298c g     F .text	00000034 alt_dev_reg
000101c4 g     F .exceptions	00000074 alt_instruction_exception_entry
00020000 g       *ABS*	00000000 __alt_stack_pointer
00012790 g     F .text	0000007c alt_avalon_timer_sc_init
00012684 g     F .text	00000094 altera_avalon_jtag_uart_write
00011bc0 g     F .text	000004f8 ___vfprintf_internal_r
000137ec g     F .text	0000019c __call_exitprocs
00010238 g     F .text	0000004c _start
0001445c g     O .bss	00000004 _alt_tick_rate
00014460 g     O .bss	00000008 _alt_nticks
0001248c g     F .text	0000004c alt_sys_init
00013e80 g       *ABS*	00000000 __ram_rwdata_start
000139bc g       *ABS*	00000000 __ram_rodata_start
000124d8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00013604 g     F .text	000000a0 alt_get_fd
0001456c g       *ABS*	00000000 __alt_stack_base
00013480 g     F .text	00000184 alt_find_file
000129fc g     F .text	000000a4 alt_dev_llist_insert
00011124 g     F .text	000004a0 Tmp513_Reg_Read
000120d0 g     F .text	000000a8 __sfvwrite_small_dev
00014448 g       *ABS*	00000000 __bss_start
00010284 g     F .text	000003d0 Ina3221_Reg_Write
00011718 g     F .text	0000014c main
00014454 g     O .bss	00000004 alt_envp
00012538 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00014154 g     O .rwdata	00000004 alt_errno
00011864 g     F .text	00000088 .hidden __divsi3
000139bc g       *ABS*	00000000 __flash_rodata_start
00012454 g     F .text	00000038 alt_irq_init
000130dc g     F .text	00000058 alt_release_fd
00012178 g     F .text	00000050 _write_r
0001413c g     O .rwdata	00000004 _impure_ptr
0001444c g     O .bss	00000004 alt_argc
00010020 g       .exceptions	00000000 alt_irq_entry
00010d18 g     F .text	0000003c Delay
00014140 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00012ad4 g     F .text	00000050 alt_ic_isr_register
00014164 g       *ABS*	00000000 _edata
0001456c g       *ABS*	00000000 _end
00010238 g       *ABS*	00000000 __ram_exceptions_end
00012bac g     F .text	0000008c alt_ic_irq_disable
000137cc g     F .text	00000020 exit
00010654 g     F .text	00000474 Ina3221_Reg_Read
000118ec g     F .text	00000078 .hidden __modsi3
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00010000 g       *ABS*	00000000 __alt_mem_onchip_ram
00013988 g     F .text	00000034 _exit
00011b38 g     F .text	0000001c strlen
00012f88 g     F .text	00000154 open
00012aa0 g     F .text	00000034 alt_icache_flush_all
00014158 g     O .rwdata	00000004 alt_priority_mask
00012b24 g     F .text	00000088 alt_ic_irq_enable
000120b8 g     F .text	00000018 __vfprintf_internal
0001415c g     O .rwdata	00000008 alt_alarm_list
00012848 g     F .text	000000d0 close
00012230 g     F .text	00000084 alt_load



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08408e14 	ori	at,at,568
    jmp r1
   10018:	0800683a 	jmp	at
   1001c:	00000000 	call	0 <__alt_mem_onchip_ram-0x10000>

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101c40 	call	101c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffc15 	stw	r2,-16(fp)

  return active;
   10118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0ffff17 	ldw	r3,-4(fp)
   10130:	e0bffe17 	ldw	r2,-8(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001126 	beq	r2,zero,10180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1013c:	e0bffd17 	ldw	r2,-12(fp)
   10140:	100690fa 	slli	r3,r2,3
   10144:	00800074 	movhi	r2,1
   10148:	1885883a 	add	r2,r3,r2
   1014c:	10d11b17 	ldw	r3,17516(r2)
   10150:	e0bffd17 	ldw	r2,-12(fp)
   10154:	100890fa 	slli	r4,r2,3
   10158:	00800074 	movhi	r2,1
   1015c:	2085883a 	add	r2,r4,r2
   10160:	10911c17 	ldw	r2,17520(r2)
   10164:	1009883a 	mov	r4,r2
   10168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   1016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
   10170:	0005313a 	rdctl	r2,ipending
   10174:	e0bffb15 	stw	r2,-20(fp)
  return active;
   10178:	e0bffb17 	ldw	r2,-20(fp)
   1017c:	00000706 	br	1019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
   10180:	e0bffe17 	ldw	r2,-8(fp)
   10184:	1085883a 	add	r2,r2,r2
   10188:	e0bffe15 	stw	r2,-8(fp)
      i++;
   1018c:	e0bffd17 	ldw	r2,-12(fp)
   10190:	10800044 	addi	r2,r2,1
   10194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
   10198:	003fe406 	br	1012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
   1019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   101a0:	e0bfff17 	ldw	r2,-4(fp)
   101a4:	103fde1e 	bne	r2,zero,10120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101a8:	0001883a 	nop
}
   101ac:	0001883a 	nop
   101b0:	e037883a 	mov	sp,fp
   101b4:	dfc00117 	ldw	ra,4(sp)
   101b8:	df000017 	ldw	fp,0(sp)
   101bc:	dec00204 	addi	sp,sp,8
   101c0:	f800283a 	ret

000101c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101c4:	defffb04 	addi	sp,sp,-20
   101c8:	dfc00415 	stw	ra,16(sp)
   101cc:	df000315 	stw	fp,12(sp)
   101d0:	df000304 	addi	fp,sp,12
   101d4:	e13ffd15 	stw	r4,-12(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   101d8:	000531fa 	rdctl	r2,exception
   101dc:	e0bfff15 	stw	r2,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   101e0:	e0bfff17 	ldw	r2,-4(fp)
   101e4:	1004d0ba 	srli	r2,r2,2
   101e8:	108007cc 	andi	r2,r2,31
   101ec:	e0bfff15 	stw	r2,-4(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   101f0:	0005333a 	rdctl	r2,badaddr
   101f4:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   101f8:	d0a0cc17 	ldw	r2,-31952(gp)
   101fc:	10000726 	beq	r2,zero,1021c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   10200:	d0a0cc17 	ldw	r2,-31952(gp)
   10204:	e0ffff17 	ldw	r3,-4(fp)
   10208:	e1bffe17 	ldw	r6,-8(fp)
   1020c:	e17ffd17 	ldw	r5,-12(fp)
   10210:	1809883a 	mov	r4,r3
   10214:	103ee83a 	callr	r2
   10218:	00000206 	br	10224 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   1021c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   10220:	0005883a 	mov	r2,zero
}
   10224:	e037883a 	mov	sp,fp
   10228:	dfc00117 	ldw	ra,4(sp)
   1022c:	df000017 	ldw	fp,0(sp)
   10230:	dec00204 	addi	sp,sp,8
   10234:	f800283a 	ret

Disassembly of section .text:

00010238 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   10238:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   1023c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   10240:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   10244:	00bffd16 	blt	zero,r2,1023c <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10248:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   1024c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10250:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   10254:	d6b04e14 	ori	gp,gp,49464
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10258:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   1025c:	10911214 	ori	r2,r2,17480

    movhi r3, %hi(__bss_end)
   10260:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   10264:	18d15b14 	ori	r3,r3,17772

    beq r2, r3, 1f
   10268:	10c00326 	beq	r2,r3,10278 <_start+0x40>

0:
    stw zero, (r2)
   1026c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   10274:	10fffd36 	bltu	r2,r3,1026c <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10278:	00122300 	call	12230 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   1027c:	00122b40 	call	122b4 <alt_main>

00010280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10280:	003fff06 	br	10280 <alt_after_alt_main>

00010284 <Ina3221_Reg_Write>:
 *         Name:  Ina3221_Reg_Write
 *  Description:  Write ina3221's register
 * =====================================================================================
 */ 
void Ina3221_Reg_Write(unsigned char regaddr, unsigned short regdata) 
{ 
   10284:	defff904 	addi	sp,sp,-28
   10288:	dfc00615 	stw	ra,24(sp)
   1028c:	df000515 	stw	fp,20(sp)
   10290:	df000504 	addi	fp,sp,20
   10294:	2005883a 	mov	r2,r4
   10298:	2807883a 	mov	r3,r5
   1029c:	e0bffc05 	stb	r2,-16(fp)
   102a0:	1805883a 	mov	r2,r3
   102a4:	e0bffb0d 	sth	r2,-20(fp)
	unsigned int j;
	unsigned char opcode;
	unsigned char low_regdata;
	unsigned char high_regdata;
	
	low_regdata = regdata & 0xff;
   102a8:	e0bffb0b 	ldhu	r2,-20(fp)
   102ac:	e0bffd85 	stb	r2,-10(fp)
	high_regdata = (regdata >> 8) & 0xff;
   102b0:	e0bffb0b 	ldhu	r2,-20(fp)
   102b4:	1004d23a 	srli	r2,r2,8
   102b8:	e0bffd45 	stb	r2,-11(fp)

	INA3221_DATA_OUT;
   102bc:	00840804 	movi	r2,4128
   102c0:	00c00044 	movi	r3,1
   102c4:	10c00115 	stw	r3,4(r2)

	// START
	(INA3221_SDA->DATA) = 0;
   102c8:	00840804 	movi	r2,4128
   102cc:	10000015 	stw	zero,0(r2)
	Delay(INA3221_DELAY);
   102d0:	01009c44 	movi	r4,625
   102d4:	0010d180 	call	10d18 <Delay>
	(INA3221_SCL->DATA) = 0;
   102d8:	00840c04 	movi	r2,4144
   102dc:	10000015 	stw	zero,0(r2)

	opcode = INA3221_WRITE_CODE;
   102e0:	00800044 	movi	r2,1
   102e4:	e0bffdc5 	stb	r2,-9(fp)

	// Operation code
	for(i = 0; i < 7; i++){
   102e8:	e03fff15 	stw	zero,-4(fp)
   102ec:	00001206 	br	10338 <Ina3221_Reg_Write+0xb4>
		(INA3221_SDA->DATA) = opcode;
   102f0:	00840804 	movi	r2,4128
   102f4:	e0fffdc3 	ldbu	r3,-9(fp)
   102f8:	10c00015 	stw	r3,0(r2)
		Delay(INA3221_DELAY);
   102fc:	01009c44 	movi	r4,625
   10300:	0010d180 	call	10d18 <Delay>
		(INA3221_SCL->DATA) = 1;
   10304:	00840c04 	movi	r2,4144
   10308:	00c00044 	movi	r3,1
   1030c:	10c00015 	stw	r3,0(r2)
		Delay(INA3221_DELAY);
   10310:	01009c44 	movi	r4,625
   10314:	0010d180 	call	10d18 <Delay>
		(INA3221_SCL->DATA) = 0;
   10318:	00840c04 	movi	r2,4144
   1031c:	10000015 	stw	zero,0(r2)
		opcode = opcode >> 1;
   10320:	e0bffdc3 	ldbu	r2,-9(fp)
   10324:	1004d07a 	srli	r2,r2,1
   10328:	e0bffdc5 	stb	r2,-9(fp)
	for(i = 0; i < 7; i++){
   1032c:	e0bfff17 	ldw	r2,-4(fp)
   10330:	10800044 	addi	r2,r2,1
   10334:	e0bfff15 	stw	r2,-4(fp)
   10338:	e0bfff17 	ldw	r2,-4(fp)
   1033c:	108001f0 	cmpltui	r2,r2,7
   10340:	103feb1e 	bne	r2,zero,102f0 <Ina3221_Reg_Write+0x6c>
	}
	(INA3221_SDA->DATA) = opcode;
   10344:	00840804 	movi	r2,4128
   10348:	e0fffdc3 	ldbu	r3,-9(fp)
   1034c:	10c00015 	stw	r3,0(r2)
	Delay(INA3221_DELAY);
   10350:	01009c44 	movi	r4,625
   10354:	0010d180 	call	10d18 <Delay>
	(INA3221_SCL->DATA) = 1;
   10358:	00840c04 	movi	r2,4144
   1035c:	00c00044 	movi	r3,1
   10360:	10c00015 	stw	r3,0(r2)
	Delay(INA3221_DELAY);
   10364:	01009c44 	movi	r4,625
   10368:	0010d180 	call	10d18 <Delay>
	(INA3221_SCL->DATA) = 0;
   1036c:	00840c04 	movi	r2,4144
   10370:	10000015 	stw	zero,0(r2)

	// Slave ACK
	INA3221_DATA_IN;
   10374:	00840804 	movi	r2,4128
   10378:	10000115 	stw	zero,4(r2)
	Delay(INA3221_DELAY);
   1037c:	01009c44 	movi	r4,625
   10380:	0010d180 	call	10d18 <Delay>
	(INA3221_SCL->DATA) = 1;
   10384:	00840c04 	movi	r2,4144
   10388:	00c00044 	movi	r3,1
   1038c:	10c00015 	stw	r3,0(r2)
	Delay(INA3221_DELAY);
   10390:	01009c44 	movi	r4,625
   10394:	0010d180 	call	10d18 <Delay>
	(INA3221_SCL->DATA) = 0;
   10398:	00840c04 	movi	r2,4144
   1039c:	10000015 	stw	zero,0(r2)

	// Reg address
	INA3221_DATA_OUT;
   103a0:	00840804 	movi	r2,4128
   103a4:	00c00044 	movi	r3,1
   103a8:	10c00115 	stw	r3,4(r2)
	for(i = 0; i < 7; i++){
   103ac:	e03fff15 	stw	zero,-4(fp)
   103b0:	00001306 	br	10400 <Ina3221_Reg_Write+0x17c>
		(INA3221_SDA->DATA) = (regaddr >> (7-i));
   103b4:	e0fffc03 	ldbu	r3,-16(fp)
   103b8:	010001c4 	movi	r4,7
   103bc:	e0bfff17 	ldw	r2,-4(fp)
   103c0:	2085c83a 	sub	r2,r4,r2
   103c4:	1887d83a 	sra	r3,r3,r2
   103c8:	00840804 	movi	r2,4128
   103cc:	10c00015 	stw	r3,0(r2)
		Delay(INA3221_DELAY);
   103d0:	01009c44 	movi	r4,625
   103d4:	0010d180 	call	10d18 <Delay>
		(INA3221_SCL->DATA) = 1;
   103d8:	00840c04 	movi	r2,4144
   103dc:	00c00044 	movi	r3,1
   103e0:	10c00015 	stw	r3,0(r2)
		Delay(INA3221_DELAY);
   103e4:	01009c44 	movi	r4,625
   103e8:	0010d180 	call	10d18 <Delay>
		(INA3221_SCL->DATA) = 0;
   103ec:	00840c04 	movi	r2,4144
   103f0:	10000015 	stw	zero,0(r2)
	for(i = 0; i < 7; i++){
   103f4:	e0bfff17 	ldw	r2,-4(fp)
   103f8:	10800044 	addi	r2,r2,1
   103fc:	e0bfff15 	stw	r2,-4(fp)
   10400:	e0bfff17 	ldw	r2,-4(fp)
   10404:	108001f0 	cmpltui	r2,r2,7
   10408:	103fea1e 	bne	r2,zero,103b4 <Ina3221_Reg_Write+0x130>
	}
	(INA3221_SDA->DATA) = regaddr;
   1040c:	00840804 	movi	r2,4128
   10410:	e0fffc03 	ldbu	r3,-16(fp)
   10414:	10c00015 	stw	r3,0(r2)
	Delay(INA3221_DELAY);
   10418:	01009c44 	movi	r4,625
   1041c:	0010d180 	call	10d18 <Delay>
	(INA3221_SCL->DATA) = 1;
   10420:	00840c04 	movi	r2,4144
   10424:	00c00044 	movi	r3,1
   10428:	10c00015 	stw	r3,0(r2)
	Delay(INA3221_DELAY);
   1042c:	01009c44 	movi	r4,625
   10430:	0010d180 	call	10d18 <Delay>
	(INA3221_SCL->DATA) = 0;
   10434:	00840c04 	movi	r2,4144
   10438:	10000015 	stw	zero,0(r2)

	// Slave ACK
	INA3221_DATA_IN;
   1043c:	00840804 	movi	r2,4128
   10440:	10000115 	stw	zero,4(r2)
	Delay(INA3221_DELAY);
   10444:	01009c44 	movi	r4,625
   10448:	0010d180 	call	10d18 <Delay>
	(INA3221_SCL->DATA) = 1;
   1044c:	00840c04 	movi	r2,4144
   10450:	00c00044 	movi	r3,1
   10454:	10c00015 	stw	r3,0(r2)
	Delay(INA3221_DELAY);
   10458:	01009c44 	movi	r4,625
   1045c:	0010d180 	call	10d18 <Delay>
	(INA3221_SCL->DATA) = 0;
   10460:	00840c04 	movi	r2,4144
   10464:	10000015 	stw	zero,0(r2)

	// Write high byte
	INA3221_DATA_OUT;
   10468:	00840804 	movi	r2,4128
   1046c:	00c00044 	movi	r3,1
   10470:	10c00115 	stw	r3,4(r2)
	for(j = 0; j < 7; j++){
   10474:	e03ffe15 	stw	zero,-8(fp)
   10478:	00001306 	br	104c8 <Ina3221_Reg_Write+0x244>
		(INA3221_SDA->DATA) = (high_regdata >> (7 - j));
   1047c:	e0fffd43 	ldbu	r3,-11(fp)
   10480:	010001c4 	movi	r4,7
   10484:	e0bffe17 	ldw	r2,-8(fp)
   10488:	2085c83a 	sub	r2,r4,r2
   1048c:	1887d83a 	sra	r3,r3,r2
   10490:	00840804 	movi	r2,4128
   10494:	10c00015 	stw	r3,0(r2)
		Delay(INA3221_DELAY);
   10498:	01009c44 	movi	r4,625
   1049c:	0010d180 	call	10d18 <Delay>
		(INA3221_SCL->DATA) = 1;
   104a0:	00840c04 	movi	r2,4144
   104a4:	00c00044 	movi	r3,1
   104a8:	10c00015 	stw	r3,0(r2)
		Delay(INA3221_DELAY);
   104ac:	01009c44 	movi	r4,625
   104b0:	0010d180 	call	10d18 <Delay>
		(INA3221_SCL->DATA) = 0;
   104b4:	00840c04 	movi	r2,4144
   104b8:	10000015 	stw	zero,0(r2)
	for(j = 0; j < 7; j++){
   104bc:	e0bffe17 	ldw	r2,-8(fp)
   104c0:	10800044 	addi	r2,r2,1
   104c4:	e0bffe15 	stw	r2,-8(fp)
   104c8:	e0bffe17 	ldw	r2,-8(fp)
   104cc:	108001f0 	cmpltui	r2,r2,7
   104d0:	103fea1e 	bne	r2,zero,1047c <Ina3221_Reg_Write+0x1f8>
	}
	(INA3221_SDA->DATA) = high_regdata;
   104d4:	00840804 	movi	r2,4128
   104d8:	e0fffd43 	ldbu	r3,-11(fp)
   104dc:	10c00015 	stw	r3,0(r2)
	Delay(INA3221_DELAY);
   104e0:	01009c44 	movi	r4,625
   104e4:	0010d180 	call	10d18 <Delay>
	(INA3221_SCL->DATA) = 1;
   104e8:	00840c04 	movi	r2,4144
   104ec:	00c00044 	movi	r3,1
   104f0:	10c00015 	stw	r3,0(r2)
	Delay(INA3221_DELAY);
   104f4:	01009c44 	movi	r4,625
   104f8:	0010d180 	call	10d18 <Delay>
	(INA3221_SCL->DATA) = 0;
   104fc:	00840c04 	movi	r2,4144
   10500:	10000015 	stw	zero,0(r2)

	// Slave ACK
	INA3221_DATA_IN;
   10504:	00840804 	movi	r2,4128
   10508:	10000115 	stw	zero,4(r2)
	Delay(INA3221_DELAY);
   1050c:	01009c44 	movi	r4,625
   10510:	0010d180 	call	10d18 <Delay>
	(INA3221_SCL->DATA) = 1;
   10514:	00840c04 	movi	r2,4144
   10518:	00c00044 	movi	r3,1
   1051c:	10c00015 	stw	r3,0(r2)
	Delay(INA3221_DELAY);
   10520:	01009c44 	movi	r4,625
   10524:	0010d180 	call	10d18 <Delay>
	(INA3221_SCL->DATA) = 0;
   10528:	00840c04 	movi	r2,4144
   1052c:	10000015 	stw	zero,0(r2)
	
	// Write low byte
	INA3221_DATA_OUT;
   10530:	00840804 	movi	r2,4128
   10534:	00c00044 	movi	r3,1
   10538:	10c00115 	stw	r3,4(r2)
	for(j = 0; j < 7; j++){
   1053c:	e03ffe15 	stw	zero,-8(fp)
   10540:	00001306 	br	10590 <Ina3221_Reg_Write+0x30c>
		(INA3221_SDA->DATA) = (low_regdata >> (7 - j));
   10544:	e0fffd83 	ldbu	r3,-10(fp)
   10548:	010001c4 	movi	r4,7
   1054c:	e0bffe17 	ldw	r2,-8(fp)
   10550:	2085c83a 	sub	r2,r4,r2
   10554:	1887d83a 	sra	r3,r3,r2
   10558:	00840804 	movi	r2,4128
   1055c:	10c00015 	stw	r3,0(r2)
		Delay(INA3221_DELAY);
   10560:	01009c44 	movi	r4,625
   10564:	0010d180 	call	10d18 <Delay>
		(INA3221_SCL->DATA) = 1;
   10568:	00840c04 	movi	r2,4144
   1056c:	00c00044 	movi	r3,1
   10570:	10c00015 	stw	r3,0(r2)
		Delay(INA3221_DELAY);
   10574:	01009c44 	movi	r4,625
   10578:	0010d180 	call	10d18 <Delay>
		(INA3221_SCL->DATA) = 0;
   1057c:	00840c04 	movi	r2,4144
   10580:	10000015 	stw	zero,0(r2)
	for(j = 0; j < 7; j++){
   10584:	e0bffe17 	ldw	r2,-8(fp)
   10588:	10800044 	addi	r2,r2,1
   1058c:	e0bffe15 	stw	r2,-8(fp)
   10590:	e0bffe17 	ldw	r2,-8(fp)
   10594:	108001f0 	cmpltui	r2,r2,7
   10598:	103fea1e 	bne	r2,zero,10544 <Ina3221_Reg_Write+0x2c0>
	}
	(INA3221_SDA->DATA) = low_regdata;
   1059c:	00840804 	movi	r2,4128
   105a0:	e0fffd83 	ldbu	r3,-10(fp)
   105a4:	10c00015 	stw	r3,0(r2)
	Delay(INA3221_DELAY);
   105a8:	01009c44 	movi	r4,625
   105ac:	0010d180 	call	10d18 <Delay>
	(INA3221_SCL->DATA) = 1;
   105b0:	00840c04 	movi	r2,4144
   105b4:	00c00044 	movi	r3,1
   105b8:	10c00015 	stw	r3,0(r2)
	Delay(INA3221_DELAY);
   105bc:	01009c44 	movi	r4,625
   105c0:	0010d180 	call	10d18 <Delay>
	(INA3221_SCL->DATA) = 0;
   105c4:	00840c04 	movi	r2,4144
   105c8:	10000015 	stw	zero,0(r2)

	// Slave ACK
	INA3221_DATA_IN;
   105cc:	00840804 	movi	r2,4128
   105d0:	10000115 	stw	zero,4(r2)
	Delay(INA3221_DELAY);
   105d4:	01009c44 	movi	r4,625
   105d8:	0010d180 	call	10d18 <Delay>
	(INA3221_SCL->DATA) = 1;
   105dc:	00840c04 	movi	r2,4144
   105e0:	00c00044 	movi	r3,1
   105e4:	10c00015 	stw	r3,0(r2)
	Delay(INA3221_DELAY);
   105e8:	01009c44 	movi	r4,625
   105ec:	0010d180 	call	10d18 <Delay>
	(INA3221_SCL->DATA) = 0;
   105f0:	00840c04 	movi	r2,4144
   105f4:	10000015 	stw	zero,0(r2)

	// Stop
	INA3221_DATA_OUT;
   105f8:	00840804 	movi	r2,4128
   105fc:	00c00044 	movi	r3,1
   10600:	10c00115 	stw	r3,4(r2)
	(INA3221_SDA->DATA) = 0;
   10604:	00840804 	movi	r2,4128
   10608:	10000015 	stw	zero,0(r2)
	Delay(INA3221_DELAY);
   1060c:	01009c44 	movi	r4,625
   10610:	0010d180 	call	10d18 <Delay>
	(INA3221_SCL->DATA) = 1;
   10614:	00840c04 	movi	r2,4144
   10618:	00c00044 	movi	r3,1
   1061c:	10c00015 	stw	r3,0(r2)
	Delay(INA3221_DELAY);
   10620:	01009c44 	movi	r4,625
   10624:	0010d180 	call	10d18 <Delay>
	(INA3221_SDA->DATA) = 1;
   10628:	00840804 	movi	r2,4128
   1062c:	00c00044 	movi	r3,1
   10630:	10c00015 	stw	r3,0(r2)

	INA3221_DATA_IN;
   10634:	00840804 	movi	r2,4128
   10638:	10000115 	stw	zero,4(r2)
}
   1063c:	0001883a 	nop
   10640:	e037883a 	mov	sp,fp
   10644:	dfc00117 	ldw	ra,4(sp)
   10648:	df000017 	ldw	fp,0(sp)
   1064c:	dec00204 	addi	sp,sp,8
   10650:	f800283a 	ret

00010654 <Ina3221_Reg_Read>:
 *         Name:  Ina3221_Reg_Read
 *  Description:  read ina3221's register
 * =====================================================================================
 */ 
unsigned short Ina3221_Reg_Read(unsigned char regaddr) 
{ 
   10654:	defffa04 	addi	sp,sp,-24
   10658:	dfc00515 	stw	ra,20(sp)
   1065c:	df000415 	stw	fp,16(sp)
   10660:	df000404 	addi	fp,sp,16
   10664:	2005883a 	mov	r2,r4
   10668:	e0bffc05 	stb	r2,-16(fp)
	unsigned int i;
	unsigned int j;
	unsigned char opcode;
	unsigned short readdata;

	INA3221_DATA_OUT;
   1066c:	00840804 	movi	r2,4128
   10670:	00c00044 	movi	r3,1
   10674:	10c00115 	stw	r3,4(r2)

	// START
	(INA3221_SDA->DATA) = 0;
   10678:	00840804 	movi	r2,4128
   1067c:	10000015 	stw	zero,0(r2)
	Delay(INA3221_DELAY);
   10680:	01009c44 	movi	r4,625
   10684:	0010d180 	call	10d18 <Delay>
	(INA3221_SCL->DATA) = 0;
   10688:	00840c04 	movi	r2,4144
   1068c:	10000015 	stw	zero,0(r2)

	// Operation code
	opcode = INA3221_WRITE_CODE;
   10690:	00800044 	movi	r2,1
   10694:	e0bffdc5 	stb	r2,-9(fp)
	for(i = 0; i < 7; i++){
   10698:	e03fff15 	stw	zero,-4(fp)
   1069c:	00001206 	br	106e8 <Ina3221_Reg_Read+0x94>
		(INA3221_SDA->DATA) = opcode;
   106a0:	00840804 	movi	r2,4128
   106a4:	e0fffdc3 	ldbu	r3,-9(fp)
   106a8:	10c00015 	stw	r3,0(r2)
		Delay(INA3221_DELAY);
   106ac:	01009c44 	movi	r4,625
   106b0:	0010d180 	call	10d18 <Delay>
		(INA3221_SCL->DATA) = 1;
   106b4:	00840c04 	movi	r2,4144
   106b8:	00c00044 	movi	r3,1
   106bc:	10c00015 	stw	r3,0(r2)
		Delay(INA3221_DELAY);
   106c0:	01009c44 	movi	r4,625
   106c4:	0010d180 	call	10d18 <Delay>
		(INA3221_SCL->DATA) = 0;
   106c8:	00840c04 	movi	r2,4144
   106cc:	10000015 	stw	zero,0(r2)
		opcode = opcode >> 1;
   106d0:	e0bffdc3 	ldbu	r2,-9(fp)
   106d4:	1004d07a 	srli	r2,r2,1
   106d8:	e0bffdc5 	stb	r2,-9(fp)
	for(i = 0; i < 7; i++){
   106dc:	e0bfff17 	ldw	r2,-4(fp)
   106e0:	10800044 	addi	r2,r2,1
   106e4:	e0bfff15 	stw	r2,-4(fp)
   106e8:	e0bfff17 	ldw	r2,-4(fp)
   106ec:	108001f0 	cmpltui	r2,r2,7
   106f0:	103feb1e 	bne	r2,zero,106a0 <Ina3221_Reg_Read+0x4c>
	}
	(INA3221_SDA->DATA) = opcode;
   106f4:	00840804 	movi	r2,4128
   106f8:	e0fffdc3 	ldbu	r3,-9(fp)
   106fc:	10c00015 	stw	r3,0(r2)
	Delay(INA3221_DELAY);
   10700:	01009c44 	movi	r4,625
   10704:	0010d180 	call	10d18 <Delay>
	(INA3221_SCL->DATA) = 1;
   10708:	00840c04 	movi	r2,4144
   1070c:	00c00044 	movi	r3,1
   10710:	10c00015 	stw	r3,0(r2)
	Delay(INA3221_DELAY);
   10714:	01009c44 	movi	r4,625
   10718:	0010d180 	call	10d18 <Delay>
	(INA3221_SCL->DATA) = 0;
   1071c:	00840c04 	movi	r2,4144
   10720:	10000015 	stw	zero,0(r2)

	// Slave ACK
	INA3221_DATA_IN;
   10724:	00840804 	movi	r2,4128
   10728:	10000115 	stw	zero,4(r2)
	Delay(INA3221_DELAY);
   1072c:	01009c44 	movi	r4,625
   10730:	0010d180 	call	10d18 <Delay>
	(INA3221_SCL->DATA) = 1;
   10734:	00840c04 	movi	r2,4144
   10738:	00c00044 	movi	r3,1
   1073c:	10c00015 	stw	r3,0(r2)
	Delay(INA3221_DELAY);
   10740:	01009c44 	movi	r4,625
   10744:	0010d180 	call	10d18 <Delay>
	(INA3221_SCL->DATA) = 0;
   10748:	00840c04 	movi	r2,4144
   1074c:	10000015 	stw	zero,0(r2)

	// Reg address
	INA3221_DATA_OUT;
   10750:	00840804 	movi	r2,4128
   10754:	00c00044 	movi	r3,1
   10758:	10c00115 	stw	r3,4(r2)
	for(i = 0; i < 7; i++){
   1075c:	e03fff15 	stw	zero,-4(fp)
   10760:	00001306 	br	107b0 <Ina3221_Reg_Read+0x15c>
		(INA3221_SDA->DATA) = (regaddr >> (7-i));
   10764:	e0fffc03 	ldbu	r3,-16(fp)
   10768:	010001c4 	movi	r4,7
   1076c:	e0bfff17 	ldw	r2,-4(fp)
   10770:	2085c83a 	sub	r2,r4,r2
   10774:	1887d83a 	sra	r3,r3,r2
   10778:	00840804 	movi	r2,4128
   1077c:	10c00015 	stw	r3,0(r2)
		Delay(INA3221_DELAY);
   10780:	01009c44 	movi	r4,625
   10784:	0010d180 	call	10d18 <Delay>
		(INA3221_SCL->DATA) = 1;
   10788:	00840c04 	movi	r2,4144
   1078c:	00c00044 	movi	r3,1
   10790:	10c00015 	stw	r3,0(r2)
		Delay(INA3221_DELAY);
   10794:	01009c44 	movi	r4,625
   10798:	0010d180 	call	10d18 <Delay>
		(INA3221_SCL->DATA) = 0;
   1079c:	00840c04 	movi	r2,4144
   107a0:	10000015 	stw	zero,0(r2)
	for(i = 0; i < 7; i++){
   107a4:	e0bfff17 	ldw	r2,-4(fp)
   107a8:	10800044 	addi	r2,r2,1
   107ac:	e0bfff15 	stw	r2,-4(fp)
   107b0:	e0bfff17 	ldw	r2,-4(fp)
   107b4:	108001f0 	cmpltui	r2,r2,7
   107b8:	103fea1e 	bne	r2,zero,10764 <Ina3221_Reg_Read+0x110>
	}
	(INA3221_SDA->DATA) = regaddr;
   107bc:	00840804 	movi	r2,4128
   107c0:	e0fffc03 	ldbu	r3,-16(fp)
   107c4:	10c00015 	stw	r3,0(r2)
	Delay(INA3221_DELAY);
   107c8:	01009c44 	movi	r4,625
   107cc:	0010d180 	call	10d18 <Delay>
	(INA3221_SCL->DATA) = 1;
   107d0:	00840c04 	movi	r2,4144
   107d4:	00c00044 	movi	r3,1
   107d8:	10c00015 	stw	r3,0(r2)
	Delay(INA3221_DELAY);
   107dc:	01009c44 	movi	r4,625
   107e0:	0010d180 	call	10d18 <Delay>
	(INA3221_SCL->DATA) = 0;
   107e4:	00840c04 	movi	r2,4144
   107e8:	10000015 	stw	zero,0(r2)

	// Slave ACK
	INA3221_DATA_IN;
   107ec:	00840804 	movi	r2,4128
   107f0:	10000115 	stw	zero,4(r2)
	Delay(INA3221_DELAY);
   107f4:	01009c44 	movi	r4,625
   107f8:	0010d180 	call	10d18 <Delay>
	(INA3221_SCL->DATA) = 1;
   107fc:	00840c04 	movi	r2,4144
   10800:	00c00044 	movi	r3,1
   10804:	10c00015 	stw	r3,0(r2)
	Delay(INA3221_DELAY);
   10808:	01009c44 	movi	r4,625
   1080c:	0010d180 	call	10d18 <Delay>
	(INA3221_SCL->DATA) = 0;
   10810:	00840c04 	movi	r2,4144
   10814:	10000015 	stw	zero,0(r2)

	// Start
	INA3221_DATA_OUT;
   10818:	00840804 	movi	r2,4128
   1081c:	00c00044 	movi	r3,1
   10820:	10c00115 	stw	r3,4(r2)
	(INA3221_SDA->DATA) = 1;
   10824:	00840804 	movi	r2,4128
   10828:	00c00044 	movi	r3,1
   1082c:	10c00015 	stw	r3,0(r2)
	Delay(INA3221_DELAY);
   10830:	01009c44 	movi	r4,625
   10834:	0010d180 	call	10d18 <Delay>
	(INA3221_SCL->DATA) = 1;
   10838:	00840c04 	movi	r2,4144
   1083c:	00c00044 	movi	r3,1
   10840:	10c00015 	stw	r3,0(r2)
	Delay(INA3221_DELAY);
   10844:	01009c44 	movi	r4,625
   10848:	0010d180 	call	10d18 <Delay>
	(INA3221_SDA->DATA) = 0;
   1084c:	00840804 	movi	r2,4128
   10850:	10000015 	stw	zero,0(r2)
	Delay(INA3221_DELAY);
   10854:	01009c44 	movi	r4,625
   10858:	0010d180 	call	10d18 <Delay>
	(INA3221_SCL->DATA) = 0;
   1085c:	00840c04 	movi	r2,4144
   10860:	10000015 	stw	zero,0(r2)

	// Operation code
	opcode = INA3221_READ_CODE;
   10864:	00bfe044 	movi	r2,-127
   10868:	e0bffdc5 	stb	r2,-9(fp)
	for(i = 0; i < 7; i++){
   1086c:	e03fff15 	stw	zero,-4(fp)
   10870:	00001206 	br	108bc <Ina3221_Reg_Read+0x268>
		(INA3221_SDA->DATA) = opcode;
   10874:	00840804 	movi	r2,4128
   10878:	e0fffdc3 	ldbu	r3,-9(fp)
   1087c:	10c00015 	stw	r3,0(r2)
		Delay(INA3221_DELAY);
   10880:	01009c44 	movi	r4,625
   10884:	0010d180 	call	10d18 <Delay>
		(INA3221_SCL->DATA) = 1;
   10888:	00840c04 	movi	r2,4144
   1088c:	00c00044 	movi	r3,1
   10890:	10c00015 	stw	r3,0(r2)
		Delay(INA3221_DELAY);
   10894:	01009c44 	movi	r4,625
   10898:	0010d180 	call	10d18 <Delay>
		(INA3221_SCL->DATA) = 0;
   1089c:	00840c04 	movi	r2,4144
   108a0:	10000015 	stw	zero,0(r2)
		opcode = opcode >> 1;
   108a4:	e0bffdc3 	ldbu	r2,-9(fp)
   108a8:	1004d07a 	srli	r2,r2,1
   108ac:	e0bffdc5 	stb	r2,-9(fp)
	for(i = 0; i < 7; i++){
   108b0:	e0bfff17 	ldw	r2,-4(fp)
   108b4:	10800044 	addi	r2,r2,1
   108b8:	e0bfff15 	stw	r2,-4(fp)
   108bc:	e0bfff17 	ldw	r2,-4(fp)
   108c0:	108001f0 	cmpltui	r2,r2,7
   108c4:	103feb1e 	bne	r2,zero,10874 <Ina3221_Reg_Read+0x220>
	}
	(INA3221_SDA->DATA) = opcode;
   108c8:	00840804 	movi	r2,4128
   108cc:	e0fffdc3 	ldbu	r3,-9(fp)
   108d0:	10c00015 	stw	r3,0(r2)
	Delay(INA3221_DELAY);
   108d4:	01009c44 	movi	r4,625
   108d8:	0010d180 	call	10d18 <Delay>
	(INA3221_SCL->DATA) = 1;
   108dc:	00840c04 	movi	r2,4144
   108e0:	00c00044 	movi	r3,1
   108e4:	10c00015 	stw	r3,0(r2)
	Delay(INA3221_DELAY);
   108e8:	01009c44 	movi	r4,625
   108ec:	0010d180 	call	10d18 <Delay>
	(INA3221_SCL->DATA) = 0;
   108f0:	00840c04 	movi	r2,4144
   108f4:	10000015 	stw	zero,0(r2)

	// Slave ACK
	INA3221_DATA_IN;
   108f8:	00840804 	movi	r2,4128
   108fc:	10000115 	stw	zero,4(r2)
	Delay(INA3221_DELAY);
   10900:	01009c44 	movi	r4,625
   10904:	0010d180 	call	10d18 <Delay>
	(INA3221_SCL->DATA) = 1;
   10908:	00840c04 	movi	r2,4144
   1090c:	00c00044 	movi	r3,1
   10910:	10c00015 	stw	r3,0(r2)
	Delay(INA3221_DELAY);
   10914:	01009c44 	movi	r4,625
   10918:	0010d180 	call	10d18 <Delay>
	(INA3221_SCL->DATA) = 0;
   1091c:	00840c04 	movi	r2,4144
   10920:	10000015 	stw	zero,0(r2)

	// Read reg's high byte
	readdata = 0;
   10924:	e03ffd0d 	sth	zero,-12(fp)
	for(j = 0; j < 8; j++){
   10928:	e03ffe15 	stw	zero,-8(fp)
   1092c:	00001606 	br	10988 <Ina3221_Reg_Read+0x334>
		Delay(INA3221_DELAY);
   10930:	01009c44 	movi	r4,625
   10934:	0010d180 	call	10d18 <Delay>
		readdata = 	readdata << 1;
   10938:	e0bffd0b 	ldhu	r2,-12(fp)
   1093c:	1085883a 	add	r2,r2,r2
   10940:	e0bffd0d 	sth	r2,-12(fp)
		readdata = ((INA3221_SDA->DATA) & 0x00000001) | readdata;
   10944:	00840804 	movi	r2,4128
   10948:	10800017 	ldw	r2,0(r2)
   1094c:	1080004c 	andi	r2,r2,1
   10950:	1007883a 	mov	r3,r2
   10954:	e0bffd0b 	ldhu	r2,-12(fp)
   10958:	10c4b03a 	or	r2,r2,r3
   1095c:	e0bffd0d 	sth	r2,-12(fp)
		(INA3221_SCL->DATA) = 1;
   10960:	00840c04 	movi	r2,4144
   10964:	00c00044 	movi	r3,1
   10968:	10c00015 	stw	r3,0(r2)
		Delay(INA3221_DELAY);
   1096c:	01009c44 	movi	r4,625
   10970:	0010d180 	call	10d18 <Delay>
		(INA3221_SCL->DATA) = 0;
   10974:	00840c04 	movi	r2,4144
   10978:	10000015 	stw	zero,0(r2)
	for(j = 0; j < 8; j++){
   1097c:	e0bffe17 	ldw	r2,-8(fp)
   10980:	10800044 	addi	r2,r2,1
   10984:	e0bffe15 	stw	r2,-8(fp)
   10988:	e0bffe17 	ldw	r2,-8(fp)
   1098c:	10800230 	cmpltui	r2,r2,8
   10990:	103fe71e 	bne	r2,zero,10930 <Ina3221_Reg_Read+0x2dc>
	}

	// Master ACK
	Delay(INA3221_DELAY);
   10994:	01009c44 	movi	r4,625
   10998:	0010d180 	call	10d18 <Delay>
	INA3221_DATA_OUT;
   1099c:	00840804 	movi	r2,4128
   109a0:	00c00044 	movi	r3,1
   109a4:	10c00115 	stw	r3,4(r2)
	(INA3221_SDA->DATA) = 0;
   109a8:	00840804 	movi	r2,4128
   109ac:	10000015 	stw	zero,0(r2)
	Delay(INA3221_DELAY);
   109b0:	01009c44 	movi	r4,625
   109b4:	0010d180 	call	10d18 <Delay>
	(INA3221_SCL->DATA) = 1;
   109b8:	00840c04 	movi	r2,4144
   109bc:	00c00044 	movi	r3,1
   109c0:	10c00015 	stw	r3,0(r2)
	Delay(INA3221_DELAY);
   109c4:	01009c44 	movi	r4,625
   109c8:	0010d180 	call	10d18 <Delay>
	(INA3221_SCL->DATA) = 0;
   109cc:	00840c04 	movi	r2,4144
   109d0:	10000015 	stw	zero,0(r2)
	INA3221_DATA_IN;
   109d4:	00840804 	movi	r2,4128
   109d8:	10000115 	stw	zero,4(r2)

	// Read reg's low byte
	for(j = 0; j < 8; j++){
   109dc:	e03ffe15 	stw	zero,-8(fp)
   109e0:	00001606 	br	10a3c <Ina3221_Reg_Read+0x3e8>
		Delay(INA3221_DELAY);
   109e4:	01009c44 	movi	r4,625
   109e8:	0010d180 	call	10d18 <Delay>
		readdata = 	readdata << 1;
   109ec:	e0bffd0b 	ldhu	r2,-12(fp)
   109f0:	1085883a 	add	r2,r2,r2
   109f4:	e0bffd0d 	sth	r2,-12(fp)
		readdata = ((INA3221_SDA->DATA) & 0x00000001) | readdata;
   109f8:	00840804 	movi	r2,4128
   109fc:	10800017 	ldw	r2,0(r2)
   10a00:	1080004c 	andi	r2,r2,1
   10a04:	1007883a 	mov	r3,r2
   10a08:	e0bffd0b 	ldhu	r2,-12(fp)
   10a0c:	10c4b03a 	or	r2,r2,r3
   10a10:	e0bffd0d 	sth	r2,-12(fp)
		(INA3221_SCL->DATA) = 1;
   10a14:	00840c04 	movi	r2,4144
   10a18:	00c00044 	movi	r3,1
   10a1c:	10c00015 	stw	r3,0(r2)
		Delay(INA3221_DELAY);
   10a20:	01009c44 	movi	r4,625
   10a24:	0010d180 	call	10d18 <Delay>
		(INA3221_SCL->DATA) = 0;
   10a28:	00840c04 	movi	r2,4144
   10a2c:	10000015 	stw	zero,0(r2)
	for(j = 0; j < 8; j++){
   10a30:	e0bffe17 	ldw	r2,-8(fp)
   10a34:	10800044 	addi	r2,r2,1
   10a38:	e0bffe15 	stw	r2,-8(fp)
   10a3c:	e0bffe17 	ldw	r2,-8(fp)
   10a40:	10800230 	cmpltui	r2,r2,8
   10a44:	103fe71e 	bne	r2,zero,109e4 <Ina3221_Reg_Read+0x390>
	}

	// Master NO ACK
	Delay(INA3221_DELAY);
   10a48:	01009c44 	movi	r4,625
   10a4c:	0010d180 	call	10d18 <Delay>
	(INA3221_SCL->DATA) = 1;
   10a50:	00840c04 	movi	r2,4144
   10a54:	00c00044 	movi	r3,1
   10a58:	10c00015 	stw	r3,0(r2)
	Delay(INA3221_DELAY);
   10a5c:	01009c44 	movi	r4,625
   10a60:	0010d180 	call	10d18 <Delay>
	(INA3221_SCL->DATA) = 0;
   10a64:	00840c04 	movi	r2,4144
   10a68:	10000015 	stw	zero,0(r2)

	// Stop
	INA3221_DATA_OUT;
   10a6c:	00840804 	movi	r2,4128
   10a70:	00c00044 	movi	r3,1
   10a74:	10c00115 	stw	r3,4(r2)
	(INA3221_SDA->DATA) = 0;
   10a78:	00840804 	movi	r2,4128
   10a7c:	10000015 	stw	zero,0(r2)
	Delay(INA3221_DELAY);
   10a80:	01009c44 	movi	r4,625
   10a84:	0010d180 	call	10d18 <Delay>
	(INA3221_SCL->DATA) = 1;
   10a88:	00840c04 	movi	r2,4144
   10a8c:	00c00044 	movi	r3,1
   10a90:	10c00015 	stw	r3,0(r2)
	Delay(INA3221_DELAY);
   10a94:	01009c44 	movi	r4,625
   10a98:	0010d180 	call	10d18 <Delay>
	(INA3221_SDA->DATA) = 1;
   10a9c:	00840804 	movi	r2,4128
   10aa0:	00c00044 	movi	r3,1
   10aa4:	10c00015 	stw	r3,0(r2)

	INA3221_DATA_IN;
   10aa8:	00840804 	movi	r2,4128
   10aac:	10000115 	stw	zero,4(r2)
	return readdata;
   10ab0:	e0bffd0b 	ldhu	r2,-12(fp)
}
   10ab4:	e037883a 	mov	sp,fp
   10ab8:	dfc00117 	ldw	ra,4(sp)
   10abc:	df000017 	ldw	fp,0(sp)
   10ac0:	dec00204 	addi	sp,sp,8
   10ac4:	f800283a 	ret

00010ac8 <Read_Ina3221_Information>:
 *         Name:  Read_Ina3221_Information
 *  Description:  read ina3221's information
 * =====================================================================================
 */
void Read_Ina3221_Information(void)
{
   10ac8:	defffe04 	addi	sp,sp,-8
   10acc:	dfc00115 	stw	ra,4(sp)
   10ad0:	df000015 	stw	fp,0(sp)
   10ad4:	d839883a 	mov	fp,sp
	printf("$-----------------------------------------------------$\n");
   10ad8:	01000074 	movhi	r4,1
   10adc:	210e6f04 	addi	r4,r4,14780
   10ae0:	0011b280 	call	11b28 <puts>
	printf("$ INA3221's Information\n");
   10ae4:	01000074 	movhi	r4,1
   10ae8:	210e7d04 	addi	r4,r4,14836
   10aec:	0011b280 	call	11b28 <puts>
	printf("$-----------------------------------------------------$\n");
   10af0:	01000074 	movhi	r4,1
   10af4:	210e6f04 	addi	r4,r4,14780
   10af8:	0011b280 	call	11b28 <puts>
	printf("$ Manufacturer ID    : %x\n", Ina3221_Reg_Read(MANUFACTURER_ID_REG));
   10afc:	01003f84 	movi	r4,254
   10b00:	00106540 	call	10654 <Ina3221_Reg_Read>
   10b04:	10bfffcc 	andi	r2,r2,65535
   10b08:	100b883a 	mov	r5,r2
   10b0c:	01000074 	movhi	r4,1
   10b10:	210e8304 	addi	r4,r4,14860
   10b14:	0011a5c0 	call	11a5c <printf>
	printf("$ Die ID             : %x\n", Ina3221_Reg_Read(DIE_ID_REG));
   10b18:	01003fc4 	movi	r4,255
   10b1c:	00106540 	call	10654 <Ina3221_Reg_Read>
   10b20:	10bfffcc 	andi	r2,r2,65535
   10b24:	100b883a 	mov	r5,r2
   10b28:	01000074 	movhi	r4,1
   10b2c:	210e8a04 	addi	r4,r4,14888
   10b30:	0011a5c0 	call	11a5c <printf>
	printf("$ Cfg Reg            : %x\n", Ina3221_Reg_Read(CONFIG_REG));
   10b34:	0009883a 	mov	r4,zero
   10b38:	00106540 	call	10654 <Ina3221_Reg_Read>
   10b3c:	10bfffcc 	andi	r2,r2,65535
   10b40:	100b883a 	mov	r5,r2
   10b44:	01000074 	movhi	r4,1
   10b48:	210e9104 	addi	r4,r4,14916
   10b4c:	0011a5c0 	call	11a5c <printf>
	printf("$ Ch1 Shunt Voltage  : %x\n", Ina3221_Reg_Read(CH1_SHUNT_VOLTAGE_REG));
   10b50:	01000044 	movi	r4,1
   10b54:	00106540 	call	10654 <Ina3221_Reg_Read>
   10b58:	10bfffcc 	andi	r2,r2,65535
   10b5c:	100b883a 	mov	r5,r2
   10b60:	01000074 	movhi	r4,1
   10b64:	210e9804 	addi	r4,r4,14944
   10b68:	0011a5c0 	call	11a5c <printf>
	printf("$ Ch1 Bus Voltage    : %x\n", Ina3221_Reg_Read(CH1_SHUNT_BUS_REG));
   10b6c:	01000084 	movi	r4,2
   10b70:	00106540 	call	10654 <Ina3221_Reg_Read>
   10b74:	10bfffcc 	andi	r2,r2,65535
   10b78:	100b883a 	mov	r5,r2
   10b7c:	01000074 	movhi	r4,1
   10b80:	210e9f04 	addi	r4,r4,14972
   10b84:	0011a5c0 	call	11a5c <printf>
	printf("$ Ch2 Shunt Voltage  : %x\n", Ina3221_Reg_Read(CH2_SHUNT_VOLTAGE_REG));
   10b88:	010000c4 	movi	r4,3
   10b8c:	00106540 	call	10654 <Ina3221_Reg_Read>
   10b90:	10bfffcc 	andi	r2,r2,65535
   10b94:	100b883a 	mov	r5,r2
   10b98:	01000074 	movhi	r4,1
   10b9c:	210ea604 	addi	r4,r4,15000
   10ba0:	0011a5c0 	call	11a5c <printf>
	printf("$ Ch2 Bus Voltage    : %x\n", Ina3221_Reg_Read(CH2_SHUNT_BUS_REG));
   10ba4:	01000104 	movi	r4,4
   10ba8:	00106540 	call	10654 <Ina3221_Reg_Read>
   10bac:	10bfffcc 	andi	r2,r2,65535
   10bb0:	100b883a 	mov	r5,r2
   10bb4:	01000074 	movhi	r4,1
   10bb8:	210ead04 	addi	r4,r4,15028
   10bbc:	0011a5c0 	call	11a5c <printf>
	printf("$ Ch3 Shunt Voltage  : %x\n", Ina3221_Reg_Read(CH3_SHUNT_VOLTAGE_REG));
   10bc0:	01000144 	movi	r4,5
   10bc4:	00106540 	call	10654 <Ina3221_Reg_Read>
   10bc8:	10bfffcc 	andi	r2,r2,65535
   10bcc:	100b883a 	mov	r5,r2
   10bd0:	01000074 	movhi	r4,1
   10bd4:	210eb404 	addi	r4,r4,15056
   10bd8:	0011a5c0 	call	11a5c <printf>
	printf("$ Ch3 Bus Voltage    : %x\n", Ina3221_Reg_Read(CH3_SHUNT_BUS_REG));
   10bdc:	01000184 	movi	r4,6
   10be0:	00106540 	call	10654 <Ina3221_Reg_Read>
   10be4:	10bfffcc 	andi	r2,r2,65535
   10be8:	100b883a 	mov	r5,r2
   10bec:	01000074 	movhi	r4,1
   10bf0:	210ebb04 	addi	r4,r4,15084
   10bf4:	0011a5c0 	call	11a5c <printf>
	printf("$-----------------------------------------------------$\n\n");
   10bf8:	01000074 	movhi	r4,1
   10bfc:	210ec204 	addi	r4,r4,15112
   10c00:	0011b280 	call	11b28 <puts>
}
   10c04:	0001883a 	nop
   10c08:	e037883a 	mov	sp,fp
   10c0c:	dfc00117 	ldw	ra,4(sp)
   10c10:	df000017 	ldw	fp,0(sp)
   10c14:	dec00204 	addi	sp,sp,8
   10c18:	f800283a 	ret

00010c1c <Power_Monitor>:
 *  Description:  moitor FA510Q's power
 * =====================================================================================
 */

void Power_Monitor(unsigned int * ch1_power,unsigned int * ch2_power, unsigned int * ch3_power)
{
   10c1c:	defff804 	addi	sp,sp,-32
   10c20:	dfc00715 	stw	ra,28(sp)
   10c24:	df000615 	stw	fp,24(sp)
   10c28:	df000604 	addi	fp,sp,24
   10c2c:	e13ffc15 	stw	r4,-16(fp)
   10c30:	e17ffb15 	stw	r5,-20(fp)
   10c34:	e1bffa15 	stw	r6,-24(fp)
	unsigned int temp;
	unsigned int current;
	unsigned int voltage;

	// Calculate ch1 power
	temp = Ina3221_Reg_Read(CH1_SHUNT_VOLTAGE_REG);
   10c38:	01000044 	movi	r4,1
   10c3c:	00106540 	call	10654 <Ina3221_Reg_Read>
   10c40:	10bfffcc 	andi	r2,r2,65535
   10c44:	e0bfff15 	stw	r2,-4(fp)
	current = (temp * 5/2);
   10c48:	e0bfff17 	ldw	r2,-4(fp)
   10c4c:	10800164 	muli	r2,r2,5
   10c50:	1004d07a 	srli	r2,r2,1
   10c54:	e0bffe15 	stw	r2,-8(fp)
	voltage = Ina3221_Reg_Read(CH1_SHUNT_BUS_REG);
   10c58:	01000084 	movi	r4,2
   10c5c:	00106540 	call	10654 <Ina3221_Reg_Read>
   10c60:	10bfffcc 	andi	r2,r2,65535
   10c64:	e0bffd15 	stw	r2,-12(fp)
	*ch1_power = current * voltage;
   10c68:	e0fffe17 	ldw	r3,-8(fp)
   10c6c:	e0bffd17 	ldw	r2,-12(fp)
   10c70:	1887383a 	mul	r3,r3,r2
   10c74:	e0bffc17 	ldw	r2,-16(fp)
   10c78:	10c00015 	stw	r3,0(r2)

	// Calculate ch2 power
	temp = Ina3221_Reg_Read(CH2_SHUNT_VOLTAGE_REG);
   10c7c:	010000c4 	movi	r4,3
   10c80:	00106540 	call	10654 <Ina3221_Reg_Read>
   10c84:	10bfffcc 	andi	r2,r2,65535
   10c88:	e0bfff15 	stw	r2,-4(fp)
	current = (temp * 5 / 2);
   10c8c:	e0bfff17 	ldw	r2,-4(fp)
   10c90:	10800164 	muli	r2,r2,5
   10c94:	1004d07a 	srli	r2,r2,1
   10c98:	e0bffe15 	stw	r2,-8(fp)
	voltage = Ina3221_Reg_Read(CH2_SHUNT_BUS_REG);
   10c9c:	01000104 	movi	r4,4
   10ca0:	00106540 	call	10654 <Ina3221_Reg_Read>
   10ca4:	10bfffcc 	andi	r2,r2,65535
   10ca8:	e0bffd15 	stw	r2,-12(fp)
	*ch2_power = current * voltage;
   10cac:	e0fffe17 	ldw	r3,-8(fp)
   10cb0:	e0bffd17 	ldw	r2,-12(fp)
   10cb4:	1887383a 	mul	r3,r3,r2
   10cb8:	e0bffb17 	ldw	r2,-20(fp)
   10cbc:	10c00015 	stw	r3,0(r2)

	// Calculate ch3 power
	temp = Ina3221_Reg_Read(CH3_SHUNT_VOLTAGE_REG);
   10cc0:	01000144 	movi	r4,5
   10cc4:	00106540 	call	10654 <Ina3221_Reg_Read>
   10cc8:	10bfffcc 	andi	r2,r2,65535
   10ccc:	e0bfff15 	stw	r2,-4(fp)
	current = (temp * 5);
   10cd0:	e0bfff17 	ldw	r2,-4(fp)
   10cd4:	10800164 	muli	r2,r2,5
   10cd8:	e0bffe15 	stw	r2,-8(fp)
	voltage = Ina3221_Reg_Read(CH3_SHUNT_BUS_REG);
   10cdc:	01000184 	movi	r4,6
   10ce0:	00106540 	call	10654 <Ina3221_Reg_Read>
   10ce4:	10bfffcc 	andi	r2,r2,65535
   10ce8:	e0bffd15 	stw	r2,-12(fp)
	*ch3_power = current * voltage;
   10cec:	e0fffe17 	ldw	r3,-8(fp)
   10cf0:	e0bffd17 	ldw	r2,-12(fp)
   10cf4:	1887383a 	mul	r3,r3,r2
   10cf8:	e0bffa17 	ldw	r2,-24(fp)
   10cfc:	10c00015 	stw	r3,0(r2)
}
   10d00:	0001883a 	nop
   10d04:	e037883a 	mov	sp,fp
   10d08:	dfc00117 	ldw	ra,4(sp)
   10d0c:	df000017 	ldw	fp,0(sp)
   10d10:	dec00204 	addi	sp,sp,8
   10d14:	f800283a 	ret

00010d18 <Delay>:
 *         Name:  Delay
 *  Description:
 * =====================================================================================
 */
void Delay(unsigned int dly)
{
   10d18:	defffe04 	addi	sp,sp,-8
   10d1c:	df000115 	stw	fp,4(sp)
   10d20:	df000104 	addi	fp,sp,4
   10d24:	e13fff15 	stw	r4,-4(fp)
	for(; dly>0; dly--);
   10d28:	00000306 	br	10d38 <Delay+0x20>
   10d2c:	e0bfff17 	ldw	r2,-4(fp)
   10d30:	10bfffc4 	addi	r2,r2,-1
   10d34:	e0bfff15 	stw	r2,-4(fp)
   10d38:	e0bfff17 	ldw	r2,-4(fp)
   10d3c:	103ffb1e 	bne	r2,zero,10d2c <Delay+0x14>
}
   10d40:	0001883a 	nop
   10d44:	e037883a 	mov	sp,fp
   10d48:	df000017 	ldw	fp,0(sp)
   10d4c:	dec00104 	addi	sp,sp,4
   10d50:	f800283a 	ret

00010d54 <Tmp513_Reg_Write>:
 *         Name:  Tmp513_Reg_Write
 *  Description:  Write tmp513's register
 * =====================================================================================
 */ 
void Tmp513_Reg_Write(unsigned char regaddr, unsigned short regdata) 
{ 
   10d54:	defff904 	addi	sp,sp,-28
   10d58:	dfc00615 	stw	ra,24(sp)
   10d5c:	df000515 	stw	fp,20(sp)
   10d60:	df000504 	addi	fp,sp,20
   10d64:	2005883a 	mov	r2,r4
   10d68:	2807883a 	mov	r3,r5
   10d6c:	e0bffc05 	stb	r2,-16(fp)
   10d70:	1805883a 	mov	r2,r3
   10d74:	e0bffb0d 	sth	r2,-20(fp)
	unsigned int j;
	unsigned char opcode;
	unsigned char low_regdata;
	unsigned char high_regdata;
	
	low_regdata = regdata & 0xff;
   10d78:	e0bffb0b 	ldhu	r2,-20(fp)
   10d7c:	e0bffd85 	stb	r2,-10(fp)
	high_regdata = (regdata >> 8) & 0xff;
   10d80:	e0bffb0b 	ldhu	r2,-20(fp)
   10d84:	1004d23a 	srli	r2,r2,8
   10d88:	e0bffd45 	stb	r2,-11(fp)

	TMP513_DATA_OUT;
   10d8c:	00840804 	movi	r2,4128
   10d90:	00c00044 	movi	r3,1
   10d94:	10c00115 	stw	r3,4(r2)

	// START
	(TMP513_SDA->DATA) = 0;
   10d98:	00840804 	movi	r2,4128
   10d9c:	10000015 	stw	zero,0(r2)
	Delay(TMP513_DELAY);
   10da0:	01009c44 	movi	r4,625
   10da4:	0010d180 	call	10d18 <Delay>
	(TMP513_SCL->DATA) = 0;
   10da8:	00840c04 	movi	r2,4144
   10dac:	10000015 	stw	zero,0(r2)

	opcode = TMP513_WRITE_CODE;
   10db0:	00800744 	movi	r2,29
   10db4:	e0bffdc5 	stb	r2,-9(fp)

	// Operation code
	for(i = 0; i < 7; i++){
   10db8:	e03fff15 	stw	zero,-4(fp)
   10dbc:	00001206 	br	10e08 <Tmp513_Reg_Write+0xb4>
		(TMP513_SDA->DATA) = opcode;
   10dc0:	00840804 	movi	r2,4128
   10dc4:	e0fffdc3 	ldbu	r3,-9(fp)
   10dc8:	10c00015 	stw	r3,0(r2)
		Delay(TMP513_DELAY);
   10dcc:	01009c44 	movi	r4,625
   10dd0:	0010d180 	call	10d18 <Delay>
		(TMP513_SCL->DATA) = 1;
   10dd4:	00840c04 	movi	r2,4144
   10dd8:	00c00044 	movi	r3,1
   10ddc:	10c00015 	stw	r3,0(r2)
		Delay(TMP513_DELAY);
   10de0:	01009c44 	movi	r4,625
   10de4:	0010d180 	call	10d18 <Delay>
		(TMP513_SCL->DATA) = 0;
   10de8:	00840c04 	movi	r2,4144
   10dec:	10000015 	stw	zero,0(r2)
		opcode = opcode >> 1;
   10df0:	e0bffdc3 	ldbu	r2,-9(fp)
   10df4:	1004d07a 	srli	r2,r2,1
   10df8:	e0bffdc5 	stb	r2,-9(fp)
	for(i = 0; i < 7; i++){
   10dfc:	e0bfff17 	ldw	r2,-4(fp)
   10e00:	10800044 	addi	r2,r2,1
   10e04:	e0bfff15 	stw	r2,-4(fp)
   10e08:	e0bfff17 	ldw	r2,-4(fp)
   10e0c:	108001f0 	cmpltui	r2,r2,7
   10e10:	103feb1e 	bne	r2,zero,10dc0 <Tmp513_Reg_Write+0x6c>
	}
	(TMP513_SDA->DATA) = opcode;
   10e14:	00840804 	movi	r2,4128
   10e18:	e0fffdc3 	ldbu	r3,-9(fp)
   10e1c:	10c00015 	stw	r3,0(r2)
	Delay(TMP513_DELAY);
   10e20:	01009c44 	movi	r4,625
   10e24:	0010d180 	call	10d18 <Delay>
	(TMP513_SCL->DATA) = 1;
   10e28:	00840c04 	movi	r2,4144
   10e2c:	00c00044 	movi	r3,1
   10e30:	10c00015 	stw	r3,0(r2)
	Delay(TMP513_DELAY);
   10e34:	01009c44 	movi	r4,625
   10e38:	0010d180 	call	10d18 <Delay>
	(TMP513_SCL->DATA) = 0;
   10e3c:	00840c04 	movi	r2,4144
   10e40:	10000015 	stw	zero,0(r2)

	// Slave ACK
	TMP513_DATA_IN;
   10e44:	00840804 	movi	r2,4128
   10e48:	10000115 	stw	zero,4(r2)
	Delay(TMP513_DELAY);
   10e4c:	01009c44 	movi	r4,625
   10e50:	0010d180 	call	10d18 <Delay>
	(TMP513_SCL->DATA) = 1;
   10e54:	00840c04 	movi	r2,4144
   10e58:	00c00044 	movi	r3,1
   10e5c:	10c00015 	stw	r3,0(r2)
	Delay(TMP513_DELAY);
   10e60:	01009c44 	movi	r4,625
   10e64:	0010d180 	call	10d18 <Delay>
	(TMP513_SCL->DATA) = 0;
   10e68:	00840c04 	movi	r2,4144
   10e6c:	10000015 	stw	zero,0(r2)

	// Reg address
	TMP513_DATA_OUT;
   10e70:	00840804 	movi	r2,4128
   10e74:	00c00044 	movi	r3,1
   10e78:	10c00115 	stw	r3,4(r2)
	for(i = 0; i < 7; i++){
   10e7c:	e03fff15 	stw	zero,-4(fp)
   10e80:	00001306 	br	10ed0 <Tmp513_Reg_Write+0x17c>
		(TMP513_SDA->DATA) = (regaddr >> (7-i));
   10e84:	e0fffc03 	ldbu	r3,-16(fp)
   10e88:	010001c4 	movi	r4,7
   10e8c:	e0bfff17 	ldw	r2,-4(fp)
   10e90:	2085c83a 	sub	r2,r4,r2
   10e94:	1887d83a 	sra	r3,r3,r2
   10e98:	00840804 	movi	r2,4128
   10e9c:	10c00015 	stw	r3,0(r2)
		Delay(TMP513_DELAY);
   10ea0:	01009c44 	movi	r4,625
   10ea4:	0010d180 	call	10d18 <Delay>
		(TMP513_SCL->DATA) = 1;
   10ea8:	00840c04 	movi	r2,4144
   10eac:	00c00044 	movi	r3,1
   10eb0:	10c00015 	stw	r3,0(r2)
		Delay(TMP513_DELAY);
   10eb4:	01009c44 	movi	r4,625
   10eb8:	0010d180 	call	10d18 <Delay>
		(TMP513_SCL->DATA) = 0;
   10ebc:	00840c04 	movi	r2,4144
   10ec0:	10000015 	stw	zero,0(r2)
	for(i = 0; i < 7; i++){
   10ec4:	e0bfff17 	ldw	r2,-4(fp)
   10ec8:	10800044 	addi	r2,r2,1
   10ecc:	e0bfff15 	stw	r2,-4(fp)
   10ed0:	e0bfff17 	ldw	r2,-4(fp)
   10ed4:	108001f0 	cmpltui	r2,r2,7
   10ed8:	103fea1e 	bne	r2,zero,10e84 <Tmp513_Reg_Write+0x130>
	}
	(TMP513_SDA->DATA) = regaddr;
   10edc:	00840804 	movi	r2,4128
   10ee0:	e0fffc03 	ldbu	r3,-16(fp)
   10ee4:	10c00015 	stw	r3,0(r2)
	Delay(TMP513_DELAY);
   10ee8:	01009c44 	movi	r4,625
   10eec:	0010d180 	call	10d18 <Delay>
	(TMP513_SCL->DATA) = 1;
   10ef0:	00840c04 	movi	r2,4144
   10ef4:	00c00044 	movi	r3,1
   10ef8:	10c00015 	stw	r3,0(r2)
	Delay(TMP513_DELAY);
   10efc:	01009c44 	movi	r4,625
   10f00:	0010d180 	call	10d18 <Delay>
	(TMP513_SCL->DATA) = 0;
   10f04:	00840c04 	movi	r2,4144
   10f08:	10000015 	stw	zero,0(r2)

	// Slave ACK
	TMP513_DATA_IN;
   10f0c:	00840804 	movi	r2,4128
   10f10:	10000115 	stw	zero,4(r2)
	Delay(TMP513_DELAY);
   10f14:	01009c44 	movi	r4,625
   10f18:	0010d180 	call	10d18 <Delay>
	(TMP513_SCL->DATA) = 1;
   10f1c:	00840c04 	movi	r2,4144
   10f20:	00c00044 	movi	r3,1
   10f24:	10c00015 	stw	r3,0(r2)
	Delay(TMP513_DELAY);
   10f28:	01009c44 	movi	r4,625
   10f2c:	0010d180 	call	10d18 <Delay>
	(TMP513_SCL->DATA) = 0;
   10f30:	00840c04 	movi	r2,4144
   10f34:	10000015 	stw	zero,0(r2)

	// Write high byte
	TMP513_DATA_OUT;
   10f38:	00840804 	movi	r2,4128
   10f3c:	00c00044 	movi	r3,1
   10f40:	10c00115 	stw	r3,4(r2)
	for(j = 0; j < 7; j++){
   10f44:	e03ffe15 	stw	zero,-8(fp)
   10f48:	00001306 	br	10f98 <Tmp513_Reg_Write+0x244>
		(TMP513_SDA->DATA) = (high_regdata >> (7 - j));
   10f4c:	e0fffd43 	ldbu	r3,-11(fp)
   10f50:	010001c4 	movi	r4,7
   10f54:	e0bffe17 	ldw	r2,-8(fp)
   10f58:	2085c83a 	sub	r2,r4,r2
   10f5c:	1887d83a 	sra	r3,r3,r2
   10f60:	00840804 	movi	r2,4128
   10f64:	10c00015 	stw	r3,0(r2)
		Delay(TMP513_DELAY);
   10f68:	01009c44 	movi	r4,625
   10f6c:	0010d180 	call	10d18 <Delay>
		(TMP513_SCL->DATA) = 1;
   10f70:	00840c04 	movi	r2,4144
   10f74:	00c00044 	movi	r3,1
   10f78:	10c00015 	stw	r3,0(r2)
		Delay(TMP513_DELAY);
   10f7c:	01009c44 	movi	r4,625
   10f80:	0010d180 	call	10d18 <Delay>
		(TMP513_SCL->DATA) = 0;
   10f84:	00840c04 	movi	r2,4144
   10f88:	10000015 	stw	zero,0(r2)
	for(j = 0; j < 7; j++){
   10f8c:	e0bffe17 	ldw	r2,-8(fp)
   10f90:	10800044 	addi	r2,r2,1
   10f94:	e0bffe15 	stw	r2,-8(fp)
   10f98:	e0bffe17 	ldw	r2,-8(fp)
   10f9c:	108001f0 	cmpltui	r2,r2,7
   10fa0:	103fea1e 	bne	r2,zero,10f4c <Tmp513_Reg_Write+0x1f8>
	}
	(TMP513_SDA->DATA) = high_regdata;
   10fa4:	00840804 	movi	r2,4128
   10fa8:	e0fffd43 	ldbu	r3,-11(fp)
   10fac:	10c00015 	stw	r3,0(r2)
	Delay(TMP513_DELAY);
   10fb0:	01009c44 	movi	r4,625
   10fb4:	0010d180 	call	10d18 <Delay>
	(TMP513_SCL->DATA) = 1;
   10fb8:	00840c04 	movi	r2,4144
   10fbc:	00c00044 	movi	r3,1
   10fc0:	10c00015 	stw	r3,0(r2)
	Delay(TMP513_DELAY);
   10fc4:	01009c44 	movi	r4,625
   10fc8:	0010d180 	call	10d18 <Delay>
	(TMP513_SCL->DATA) = 0;
   10fcc:	00840c04 	movi	r2,4144
   10fd0:	10000015 	stw	zero,0(r2)

	// Slave ACK
	TMP513_DATA_IN;
   10fd4:	00840804 	movi	r2,4128
   10fd8:	10000115 	stw	zero,4(r2)
	Delay(TMP513_DELAY);
   10fdc:	01009c44 	movi	r4,625
   10fe0:	0010d180 	call	10d18 <Delay>
	(TMP513_SCL->DATA) = 1;
   10fe4:	00840c04 	movi	r2,4144
   10fe8:	00c00044 	movi	r3,1
   10fec:	10c00015 	stw	r3,0(r2)
	Delay(TMP513_DELAY);
   10ff0:	01009c44 	movi	r4,625
   10ff4:	0010d180 	call	10d18 <Delay>
	(TMP513_SCL->DATA) = 0;
   10ff8:	00840c04 	movi	r2,4144
   10ffc:	10000015 	stw	zero,0(r2)
	
	// Write low byte
	TMP513_DATA_OUT;
   11000:	00840804 	movi	r2,4128
   11004:	00c00044 	movi	r3,1
   11008:	10c00115 	stw	r3,4(r2)
	for(j = 0; j < 7; j++){
   1100c:	e03ffe15 	stw	zero,-8(fp)
   11010:	00001306 	br	11060 <Tmp513_Reg_Write+0x30c>
		(TMP513_SDA->DATA) = (low_regdata >> (7 - j));
   11014:	e0fffd83 	ldbu	r3,-10(fp)
   11018:	010001c4 	movi	r4,7
   1101c:	e0bffe17 	ldw	r2,-8(fp)
   11020:	2085c83a 	sub	r2,r4,r2
   11024:	1887d83a 	sra	r3,r3,r2
   11028:	00840804 	movi	r2,4128
   1102c:	10c00015 	stw	r3,0(r2)
		Delay(TMP513_DELAY);
   11030:	01009c44 	movi	r4,625
   11034:	0010d180 	call	10d18 <Delay>
		(TMP513_SCL->DATA) = 1;
   11038:	00840c04 	movi	r2,4144
   1103c:	00c00044 	movi	r3,1
   11040:	10c00015 	stw	r3,0(r2)
		Delay(TMP513_DELAY);
   11044:	01009c44 	movi	r4,625
   11048:	0010d180 	call	10d18 <Delay>
		(TMP513_SCL->DATA) = 0;
   1104c:	00840c04 	movi	r2,4144
   11050:	10000015 	stw	zero,0(r2)
	for(j = 0; j < 7; j++){
   11054:	e0bffe17 	ldw	r2,-8(fp)
   11058:	10800044 	addi	r2,r2,1
   1105c:	e0bffe15 	stw	r2,-8(fp)
   11060:	e0bffe17 	ldw	r2,-8(fp)
   11064:	108001f0 	cmpltui	r2,r2,7
   11068:	103fea1e 	bne	r2,zero,11014 <Tmp513_Reg_Write+0x2c0>
	}
	(TMP513_SDA->DATA) = low_regdata;
   1106c:	00840804 	movi	r2,4128
   11070:	e0fffd83 	ldbu	r3,-10(fp)
   11074:	10c00015 	stw	r3,0(r2)
	Delay(TMP513_DELAY);
   11078:	01009c44 	movi	r4,625
   1107c:	0010d180 	call	10d18 <Delay>
	(TMP513_SCL->DATA) = 1;
   11080:	00840c04 	movi	r2,4144
   11084:	00c00044 	movi	r3,1
   11088:	10c00015 	stw	r3,0(r2)
	Delay(TMP513_DELAY);
   1108c:	01009c44 	movi	r4,625
   11090:	0010d180 	call	10d18 <Delay>
	(TMP513_SCL->DATA) = 0;
   11094:	00840c04 	movi	r2,4144
   11098:	10000015 	stw	zero,0(r2)

	// Slave ACK
	TMP513_DATA_IN;
   1109c:	00840804 	movi	r2,4128
   110a0:	10000115 	stw	zero,4(r2)
	Delay(TMP513_DELAY);
   110a4:	01009c44 	movi	r4,625
   110a8:	0010d180 	call	10d18 <Delay>
	(TMP513_SCL->DATA) = 1;
   110ac:	00840c04 	movi	r2,4144
   110b0:	00c00044 	movi	r3,1
   110b4:	10c00015 	stw	r3,0(r2)
	Delay(TMP513_DELAY);
   110b8:	01009c44 	movi	r4,625
   110bc:	0010d180 	call	10d18 <Delay>
	(TMP513_SCL->DATA) = 0;
   110c0:	00840c04 	movi	r2,4144
   110c4:	10000015 	stw	zero,0(r2)

	// Stop
	TMP513_DATA_OUT;
   110c8:	00840804 	movi	r2,4128
   110cc:	00c00044 	movi	r3,1
   110d0:	10c00115 	stw	r3,4(r2)
	(TMP513_SDA->DATA) = 0;
   110d4:	00840804 	movi	r2,4128
   110d8:	10000015 	stw	zero,0(r2)
	Delay(TMP513_DELAY);
   110dc:	01009c44 	movi	r4,625
   110e0:	0010d180 	call	10d18 <Delay>
	(TMP513_SCL->DATA) = 1;
   110e4:	00840c04 	movi	r2,4144
   110e8:	00c00044 	movi	r3,1
   110ec:	10c00015 	stw	r3,0(r2)
	Delay(TMP513_DELAY);
   110f0:	01009c44 	movi	r4,625
   110f4:	0010d180 	call	10d18 <Delay>
	(TMP513_SDA->DATA) = 1;
   110f8:	00840804 	movi	r2,4128
   110fc:	00c00044 	movi	r3,1
   11100:	10c00015 	stw	r3,0(r2)

	TMP513_DATA_IN;
   11104:	00840804 	movi	r2,4128
   11108:	10000115 	stw	zero,4(r2)
}
   1110c:	0001883a 	nop
   11110:	e037883a 	mov	sp,fp
   11114:	dfc00117 	ldw	ra,4(sp)
   11118:	df000017 	ldw	fp,0(sp)
   1111c:	dec00204 	addi	sp,sp,8
   11120:	f800283a 	ret

00011124 <Tmp513_Reg_Read>:
 *         Name:  Tmp513_Reg_Read
 *  Description:  read tmp513's register
 * =====================================================================================
 */ 
unsigned short Tmp513_Reg_Read(unsigned char regaddr) 
{ 
   11124:	defffa04 	addi	sp,sp,-24
   11128:	dfc00515 	stw	ra,20(sp)
   1112c:	df000415 	stw	fp,16(sp)
   11130:	df000404 	addi	fp,sp,16
   11134:	2005883a 	mov	r2,r4
   11138:	e0bffc05 	stb	r2,-16(fp)
	unsigned int j;
	unsigned char opcode;
	unsigned short readdata;

	// Register pointer set
	TMP513_DATA_OUT;
   1113c:	00840804 	movi	r2,4128
   11140:	00c00044 	movi	r3,1
   11144:	10c00115 	stw	r3,4(r2)
	
	// START
	(TMP513_SDA->DATA) = 0;
   11148:	00840804 	movi	r2,4128
   1114c:	10000015 	stw	zero,0(r2)
	Delay(TMP513_DELAY);
   11150:	01009c44 	movi	r4,625
   11154:	0010d180 	call	10d18 <Delay>
	(TMP513_SCL->DATA) = 0;
   11158:	00840c04 	movi	r2,4144
   1115c:	10000015 	stw	zero,0(r2)

	// Operation code
	opcode = TMP513_WRITE_CODE;
   11160:	00800744 	movi	r2,29
   11164:	e0bffdc5 	stb	r2,-9(fp)
	for(i = 0; i < 7; i++){
   11168:	e03fff15 	stw	zero,-4(fp)
   1116c:	00001206 	br	111b8 <Tmp513_Reg_Read+0x94>
		(TMP513_SDA->DATA) = opcode;
   11170:	00840804 	movi	r2,4128
   11174:	e0fffdc3 	ldbu	r3,-9(fp)
   11178:	10c00015 	stw	r3,0(r2)
		Delay(TMP513_DELAY);
   1117c:	01009c44 	movi	r4,625
   11180:	0010d180 	call	10d18 <Delay>
		(TMP513_SCL->DATA) = 1;
   11184:	00840c04 	movi	r2,4144
   11188:	00c00044 	movi	r3,1
   1118c:	10c00015 	stw	r3,0(r2)
		Delay(TMP513_DELAY);
   11190:	01009c44 	movi	r4,625
   11194:	0010d180 	call	10d18 <Delay>
		(TMP513_SCL->DATA) = 0;
   11198:	00840c04 	movi	r2,4144
   1119c:	10000015 	stw	zero,0(r2)
		opcode = opcode >> 1;
   111a0:	e0bffdc3 	ldbu	r2,-9(fp)
   111a4:	1004d07a 	srli	r2,r2,1
   111a8:	e0bffdc5 	stb	r2,-9(fp)
	for(i = 0; i < 7; i++){
   111ac:	e0bfff17 	ldw	r2,-4(fp)
   111b0:	10800044 	addi	r2,r2,1
   111b4:	e0bfff15 	stw	r2,-4(fp)
   111b8:	e0bfff17 	ldw	r2,-4(fp)
   111bc:	108001f0 	cmpltui	r2,r2,7
   111c0:	103feb1e 	bne	r2,zero,11170 <Tmp513_Reg_Read+0x4c>
	}
	(TMP513_SDA->DATA) = opcode;
   111c4:	00840804 	movi	r2,4128
   111c8:	e0fffdc3 	ldbu	r3,-9(fp)
   111cc:	10c00015 	stw	r3,0(r2)
	Delay(TMP513_DELAY);
   111d0:	01009c44 	movi	r4,625
   111d4:	0010d180 	call	10d18 <Delay>
	(TMP513_SCL->DATA) = 1;
   111d8:	00840c04 	movi	r2,4144
   111dc:	00c00044 	movi	r3,1
   111e0:	10c00015 	stw	r3,0(r2)
	Delay(TMP513_DELAY);
   111e4:	01009c44 	movi	r4,625
   111e8:	0010d180 	call	10d18 <Delay>
	(TMP513_SCL->DATA) = 0;
   111ec:	00840c04 	movi	r2,4144
   111f0:	10000015 	stw	zero,0(r2)

	// Slave ACK
	TMP513_DATA_IN;
   111f4:	00840804 	movi	r2,4128
   111f8:	10000115 	stw	zero,4(r2)
	Delay(TMP513_DELAY);
   111fc:	01009c44 	movi	r4,625
   11200:	0010d180 	call	10d18 <Delay>
	(TMP513_SCL->DATA) = 1;
   11204:	00840c04 	movi	r2,4144
   11208:	00c00044 	movi	r3,1
   1120c:	10c00015 	stw	r3,0(r2)
	Delay(TMP513_DELAY);
   11210:	01009c44 	movi	r4,625
   11214:	0010d180 	call	10d18 <Delay>
	(TMP513_SCL->DATA) = 0;
   11218:	00840c04 	movi	r2,4144
   1121c:	10000015 	stw	zero,0(r2)

	// Reg address
	TMP513_DATA_OUT;
   11220:	00840804 	movi	r2,4128
   11224:	00c00044 	movi	r3,1
   11228:	10c00115 	stw	r3,4(r2)
	for(i = 0; i < 7; i++){
   1122c:	e03fff15 	stw	zero,-4(fp)
   11230:	00001306 	br	11280 <Tmp513_Reg_Read+0x15c>
		(TMP513_SDA->DATA) = (regaddr >> (7-i));
   11234:	e0fffc03 	ldbu	r3,-16(fp)
   11238:	010001c4 	movi	r4,7
   1123c:	e0bfff17 	ldw	r2,-4(fp)
   11240:	2085c83a 	sub	r2,r4,r2
   11244:	1887d83a 	sra	r3,r3,r2
   11248:	00840804 	movi	r2,4128
   1124c:	10c00015 	stw	r3,0(r2)
		Delay(TMP513_DELAY);
   11250:	01009c44 	movi	r4,625
   11254:	0010d180 	call	10d18 <Delay>
		(TMP513_SCL->DATA) = 1;
   11258:	00840c04 	movi	r2,4144
   1125c:	00c00044 	movi	r3,1
   11260:	10c00015 	stw	r3,0(r2)
		Delay(TMP513_DELAY);
   11264:	01009c44 	movi	r4,625
   11268:	0010d180 	call	10d18 <Delay>
		(TMP513_SCL->DATA) = 0;
   1126c:	00840c04 	movi	r2,4144
   11270:	10000015 	stw	zero,0(r2)
	for(i = 0; i < 7; i++){
   11274:	e0bfff17 	ldw	r2,-4(fp)
   11278:	10800044 	addi	r2,r2,1
   1127c:	e0bfff15 	stw	r2,-4(fp)
   11280:	e0bfff17 	ldw	r2,-4(fp)
   11284:	108001f0 	cmpltui	r2,r2,7
   11288:	103fea1e 	bne	r2,zero,11234 <Tmp513_Reg_Read+0x110>
	}
	(TMP513_SDA->DATA) = regaddr;
   1128c:	00840804 	movi	r2,4128
   11290:	e0fffc03 	ldbu	r3,-16(fp)
   11294:	10c00015 	stw	r3,0(r2)
	Delay(TMP513_DELAY);
   11298:	01009c44 	movi	r4,625
   1129c:	0010d180 	call	10d18 <Delay>
	(TMP513_SCL->DATA) = 1;
   112a0:	00840c04 	movi	r2,4144
   112a4:	00c00044 	movi	r3,1
   112a8:	10c00015 	stw	r3,0(r2)
	Delay(TMP513_DELAY);
   112ac:	01009c44 	movi	r4,625
   112b0:	0010d180 	call	10d18 <Delay>
	(TMP513_SCL->DATA) = 0;
   112b4:	00840c04 	movi	r2,4144
   112b8:	10000015 	stw	zero,0(r2)

	// Slave ACK
	TMP513_DATA_IN;
   112bc:	00840804 	movi	r2,4128
   112c0:	10000115 	stw	zero,4(r2)
	Delay(TMP513_DELAY);
   112c4:	01009c44 	movi	r4,625
   112c8:	0010d180 	call	10d18 <Delay>
	(TMP513_SCL->DATA) = 1;
   112cc:	00840c04 	movi	r2,4144
   112d0:	00c00044 	movi	r3,1
   112d4:	10c00015 	stw	r3,0(r2)
	Delay(TMP513_DELAY);
   112d8:	01009c44 	movi	r4,625
   112dc:	0010d180 	call	10d18 <Delay>
	(TMP513_SCL->DATA) = 0;
   112e0:	00840c04 	movi	r2,4144
   112e4:	10000015 	stw	zero,0(r2)
	
	// Stop
	Delay(TMP513_DELAY);
   112e8:	01009c44 	movi	r4,625
   112ec:	0010d180 	call	10d18 <Delay>
	TMP513_DATA_OUT;
   112f0:	00840804 	movi	r2,4128
   112f4:	00c00044 	movi	r3,1
   112f8:	10c00115 	stw	r3,4(r2)
	(TMP513_SDA->DATA) = 0;
   112fc:	00840804 	movi	r2,4128
   11300:	10000015 	stw	zero,0(r2)
	Delay(TMP513_DELAY);
   11304:	01009c44 	movi	r4,625
   11308:	0010d180 	call	10d18 <Delay>
	(TMP513_SCL->DATA) = 1;
   1130c:	00840c04 	movi	r2,4144
   11310:	00c00044 	movi	r3,1
   11314:	10c00015 	stw	r3,0(r2)
	Delay(TMP513_DELAY);
   11318:	01009c44 	movi	r4,625
   1131c:	0010d180 	call	10d18 <Delay>
	(TMP513_SDA->DATA) = 1;
   11320:	00840804 	movi	r2,4128
   11324:	00c00044 	movi	r3,1
   11328:	10c00015 	stw	r3,0(r2)
	TMP513_DATA_IN;
   1132c:	00840804 	movi	r2,4128
   11330:	10000115 	stw	zero,4(r2)

	// Read register
	// Start
	TMP513_DATA_OUT;
   11334:	00840804 	movi	r2,4128
   11338:	00c00044 	movi	r3,1
   1133c:	10c00115 	stw	r3,4(r2)
	Delay(TMP513_DELAY);
   11340:	01009c44 	movi	r4,625
   11344:	0010d180 	call	10d18 <Delay>
	(TMP513_SDA->DATA) = 0;
   11348:	00840804 	movi	r2,4128
   1134c:	10000015 	stw	zero,0(r2)
	Delay(TMP513_DELAY);
   11350:	01009c44 	movi	r4,625
   11354:	0010d180 	call	10d18 <Delay>
	(TMP513_SCL->DATA) = 0;
   11358:	00840c04 	movi	r2,4144
   1135c:	10000015 	stw	zero,0(r2)

	// Operation code
	opcode = TMP513_READ_CODE;
   11360:	00bfe744 	movi	r2,-99
   11364:	e0bffdc5 	stb	r2,-9(fp)
	for(i = 0; i < 7; i++){
   11368:	e03fff15 	stw	zero,-4(fp)
   1136c:	00001206 	br	113b8 <Tmp513_Reg_Read+0x294>
		(TMP513_SDA->DATA) = opcode;
   11370:	00840804 	movi	r2,4128
   11374:	e0fffdc3 	ldbu	r3,-9(fp)
   11378:	10c00015 	stw	r3,0(r2)
		Delay(TMP513_DELAY);
   1137c:	01009c44 	movi	r4,625
   11380:	0010d180 	call	10d18 <Delay>
		(TMP513_SCL->DATA) = 1;
   11384:	00840c04 	movi	r2,4144
   11388:	00c00044 	movi	r3,1
   1138c:	10c00015 	stw	r3,0(r2)
		Delay(TMP513_DELAY);
   11390:	01009c44 	movi	r4,625
   11394:	0010d180 	call	10d18 <Delay>
		(TMP513_SCL->DATA) = 0;
   11398:	00840c04 	movi	r2,4144
   1139c:	10000015 	stw	zero,0(r2)
		opcode = opcode >> 1;
   113a0:	e0bffdc3 	ldbu	r2,-9(fp)
   113a4:	1004d07a 	srli	r2,r2,1
   113a8:	e0bffdc5 	stb	r2,-9(fp)
	for(i = 0; i < 7; i++){
   113ac:	e0bfff17 	ldw	r2,-4(fp)
   113b0:	10800044 	addi	r2,r2,1
   113b4:	e0bfff15 	stw	r2,-4(fp)
   113b8:	e0bfff17 	ldw	r2,-4(fp)
   113bc:	108001f0 	cmpltui	r2,r2,7
   113c0:	103feb1e 	bne	r2,zero,11370 <Tmp513_Reg_Read+0x24c>
	}
	(TMP513_SDA->DATA) = opcode;
   113c4:	00840804 	movi	r2,4128
   113c8:	e0fffdc3 	ldbu	r3,-9(fp)
   113cc:	10c00015 	stw	r3,0(r2)
	Delay(TMP513_DELAY);
   113d0:	01009c44 	movi	r4,625
   113d4:	0010d180 	call	10d18 <Delay>
	(TMP513_SCL->DATA) = 1;
   113d8:	00840c04 	movi	r2,4144
   113dc:	00c00044 	movi	r3,1
   113e0:	10c00015 	stw	r3,0(r2)
	Delay(TMP513_DELAY);
   113e4:	01009c44 	movi	r4,625
   113e8:	0010d180 	call	10d18 <Delay>
	(TMP513_SCL->DATA) = 0;
   113ec:	00840c04 	movi	r2,4144
   113f0:	10000015 	stw	zero,0(r2)

	// Slave ACK
	TMP513_DATA_IN;
   113f4:	00840804 	movi	r2,4128
   113f8:	10000115 	stw	zero,4(r2)
	Delay(TMP513_DELAY);
   113fc:	01009c44 	movi	r4,625
   11400:	0010d180 	call	10d18 <Delay>
	(TMP513_SCL->DATA) = 1;
   11404:	00840c04 	movi	r2,4144
   11408:	00c00044 	movi	r3,1
   1140c:	10c00015 	stw	r3,0(r2)
	Delay(TMP513_DELAY);
   11410:	01009c44 	movi	r4,625
   11414:	0010d180 	call	10d18 <Delay>
	(TMP513_SCL->DATA) = 0;
   11418:	00840c04 	movi	r2,4144
   1141c:	10000015 	stw	zero,0(r2)

	// Read reg's high byte
	readdata = 0;
   11420:	e03ffd0d 	sth	zero,-12(fp)
	for(j = 0; j < 8; j++){
   11424:	e03ffe15 	stw	zero,-8(fp)
   11428:	00001606 	br	11484 <Tmp513_Reg_Read+0x360>
		Delay(TMP513_DELAY);
   1142c:	01009c44 	movi	r4,625
   11430:	0010d180 	call	10d18 <Delay>
		readdata = 	readdata << 1;
   11434:	e0bffd0b 	ldhu	r2,-12(fp)
   11438:	1085883a 	add	r2,r2,r2
   1143c:	e0bffd0d 	sth	r2,-12(fp)
		readdata = ((TMP513_SDA->DATA) & 0x00000001) | readdata;
   11440:	00840804 	movi	r2,4128
   11444:	10800017 	ldw	r2,0(r2)
   11448:	1080004c 	andi	r2,r2,1
   1144c:	1007883a 	mov	r3,r2
   11450:	e0bffd0b 	ldhu	r2,-12(fp)
   11454:	10c4b03a 	or	r2,r2,r3
   11458:	e0bffd0d 	sth	r2,-12(fp)
		(TMP513_SCL->DATA) = 1;
   1145c:	00840c04 	movi	r2,4144
   11460:	00c00044 	movi	r3,1
   11464:	10c00015 	stw	r3,0(r2)
		Delay(TMP513_DELAY);
   11468:	01009c44 	movi	r4,625
   1146c:	0010d180 	call	10d18 <Delay>
		(TMP513_SCL->DATA) = 0;
   11470:	00840c04 	movi	r2,4144
   11474:	10000015 	stw	zero,0(r2)
	for(j = 0; j < 8; j++){
   11478:	e0bffe17 	ldw	r2,-8(fp)
   1147c:	10800044 	addi	r2,r2,1
   11480:	e0bffe15 	stw	r2,-8(fp)
   11484:	e0bffe17 	ldw	r2,-8(fp)
   11488:	10800230 	cmpltui	r2,r2,8
   1148c:	103fe71e 	bne	r2,zero,1142c <Tmp513_Reg_Read+0x308>
	}

	// Master ACK
	Delay(TMP513_DELAY);
   11490:	01009c44 	movi	r4,625
   11494:	0010d180 	call	10d18 <Delay>
	TMP513_DATA_OUT;
   11498:	00840804 	movi	r2,4128
   1149c:	00c00044 	movi	r3,1
   114a0:	10c00115 	stw	r3,4(r2)
	(TMP513_SDA->DATA) = 0;
   114a4:	00840804 	movi	r2,4128
   114a8:	10000015 	stw	zero,0(r2)
	Delay(TMP513_DELAY);
   114ac:	01009c44 	movi	r4,625
   114b0:	0010d180 	call	10d18 <Delay>
	(TMP513_SCL->DATA) = 1;
   114b4:	00840c04 	movi	r2,4144
   114b8:	00c00044 	movi	r3,1
   114bc:	10c00015 	stw	r3,0(r2)
	Delay(TMP513_DELAY);
   114c0:	01009c44 	movi	r4,625
   114c4:	0010d180 	call	10d18 <Delay>
	(TMP513_SCL->DATA) = 0;
   114c8:	00840c04 	movi	r2,4144
   114cc:	10000015 	stw	zero,0(r2)
	TMP513_DATA_IN;
   114d0:	00840804 	movi	r2,4128
   114d4:	10000115 	stw	zero,4(r2)

	// Read reg's low byte
	for(j = 0; j < 8; j++){
   114d8:	e03ffe15 	stw	zero,-8(fp)
   114dc:	00001606 	br	11538 <Tmp513_Reg_Read+0x414>
		Delay(TMP513_DELAY);
   114e0:	01009c44 	movi	r4,625
   114e4:	0010d180 	call	10d18 <Delay>
		readdata = 	readdata << 1;
   114e8:	e0bffd0b 	ldhu	r2,-12(fp)
   114ec:	1085883a 	add	r2,r2,r2
   114f0:	e0bffd0d 	sth	r2,-12(fp)
		readdata = ((TMP513_SDA->DATA) & 0x00000001) | readdata;
   114f4:	00840804 	movi	r2,4128
   114f8:	10800017 	ldw	r2,0(r2)
   114fc:	1080004c 	andi	r2,r2,1
   11500:	1007883a 	mov	r3,r2
   11504:	e0bffd0b 	ldhu	r2,-12(fp)
   11508:	10c4b03a 	or	r2,r2,r3
   1150c:	e0bffd0d 	sth	r2,-12(fp)
		(TMP513_SCL->DATA) = 1;
   11510:	00840c04 	movi	r2,4144
   11514:	00c00044 	movi	r3,1
   11518:	10c00015 	stw	r3,0(r2)
		Delay(TMP513_DELAY);
   1151c:	01009c44 	movi	r4,625
   11520:	0010d180 	call	10d18 <Delay>
		(TMP513_SCL->DATA) = 0;
   11524:	00840c04 	movi	r2,4144
   11528:	10000015 	stw	zero,0(r2)
	for(j = 0; j < 8; j++){
   1152c:	e0bffe17 	ldw	r2,-8(fp)
   11530:	10800044 	addi	r2,r2,1
   11534:	e0bffe15 	stw	r2,-8(fp)
   11538:	e0bffe17 	ldw	r2,-8(fp)
   1153c:	10800230 	cmpltui	r2,r2,8
   11540:	103fe71e 	bne	r2,zero,114e0 <Tmp513_Reg_Read+0x3bc>
	}

	// Master NO ACK
	Delay(TMP513_DELAY);
   11544:	01009c44 	movi	r4,625
   11548:	0010d180 	call	10d18 <Delay>
	(TMP513_SCL->DATA) = 1;
   1154c:	00840c04 	movi	r2,4144
   11550:	00c00044 	movi	r3,1
   11554:	10c00015 	stw	r3,0(r2)
	Delay(TMP513_DELAY);
   11558:	01009c44 	movi	r4,625
   1155c:	0010d180 	call	10d18 <Delay>
	(TMP513_SCL->DATA) = 0;
   11560:	00840c04 	movi	r2,4144
   11564:	10000015 	stw	zero,0(r2)

	// Stop
	TMP513_DATA_OUT;
   11568:	00840804 	movi	r2,4128
   1156c:	00c00044 	movi	r3,1
   11570:	10c00115 	stw	r3,4(r2)
	(TMP513_SDA->DATA) = 0;
   11574:	00840804 	movi	r2,4128
   11578:	10000015 	stw	zero,0(r2)
	Delay(TMP513_DELAY);
   1157c:	01009c44 	movi	r4,625
   11580:	0010d180 	call	10d18 <Delay>
	(TMP513_SCL->DATA) = 1;
   11584:	00840c04 	movi	r2,4144
   11588:	00c00044 	movi	r3,1
   1158c:	10c00015 	stw	r3,0(r2)
	Delay(TMP513_DELAY);
   11590:	01009c44 	movi	r4,625
   11594:	0010d180 	call	10d18 <Delay>
	(TMP513_SDA->DATA) = 1;
   11598:	00840804 	movi	r2,4128
   1159c:	00c00044 	movi	r3,1
   115a0:	10c00015 	stw	r3,0(r2)

	TMP513_DATA_IN;
   115a4:	00840804 	movi	r2,4128
   115a8:	10000115 	stw	zero,4(r2)
	return readdata;
   115ac:	e0bffd0b 	ldhu	r2,-12(fp)
}
   115b0:	e037883a 	mov	sp,fp
   115b4:	dfc00117 	ldw	ra,4(sp)
   115b8:	df000017 	ldw	fp,0(sp)
   115bc:	dec00204 	addi	sp,sp,8
   115c0:	f800283a 	ret

000115c4 <Read_Tmp513_Information>:
 *         Name:  Read_Tmp513_Information
 *  Description:  read tmp513's information
 * =====================================================================================
 */
void Read_Tmp513_Information(void)
{
   115c4:	defffe04 	addi	sp,sp,-8
   115c8:	dfc00115 	stw	ra,4(sp)
   115cc:	df000015 	stw	fp,0(sp)
   115d0:	d839883a 	mov	fp,sp
	printf("$-----------------------------------------------------$\n");
   115d4:	01000074 	movhi	r4,1
   115d8:	210ed104 	addi	r4,r4,15172
   115dc:	0011b280 	call	11b28 <puts>
	printf("$ TMP513's Information\n\r");
   115e0:	01000074 	movhi	r4,1
   115e4:	210edf04 	addi	r4,r4,15228
   115e8:	0011a5c0 	call	11a5c <printf>
	printf("$-----------------------------------------------------$\n");
   115ec:	01000074 	movhi	r4,1
   115f0:	210ed104 	addi	r4,r4,15172
   115f4:	0011b280 	call	11b28 <puts>
	printf("$ manufacturer ID    : %x\n\r", Tmp513_Reg_Read(MANUFACTURE_REG));
   115f8:	01000784 	movi	r4,30
   115fc:	00111240 	call	11124 <Tmp513_Reg_Read>
   11600:	10bfffcc 	andi	r2,r2,65535
   11604:	100b883a 	mov	r5,r2
   11608:	01000074 	movhi	r4,1
   1160c:	210ee604 	addi	r4,r4,15256
   11610:	0011a5c0 	call	11a5c <printf>
	printf("$ Die ID             : %x\n\r", Tmp513_Reg_Read(DEVICE_ID_REG));
   11614:	010007c4 	movi	r4,31
   11618:	00111240 	call	11124 <Tmp513_Reg_Read>
   1161c:	10bfffcc 	andi	r2,r2,65535
   11620:	100b883a 	mov	r5,r2
   11624:	01000074 	movhi	r4,1
   11628:	210eed04 	addi	r4,r4,15284
   1162c:	0011a5c0 	call	11a5c <printf>
	printf("$ Cfg1 Reg           : %x\n\r", Tmp513_Reg_Read(CONFIG1_REG));
   11630:	0009883a 	mov	r4,zero
   11634:	00111240 	call	11124 <Tmp513_Reg_Read>
   11638:	10bfffcc 	andi	r2,r2,65535
   1163c:	100b883a 	mov	r5,r2
   11640:	01000074 	movhi	r4,1
   11644:	210ef404 	addi	r4,r4,15312
   11648:	0011a5c0 	call	11a5c <printf>
	printf("$ Cfg2 Reg           : %x\n\r", Tmp513_Reg_Read(CONFIG2_REG));
   1164c:	01000044 	movi	r4,1
   11650:	00111240 	call	11124 <Tmp513_Reg_Read>
   11654:	10bfffcc 	andi	r2,r2,65535
   11658:	100b883a 	mov	r5,r2
   1165c:	01000074 	movhi	r4,1
   11660:	210efb04 	addi	r4,r4,15340
   11664:	0011a5c0 	call	11a5c <printf>
	printf("$ Status Reg         : %x\n\r", Tmp513_Reg_Read(STATUS_REG));
   11668:	01000084 	movi	r4,2
   1166c:	00111240 	call	11124 <Tmp513_Reg_Read>
   11670:	10bfffcc 	andi	r2,r2,65535
   11674:	100b883a 	mov	r5,r2
   11678:	01000074 	movhi	r4,1
   1167c:	210f0204 	addi	r4,r4,15368
   11680:	0011a5c0 	call	11a5c <printf>
	printf("$ Remote1 temp Reg   : %x\n\r", Tmp513_Reg_Read(REMOTE_TEMP1_REG));
   11684:	01000244 	movi	r4,9
   11688:	00111240 	call	11124 <Tmp513_Reg_Read>
   1168c:	10bfffcc 	andi	r2,r2,65535
   11690:	100b883a 	mov	r5,r2
   11694:	01000074 	movhi	r4,1
   11698:	210f0904 	addi	r4,r4,15396
   1169c:	0011a5c0 	call	11a5c <printf>
	printf("$ Remote2 temp Reg   : %x\n\r", Tmp513_Reg_Read(REMOTE_TEMP2_REG));
   116a0:	01000284 	movi	r4,10
   116a4:	00111240 	call	11124 <Tmp513_Reg_Read>
   116a8:	10bfffcc 	andi	r2,r2,65535
   116ac:	100b883a 	mov	r5,r2
   116b0:	01000074 	movhi	r4,1
   116b4:	210f1004 	addi	r4,r4,15424
   116b8:	0011a5c0 	call	11a5c <printf>
	printf("$ Remote3 temp Reg   : %x\n\r", Tmp513_Reg_Read(REMOTE_TEMP3_REG));
   116bc:	010002c4 	movi	r4,11
   116c0:	00111240 	call	11124 <Tmp513_Reg_Read>
   116c4:	10bfffcc 	andi	r2,r2,65535
   116c8:	100b883a 	mov	r5,r2
   116cc:	01000074 	movhi	r4,1
   116d0:	210f1704 	addi	r4,r4,15452
   116d4:	0011a5c0 	call	11a5c <printf>
	printf("$ Local temp Reg     : %x\n\r", Tmp513_Reg_Read(LOCAL_TEMP_REG));
   116d8:	01000204 	movi	r4,8
   116dc:	00111240 	call	11124 <Tmp513_Reg_Read>
   116e0:	10bfffcc 	andi	r2,r2,65535
   116e4:	100b883a 	mov	r5,r2
   116e8:	01000074 	movhi	r4,1
   116ec:	210f1e04 	addi	r4,r4,15480
   116f0:	0011a5c0 	call	11a5c <printf>
	printf("$-----------------------------------------------------$\n\n");
   116f4:	01000074 	movhi	r4,1
   116f8:	210f2504 	addi	r4,r4,15508
   116fc:	0011b280 	call	11b28 <puts>
}
   11700:	0001883a 	nop
   11704:	e037883a 	mov	sp,fp
   11708:	dfc00117 	ldw	ra,4(sp)
   1170c:	df000017 	ldw	fp,0(sp)
   11710:	dec00204 	addi	sp,sp,8
   11714:	f800283a 	ret

00011718 <main>:
 *         Name:  main
 *  Description:  main function
 * =====================================================================================
 */
int main()
{
   11718:	defff904 	addi	sp,sp,-28
   1171c:	dfc00615 	stw	ra,24(sp)
   11720:	df000515 	stw	fp,20(sp)
   11724:	df000504 	addi	fp,sp,20
	unsigned int i = 0;
   11728:	e03fff15 	stw	zero,-4(fp)
	unsigned int core_power = 0;
   1172c:	e03ffd15 	stw	zero,-12(fp)
	unsigned int ddr_power = 0;
   11730:	e03ffc15 	stw	zero,-16(fp)
	unsigned int board_power = 0;
   11734:	e03ffb15 	stw	zero,-20(fp)
	unsigned int core_temperature = 0;
   11738:	e03ffe15 	stw	zero,-8(fp)

	//CPU_LED_G_ON;
	//CPU_LED_R_ON;

	printf("$-----------------------------------------------------$\n");
   1173c:	01000074 	movhi	r4,1
   11740:	210f3404 	addi	r4,r4,15568
   11744:	0011b280 	call	11b28 <puts>
	printf("$    FPGA project version: fa506t_system_monitor demo\n");
   11748:	01000074 	movhi	r4,1
   1174c:	210f4204 	addi	r4,r4,15624
   11750:	0011b280 	call	11b28 <puts>
	printf("$    Company: FLYSLICE\n");
   11754:	01000074 	movhi	r4,1
   11758:	210f5004 	addi	r4,r4,15680
   1175c:	0011b280 	call	11b28 <puts>
	printf("$    Email  : kevinhan@flyslice.com\n");
   11760:	01000074 	movhi	r4,1
   11764:	210f5604 	addi	r4,r4,15704
   11768:	0011b280 	call	11b28 <puts>
	printf("$    URL    : http://www.flyslice.com\n");
   1176c:	01000074 	movhi	r4,1
   11770:	210f5f04 	addi	r4,r4,15740
   11774:	0011b280 	call	11b28 <puts>
	printf("$-----------------------------------------------------$\n\n");
   11778:	01000074 	movhi	r4,1
   1177c:	210f6904 	addi	r4,r4,15780
   11780:	0011b280 	call	11b28 <puts>


    // Read chip's information
	Read_Ina3221_Information();
   11784:	0010ac80 	call	10ac8 <Read_Ina3221_Information>
	Read_Tmp513_Information();
   11788:	00115c40 	call	115c4 <Read_Tmp513_Information>

    while(1){
    	// Get CORE/BOARD power

        Power_Monitor(&board_power, &ddr_power, &core_power);
   1178c:	e13ffd04 	addi	r4,fp,-12
   11790:	e0fffc04 	addi	r3,fp,-16
   11794:	e0bffb04 	addi	r2,fp,-20
   11798:	200d883a 	mov	r6,r4
   1179c:	180b883a 	mov	r5,r3
   117a0:	1009883a 	mov	r4,r2
   117a4:	0010c1c0 	call	10c1c <Power_Monitor>

    	core_temperature = Tmp513_Reg_Read(REMOTE_TEMP1_REG);
   117a8:	01000244 	movi	r4,9
   117ac:	00111240 	call	11124 <Tmp513_Reg_Read>
   117b0:	10bfffcc 	andi	r2,r2,65535
   117b4:	e0bffe15 	stw	r2,-8(fp)

    	core_temperature = core_temperature/128;
   117b8:	e0bffe17 	ldw	r2,-8(fp)
   117bc:	1004d1fa 	srli	r2,r2,7
   117c0:	e0bffe15 	stw	r2,-8(fp)

    	printf("$-----------------------------------------------------$\n");
   117c4:	01000074 	movhi	r4,1
   117c8:	210f3404 	addi	r4,r4,15568
   117cc:	0011b280 	call	11b28 <puts>
    	printf("$ Power monitor: %d\n", i);
   117d0:	e17fff17 	ldw	r5,-4(fp)
   117d4:	01000074 	movhi	r4,1
   117d8:	210f7804 	addi	r4,r4,15840
   117dc:	0011a5c0 	call	11a5c <printf>
    	printf("$-----------------------------------------------------$\n");
   117e0:	01000074 	movhi	r4,1
   117e4:	210f3404 	addi	r4,r4,15568
   117e8:	0011b280 	call	11b28 <puts>
    	printf("$ core's power : %5d mw\n",  core_power/1100);
   117ec:	e0bffd17 	ldw	r2,-12(fp)
   117f0:	01411304 	movi	r5,1100
   117f4:	1009883a 	mov	r4,r2
   117f8:	00119640 	call	11964 <__udivsi3>
   117fc:	100b883a 	mov	r5,r2
   11800:	01000074 	movhi	r4,1
   11804:	210f7e04 	addi	r4,r4,15864
   11808:	0011a5c0 	call	11a5c <printf>
    	printf("$ board's power: %5d mw\n", board_power/1400);
   1180c:	e0bffb17 	ldw	r2,-20(fp)
   11810:	01415e04 	movi	r5,1400
   11814:	1009883a 	mov	r4,r2
   11818:	00119640 	call	11964 <__udivsi3>
   1181c:	100b883a 	mov	r5,r2
   11820:	01000074 	movhi	r4,1
   11824:	210f8504 	addi	r4,r4,15892
   11828:	0011a5c0 	call	11a5c <printf>
    	printf("$ fpga's core temperature: %5d Degree\n", core_temperature);
   1182c:	e17ffe17 	ldw	r5,-8(fp)
   11830:	01000074 	movhi	r4,1
   11834:	210f8c04 	addi	r4,r4,15920
   11838:	0011a5c0 	call	11a5c <printf>
    	printf("$-----------------------------------------------------$\n\n");
   1183c:	01000074 	movhi	r4,1
   11840:	210f6904 	addi	r4,r4,15780
   11844:	0011b280 	call	11b28 <puts>

    	i++;
   11848:	e0bfff17 	ldw	r2,-4(fp)
   1184c:	10800044 	addi	r2,r2,1
   11850:	e0bfff15 	stw	r2,-4(fp)

    	Delay(10000000);
   11854:	01002674 	movhi	r4,153
   11858:	2125a004 	addi	r4,r4,-27008
   1185c:	0010d180 	call	10d18 <Delay>
        Power_Monitor(&board_power, &ddr_power, &core_power);
   11860:	003fca06 	br	1178c <main+0x74>

00011864 <__divsi3>:
   11864:	20001c16 	blt	r4,zero,118d8 <__divsi3+0x74>
   11868:	000f883a 	mov	r7,zero
   1186c:	2800020e 	bge	r5,zero,11878 <__divsi3+0x14>
   11870:	014bc83a 	sub	r5,zero,r5
   11874:	39c0005c 	xori	r7,r7,1
   11878:	200d883a 	mov	r6,r4
   1187c:	2900192e 	bgeu	r5,r4,118e4 <__divsi3+0x80>
   11880:	00800804 	movi	r2,32
   11884:	00c00044 	movi	r3,1
   11888:	00000206 	br	11894 <__divsi3+0x30>
   1188c:	10001026 	beq	r2,zero,118d0 <__divsi3+0x6c>
   11890:	28000516 	blt	r5,zero,118a8 <__divsi3+0x44>
   11894:	294b883a 	add	r5,r5,r5
   11898:	10bfffc4 	addi	r2,r2,-1
   1189c:	18c7883a 	add	r3,r3,r3
   118a0:	293ffa36 	bltu	r5,r4,1188c <__divsi3+0x28>
   118a4:	18000a26 	beq	r3,zero,118d0 <__divsi3+0x6c>
   118a8:	0005883a 	mov	r2,zero
   118ac:	31400236 	bltu	r6,r5,118b8 <__divsi3+0x54>
   118b0:	314dc83a 	sub	r6,r6,r5
   118b4:	10c4b03a 	or	r2,r2,r3
   118b8:	1806d07a 	srli	r3,r3,1
   118bc:	280ad07a 	srli	r5,r5,1
   118c0:	183ffa1e 	bne	r3,zero,118ac <__divsi3+0x48>
   118c4:	38000126 	beq	r7,zero,118cc <__divsi3+0x68>
   118c8:	0085c83a 	sub	r2,zero,r2
   118cc:	f800283a 	ret
   118d0:	0005883a 	mov	r2,zero
   118d4:	003ffb06 	br	118c4 <__divsi3+0x60>
   118d8:	0109c83a 	sub	r4,zero,r4
   118dc:	01c00044 	movi	r7,1
   118e0:	003fe206 	br	1186c <__divsi3+0x8>
   118e4:	00c00044 	movi	r3,1
   118e8:	003fef06 	br	118a8 <__divsi3+0x44>

000118ec <__modsi3>:
   118ec:	20001816 	blt	r4,zero,11950 <__modsi3+0x64>
   118f0:	000f883a 	mov	r7,zero
   118f4:	2005883a 	mov	r2,r4
   118f8:	28001316 	blt	r5,zero,11948 <__modsi3+0x5c>
   118fc:	2900172e 	bgeu	r5,r4,1195c <__modsi3+0x70>
   11900:	01800804 	movi	r6,32
   11904:	00c00044 	movi	r3,1
   11908:	00000206 	br	11914 <__modsi3+0x28>
   1190c:	30000b26 	beq	r6,zero,1193c <__modsi3+0x50>
   11910:	28000516 	blt	r5,zero,11928 <__modsi3+0x3c>
   11914:	294b883a 	add	r5,r5,r5
   11918:	31bfffc4 	addi	r6,r6,-1
   1191c:	18c7883a 	add	r3,r3,r3
   11920:	293ffa36 	bltu	r5,r4,1190c <__modsi3+0x20>
   11924:	18000526 	beq	r3,zero,1193c <__modsi3+0x50>
   11928:	1806d07a 	srli	r3,r3,1
   1192c:	11400136 	bltu	r2,r5,11934 <__modsi3+0x48>
   11930:	1145c83a 	sub	r2,r2,r5
   11934:	280ad07a 	srli	r5,r5,1
   11938:	183ffb1e 	bne	r3,zero,11928 <__modsi3+0x3c>
   1193c:	38000126 	beq	r7,zero,11944 <__modsi3+0x58>
   11940:	0085c83a 	sub	r2,zero,r2
   11944:	f800283a 	ret
   11948:	014bc83a 	sub	r5,zero,r5
   1194c:	003feb06 	br	118fc <__modsi3+0x10>
   11950:	0109c83a 	sub	r4,zero,r4
   11954:	01c00044 	movi	r7,1
   11958:	003fe606 	br	118f4 <__modsi3+0x8>
   1195c:	00c00044 	movi	r3,1
   11960:	003ff106 	br	11928 <__modsi3+0x3c>

00011964 <__udivsi3>:
   11964:	200d883a 	mov	r6,r4
   11968:	2900152e 	bgeu	r5,r4,119c0 <__udivsi3+0x5c>
   1196c:	28001416 	blt	r5,zero,119c0 <__udivsi3+0x5c>
   11970:	00800804 	movi	r2,32
   11974:	00c00044 	movi	r3,1
   11978:	00000206 	br	11984 <__udivsi3+0x20>
   1197c:	10000e26 	beq	r2,zero,119b8 <__udivsi3+0x54>
   11980:	28000516 	blt	r5,zero,11998 <__udivsi3+0x34>
   11984:	294b883a 	add	r5,r5,r5
   11988:	10bfffc4 	addi	r2,r2,-1
   1198c:	18c7883a 	add	r3,r3,r3
   11990:	293ffa36 	bltu	r5,r4,1197c <__udivsi3+0x18>
   11994:	18000826 	beq	r3,zero,119b8 <__udivsi3+0x54>
   11998:	0005883a 	mov	r2,zero
   1199c:	31400236 	bltu	r6,r5,119a8 <__udivsi3+0x44>
   119a0:	314dc83a 	sub	r6,r6,r5
   119a4:	10c4b03a 	or	r2,r2,r3
   119a8:	1806d07a 	srli	r3,r3,1
   119ac:	280ad07a 	srli	r5,r5,1
   119b0:	183ffa1e 	bne	r3,zero,1199c <__udivsi3+0x38>
   119b4:	f800283a 	ret
   119b8:	0005883a 	mov	r2,zero
   119bc:	f800283a 	ret
   119c0:	00c00044 	movi	r3,1
   119c4:	003ff406 	br	11998 <__udivsi3+0x34>

000119c8 <__umodsi3>:
   119c8:	2005883a 	mov	r2,r4
   119cc:	2900122e 	bgeu	r5,r4,11a18 <__umodsi3+0x50>
   119d0:	28001116 	blt	r5,zero,11a18 <__umodsi3+0x50>
   119d4:	01800804 	movi	r6,32
   119d8:	00c00044 	movi	r3,1
   119dc:	00000206 	br	119e8 <__umodsi3+0x20>
   119e0:	30000b26 	beq	r6,zero,11a10 <__umodsi3+0x48>
   119e4:	28000516 	blt	r5,zero,119fc <__umodsi3+0x34>
   119e8:	294b883a 	add	r5,r5,r5
   119ec:	31bfffc4 	addi	r6,r6,-1
   119f0:	18c7883a 	add	r3,r3,r3
   119f4:	293ffa36 	bltu	r5,r4,119e0 <__umodsi3+0x18>
   119f8:	18000626 	beq	r3,zero,11a14 <__umodsi3+0x4c>
   119fc:	1806d07a 	srli	r3,r3,1
   11a00:	11400136 	bltu	r2,r5,11a08 <__umodsi3+0x40>
   11a04:	1145c83a 	sub	r2,r2,r5
   11a08:	280ad07a 	srli	r5,r5,1
   11a0c:	183ffb1e 	bne	r3,zero,119fc <__umodsi3+0x34>
   11a10:	f800283a 	ret
   11a14:	f800283a 	ret
   11a18:	00c00044 	movi	r3,1
   11a1c:	003ff706 	br	119fc <__umodsi3+0x34>

00011a20 <_printf_r>:
   11a20:	defffd04 	addi	sp,sp,-12
   11a24:	dfc00015 	stw	ra,0(sp)
   11a28:	d9800115 	stw	r6,4(sp)
   11a2c:	d9c00215 	stw	r7,8(sp)
   11a30:	21800217 	ldw	r6,8(r4)
   11a34:	00800074 	movhi	r2,1
   11a38:	10883404 	addi	r2,r2,8400
   11a3c:	30800115 	stw	r2,4(r6)
   11a40:	280d883a 	mov	r6,r5
   11a44:	21400217 	ldw	r5,8(r4)
   11a48:	d9c00104 	addi	r7,sp,4
   11a4c:	0011bc00 	call	11bc0 <___vfprintf_internal_r>
   11a50:	dfc00017 	ldw	ra,0(sp)
   11a54:	dec00304 	addi	sp,sp,12
   11a58:	f800283a 	ret

00011a5c <printf>:
   11a5c:	defffc04 	addi	sp,sp,-16
   11a60:	dfc00015 	stw	ra,0(sp)
   11a64:	d9400115 	stw	r5,4(sp)
   11a68:	d9800215 	stw	r6,8(sp)
   11a6c:	d9c00315 	stw	r7,12(sp)
   11a70:	00800074 	movhi	r2,1
   11a74:	10d04f17 	ldw	r3,16700(r2)
   11a78:	00800074 	movhi	r2,1
   11a7c:	10883404 	addi	r2,r2,8400
   11a80:	19400217 	ldw	r5,8(r3)
   11a84:	d9800104 	addi	r6,sp,4
   11a88:	28800115 	stw	r2,4(r5)
   11a8c:	200b883a 	mov	r5,r4
   11a90:	19000217 	ldw	r4,8(r3)
   11a94:	00120b80 	call	120b8 <__vfprintf_internal>
   11a98:	dfc00017 	ldw	ra,0(sp)
   11a9c:	dec00404 	addi	sp,sp,16
   11aa0:	f800283a 	ret

00011aa4 <_puts_r>:
   11aa4:	defffd04 	addi	sp,sp,-12
   11aa8:	dc000015 	stw	r16,0(sp)
   11aac:	2021883a 	mov	r16,r4
   11ab0:	2809883a 	mov	r4,r5
   11ab4:	dfc00215 	stw	ra,8(sp)
   11ab8:	dc400115 	stw	r17,4(sp)
   11abc:	2823883a 	mov	r17,r5
   11ac0:	0011b380 	call	11b38 <strlen>
   11ac4:	81400217 	ldw	r5,8(r16)
   11ac8:	00c00074 	movhi	r3,1
   11acc:	18c83404 	addi	r3,r3,8400
   11ad0:	28c00115 	stw	r3,4(r5)
   11ad4:	100f883a 	mov	r7,r2
   11ad8:	880d883a 	mov	r6,r17
   11adc:	8009883a 	mov	r4,r16
   11ae0:	00120d00 	call	120d0 <__sfvwrite_small_dev>
   11ae4:	10ffffe0 	cmpeqi	r3,r2,-1
   11ae8:	18000a1e 	bne	r3,zero,11b14 <_puts_r+0x70>
   11aec:	80800217 	ldw	r2,8(r16)
   11af0:	81400217 	ldw	r5,8(r16)
   11af4:	01800074 	movhi	r6,1
   11af8:	10800117 	ldw	r2,4(r2)
   11afc:	01c00044 	movi	r7,1
   11b00:	318f9604 	addi	r6,r6,15960
   11b04:	8009883a 	mov	r4,r16
   11b08:	103ee83a 	callr	r2
   11b0c:	10bfffe0 	cmpeqi	r2,r2,-1
   11b10:	0085c83a 	sub	r2,zero,r2
   11b14:	dfc00217 	ldw	ra,8(sp)
   11b18:	dc400117 	ldw	r17,4(sp)
   11b1c:	dc000017 	ldw	r16,0(sp)
   11b20:	dec00304 	addi	sp,sp,12
   11b24:	f800283a 	ret

00011b28 <puts>:
   11b28:	00800074 	movhi	r2,1
   11b2c:	200b883a 	mov	r5,r4
   11b30:	11104f17 	ldw	r4,16700(r2)
   11b34:	0011aa41 	jmpi	11aa4 <_puts_r>

00011b38 <strlen>:
   11b38:	2005883a 	mov	r2,r4
   11b3c:	10c00007 	ldb	r3,0(r2)
   11b40:	1800021e 	bne	r3,zero,11b4c <strlen+0x14>
   11b44:	1105c83a 	sub	r2,r2,r4
   11b48:	f800283a 	ret
   11b4c:	10800044 	addi	r2,r2,1
   11b50:	003ffa06 	br	11b3c <strlen+0x4>

00011b54 <print_repeat>:
   11b54:	defffb04 	addi	sp,sp,-20
   11b58:	dc800315 	stw	r18,12(sp)
   11b5c:	dc400215 	stw	r17,8(sp)
   11b60:	dc000115 	stw	r16,4(sp)
   11b64:	dfc00415 	stw	ra,16(sp)
   11b68:	2025883a 	mov	r18,r4
   11b6c:	2823883a 	mov	r17,r5
   11b70:	d9800005 	stb	r6,0(sp)
   11b74:	3821883a 	mov	r16,r7
   11b78:	04000716 	blt	zero,r16,11b98 <print_repeat+0x44>
   11b7c:	0005883a 	mov	r2,zero
   11b80:	dfc00417 	ldw	ra,16(sp)
   11b84:	dc800317 	ldw	r18,12(sp)
   11b88:	dc400217 	ldw	r17,8(sp)
   11b8c:	dc000117 	ldw	r16,4(sp)
   11b90:	dec00504 	addi	sp,sp,20
   11b94:	f800283a 	ret
   11b98:	88800117 	ldw	r2,4(r17)
   11b9c:	01c00044 	movi	r7,1
   11ba0:	d80d883a 	mov	r6,sp
   11ba4:	880b883a 	mov	r5,r17
   11ba8:	9009883a 	mov	r4,r18
   11bac:	103ee83a 	callr	r2
   11bb0:	843fffc4 	addi	r16,r16,-1
   11bb4:	103ff026 	beq	r2,zero,11b78 <print_repeat+0x24>
   11bb8:	00bfffc4 	movi	r2,-1
   11bbc:	003ff006 	br	11b80 <print_repeat+0x2c>

00011bc0 <___vfprintf_internal_r>:
   11bc0:	deffe604 	addi	sp,sp,-104
   11bc4:	df001815 	stw	fp,96(sp)
   11bc8:	ddc01715 	stw	r23,92(sp)
   11bcc:	dd801615 	stw	r22,88(sp)
   11bd0:	dd001415 	stw	r20,80(sp)
   11bd4:	dcc01315 	stw	r19,76(sp)
   11bd8:	dc801215 	stw	r18,72(sp)
   11bdc:	dc401115 	stw	r17,68(sp)
   11be0:	dc001015 	stw	r16,64(sp)
   11be4:	dfc01915 	stw	ra,100(sp)
   11be8:	dd401515 	stw	r21,84(sp)
   11bec:	2023883a 	mov	r17,r4
   11bf0:	282d883a 	mov	r22,r5
   11bf4:	d9800515 	stw	r6,20(sp)
   11bf8:	382f883a 	mov	r23,r7
   11bfc:	0039883a 	mov	fp,zero
   11c00:	d8000215 	stw	zero,8(sp)
   11c04:	0027883a 	mov	r19,zero
   11c08:	0029883a 	mov	r20,zero
   11c0c:	0025883a 	mov	r18,zero
   11c10:	0021883a 	mov	r16,zero
   11c14:	d8000115 	stw	zero,4(sp)
   11c18:	d8000015 	stw	zero,0(sp)
   11c1c:	0005883a 	mov	r2,zero
   11c20:	00000506 	br	11c38 <___vfprintf_internal_r+0x78>
   11c24:	11800060 	cmpeqi	r6,r2,1
   11c28:	3000251e 	bne	r6,zero,11cc0 <___vfprintf_internal_r+0x100>
   11c2c:	11800088 	cmpgei	r6,r2,2
   11c30:	30000a1e 	bne	r6,zero,11c5c <___vfprintf_internal_r+0x9c>
   11c34:	10001626 	beq	r2,zero,11c90 <___vfprintf_internal_r+0xd0>
   11c38:	d8c00517 	ldw	r3,20(sp)
   11c3c:	18c00044 	addi	r3,r3,1
   11c40:	197fffc3 	ldbu	r5,-1(r3)
   11c44:	d8c00515 	stw	r3,20(sp)
   11c48:	29003fcc 	andi	r4,r5,255
   11c4c:	2100201c 	xori	r4,r4,128
   11c50:	213fe004 	addi	r4,r4,-128
   11c54:	203ff31e 	bne	r4,zero,11c24 <___vfprintf_internal_r+0x64>
   11c58:	0000c806 	br	11f7c <___vfprintf_internal_r+0x3bc>
   11c5c:	118000a0 	cmpeqi	r6,r2,2
   11c60:	30001b1e 	bne	r6,zero,11cd0 <___vfprintf_internal_r+0x110>
   11c64:	118000e0 	cmpeqi	r6,r2,3
   11c68:	303ff326 	beq	r6,zero,11c38 <___vfprintf_internal_r+0x78>
   11c6c:	297ff404 	addi	r5,r5,-48
   11c70:	29403fcc 	andi	r5,r5,255
   11c74:	298002a8 	cmpgeui	r6,r5,10
   11c78:	3000271e 	bne	r6,zero,11d18 <___vfprintf_internal_r+0x158>
   11c7c:	913fffe0 	cmpeqi	r4,r18,-1
   11c80:	2000231e 	bne	r4,zero,11d10 <___vfprintf_internal_r+0x150>
   11c84:	948002a4 	muli	r18,r18,10
   11c88:	2ca5883a 	add	r18,r5,r18
   11c8c:	003fea06 	br	11c38 <___vfprintf_internal_r+0x78>
   11c90:	21000960 	cmpeqi	r4,r4,37
   11c94:	2000f81e 	bne	r4,zero,12078 <___vfprintf_internal_r+0x4b8>
   11c98:	b0800117 	ldw	r2,4(r22)
   11c9c:	d9400805 	stb	r5,32(sp)
   11ca0:	01c00044 	movi	r7,1
   11ca4:	d9800804 	addi	r6,sp,32
   11ca8:	b00b883a 	mov	r5,r22
   11cac:	8809883a 	mov	r4,r17
   11cb0:	103ee83a 	callr	r2
   11cb4:	1000b01e 	bne	r2,zero,11f78 <___vfprintf_internal_r+0x3b8>
   11cb8:	e7000044 	addi	fp,fp,1
   11cbc:	003fde06 	br	11c38 <___vfprintf_internal_r+0x78>
   11cc0:	20800c20 	cmpeqi	r2,r4,48
   11cc4:	1000f51e 	bne	r2,zero,1209c <___vfprintf_internal_r+0x4dc>
   11cc8:	20800958 	cmpnei	r2,r4,37
   11ccc:	103ff226 	beq	r2,zero,11c98 <___vfprintf_internal_r+0xd8>
   11cd0:	28bff404 	addi	r2,r5,-48
   11cd4:	10803fcc 	andi	r2,r2,255
   11cd8:	118002a8 	cmpgeui	r6,r2,10
   11cdc:	3000081e 	bne	r6,zero,11d00 <___vfprintf_internal_r+0x140>
   11ce0:	813fffe0 	cmpeqi	r4,r16,-1
   11ce4:	2000041e 	bne	r4,zero,11cf8 <___vfprintf_internal_r+0x138>
   11ce8:	840002a4 	muli	r16,r16,10
   11cec:	1421883a 	add	r16,r2,r16
   11cf0:	00800084 	movi	r2,2
   11cf4:	003fd006 	br	11c38 <___vfprintf_internal_r+0x78>
   11cf8:	0021883a 	mov	r16,zero
   11cfc:	003ffb06 	br	11cec <___vfprintf_internal_r+0x12c>
   11d00:	20800ba0 	cmpeqi	r2,r4,46
   11d04:	1000ea1e 	bne	r2,zero,120b0 <___vfprintf_internal_r+0x4f0>
   11d08:	00800084 	movi	r2,2
   11d0c:	003fd706 	br	11c6c <___vfprintf_internal_r+0xac>
   11d10:	0025883a 	mov	r18,zero
   11d14:	003fdc06 	br	11c88 <___vfprintf_internal_r+0xc8>
   11d18:	20801b20 	cmpeqi	r2,r4,108
   11d1c:	1000e21e 	bne	r2,zero,120a8 <___vfprintf_internal_r+0x4e8>
   11d20:	90bfffd8 	cmpnei	r2,r18,-1
   11d24:	10000e1e 	bne	r2,zero,11d60 <___vfprintf_internal_r+0x1a0>
   11d28:	04800044 	movi	r18,1
   11d2c:	20801a60 	cmpeqi	r2,r4,105
   11d30:	1000201e 	bne	r2,zero,11db4 <___vfprintf_internal_r+0x1f4>
   11d34:	20801a88 	cmpgei	r2,r4,106
   11d38:	10000b1e 	bne	r2,zero,11d68 <___vfprintf_internal_r+0x1a8>
   11d3c:	208018e0 	cmpeqi	r2,r4,99
   11d40:	10009b1e 	bne	r2,zero,11fb0 <___vfprintf_internal_r+0x3f0>
   11d44:	20801920 	cmpeqi	r2,r4,100
   11d48:	10001a1e 	bne	r2,zero,11db4 <___vfprintf_internal_r+0x1f4>
   11d4c:	21001620 	cmpeqi	r4,r4,88
   11d50:	203fb226 	beq	r4,zero,11c1c <___vfprintf_internal_r+0x5c>
   11d54:	00800044 	movi	r2,1
   11d58:	d8800215 	stw	r2,8(sp)
   11d5c:	00000e06 	br	11d98 <___vfprintf_internal_r+0x1d8>
   11d60:	d8000015 	stw	zero,0(sp)
   11d64:	003ff106 	br	11d2c <___vfprintf_internal_r+0x16c>
   11d68:	20801ce0 	cmpeqi	r2,r4,115
   11d6c:	1000a71e 	bne	r2,zero,1200c <___vfprintf_internal_r+0x44c>
   11d70:	20801d08 	cmpgei	r2,r4,116
   11d74:	1000041e 	bne	r2,zero,11d88 <___vfprintf_internal_r+0x1c8>
   11d78:	21001be0 	cmpeqi	r4,r4,111
   11d7c:	203fa726 	beq	r4,zero,11c1c <___vfprintf_internal_r+0x5c>
   11d80:	05000204 	movi	r20,8
   11d84:	00000506 	br	11d9c <___vfprintf_internal_r+0x1dc>
   11d88:	20801d60 	cmpeqi	r2,r4,117
   11d8c:	1000031e 	bne	r2,zero,11d9c <___vfprintf_internal_r+0x1dc>
   11d90:	21001e20 	cmpeqi	r4,r4,120
   11d94:	203fa126 	beq	r4,zero,11c1c <___vfprintf_internal_r+0x5c>
   11d98:	05000404 	movi	r20,16
   11d9c:	b8800104 	addi	r2,r23,4
   11da0:	d8800415 	stw	r2,16(sp)
   11da4:	bd400017 	ldw	r21,0(r23)
   11da8:	0027883a 	mov	r19,zero
   11dac:	0017883a 	mov	r11,zero
   11db0:	00000a06 	br	11ddc <___vfprintf_internal_r+0x21c>
   11db4:	b8800104 	addi	r2,r23,4
   11db8:	d8800415 	stw	r2,16(sp)
   11dbc:	983ff726 	beq	r19,zero,11d9c <___vfprintf_internal_r+0x1dc>
   11dc0:	bd400017 	ldw	r21,0(r23)
   11dc4:	a8000216 	blt	r21,zero,11dd0 <___vfprintf_internal_r+0x210>
   11dc8:	04c00044 	movi	r19,1
   11dcc:	003ff706 	br	11dac <___vfprintf_internal_r+0x1ec>
   11dd0:	056bc83a 	sub	r21,zero,r21
   11dd4:	04c00044 	movi	r19,1
   11dd8:	02c00044 	movi	r11,1
   11ddc:	ddc00804 	addi	r23,sp,32
   11de0:	b80d883a 	mov	r6,r23
   11de4:	a8002e1e 	bne	r21,zero,11ea0 <___vfprintf_internal_r+0x2e0>
   11de8:	b985c83a 	sub	r2,r23,r6
   11dec:	d8800315 	stw	r2,12(sp)
   11df0:	9085c83a 	sub	r2,r18,r2
   11df4:	0080090e 	bge	zero,r2,11e1c <___vfprintf_internal_r+0x25c>
   11df8:	b885883a 	add	r2,r23,r2
   11dfc:	d8c01004 	addi	r3,sp,64
   11e00:	b8c0042e 	bgeu	r23,r3,11e14 <___vfprintf_internal_r+0x254>
   11e04:	bdc00044 	addi	r23,r23,1
   11e08:	00c00c04 	movi	r3,48
   11e0c:	b8ffffc5 	stb	r3,-1(r23)
   11e10:	b8bffa1e 	bne	r23,r2,11dfc <___vfprintf_internal_r+0x23c>
   11e14:	b985c83a 	sub	r2,r23,r6
   11e18:	d8800315 	stw	r2,12(sp)
   11e1c:	d8800317 	ldw	r2,12(sp)
   11e20:	5895883a 	add	r10,r11,r2
   11e24:	d8800017 	ldw	r2,0(sp)
   11e28:	82abc83a 	sub	r21,r16,r10
   11e2c:	10003226 	beq	r2,zero,11ef8 <___vfprintf_internal_r+0x338>
   11e30:	58000a26 	beq	r11,zero,11e5c <___vfprintf_internal_r+0x29c>
   11e34:	00800b44 	movi	r2,45
   11e38:	d88007c5 	stb	r2,31(sp)
   11e3c:	b0800117 	ldw	r2,4(r22)
   11e40:	01c00044 	movi	r7,1
   11e44:	d98007c4 	addi	r6,sp,31
   11e48:	b00b883a 	mov	r5,r22
   11e4c:	8809883a 	mov	r4,r17
   11e50:	103ee83a 	callr	r2
   11e54:	1000481e 	bne	r2,zero,11f78 <___vfprintf_internal_r+0x3b8>
   11e58:	e7000044 	addi	fp,fp,1
   11e5c:	0540070e 	bge	zero,r21,11e7c <___vfprintf_internal_r+0x2bc>
   11e60:	a80f883a 	mov	r7,r21
   11e64:	01800c04 	movi	r6,48
   11e68:	b00b883a 	mov	r5,r22
   11e6c:	8809883a 	mov	r4,r17
   11e70:	0011b540 	call	11b54 <print_repeat>
   11e74:	1000401e 	bne	r2,zero,11f78 <___vfprintf_internal_r+0x3b8>
   11e78:	e579883a 	add	fp,fp,r21
   11e7c:	d8800317 	ldw	r2,12(sp)
   11e80:	e5f9883a 	add	fp,fp,r23
   11e84:	15ebc83a 	sub	r21,r2,r23
   11e88:	adc5883a 	add	r2,r21,r23
   11e8c:	e5c7c83a 	sub	r3,fp,r23
   11e90:	00802f16 	blt	zero,r2,11f50 <___vfprintf_internal_r+0x390>
   11e94:	ddc00417 	ldw	r23,16(sp)
   11e98:	1839883a 	mov	fp,r3
   11e9c:	003f5f06 	br	11c1c <___vfprintf_internal_r+0x5c>
   11ea0:	a809883a 	mov	r4,r21
   11ea4:	a00b883a 	mov	r5,r20
   11ea8:	d9800615 	stw	r6,24(sp)
   11eac:	dac00315 	stw	r11,12(sp)
   11eb0:	00119640 	call	11964 <__udivsi3>
   11eb4:	1509383a 	mul	r4,r2,r20
   11eb8:	dac00317 	ldw	r11,12(sp)
   11ebc:	d9800617 	ldw	r6,24(sp)
   11ec0:	a92bc83a 	sub	r21,r21,r4
   11ec4:	a9000288 	cmpgei	r4,r21,10
   11ec8:	2000051e 	bne	r4,zero,11ee0 <___vfprintf_internal_r+0x320>
   11ecc:	ad400c04 	addi	r21,r21,48
   11ed0:	bdc00044 	addi	r23,r23,1
   11ed4:	bd7fffc5 	stb	r21,-1(r23)
   11ed8:	102b883a 	mov	r21,r2
   11edc:	003fc106 	br	11de4 <___vfprintf_internal_r+0x224>
   11ee0:	d8c00217 	ldw	r3,8(sp)
   11ee4:	18000226 	beq	r3,zero,11ef0 <___vfprintf_internal_r+0x330>
   11ee8:	ad400dc4 	addi	r21,r21,55
   11eec:	003ff806 	br	11ed0 <___vfprintf_internal_r+0x310>
   11ef0:	ad4015c4 	addi	r21,r21,87
   11ef4:	003ff606 	br	11ed0 <___vfprintf_internal_r+0x310>
   11ef8:	0540090e 	bge	zero,r21,11f20 <___vfprintf_internal_r+0x360>
   11efc:	a80f883a 	mov	r7,r21
   11f00:	01800804 	movi	r6,32
   11f04:	b00b883a 	mov	r5,r22
   11f08:	8809883a 	mov	r4,r17
   11f0c:	dac00615 	stw	r11,24(sp)
   11f10:	0011b540 	call	11b54 <print_repeat>
   11f14:	1000181e 	bne	r2,zero,11f78 <___vfprintf_internal_r+0x3b8>
   11f18:	dac00617 	ldw	r11,24(sp)
   11f1c:	e579883a 	add	fp,fp,r21
   11f20:	583fd626 	beq	r11,zero,11e7c <___vfprintf_internal_r+0x2bc>
   11f24:	00800b44 	movi	r2,45
   11f28:	d88007c5 	stb	r2,31(sp)
   11f2c:	b0800117 	ldw	r2,4(r22)
   11f30:	01c00044 	movi	r7,1
   11f34:	d98007c4 	addi	r6,sp,31
   11f38:	b00b883a 	mov	r5,r22
   11f3c:	8809883a 	mov	r4,r17
   11f40:	103ee83a 	callr	r2
   11f44:	10000c1e 	bne	r2,zero,11f78 <___vfprintf_internal_r+0x3b8>
   11f48:	e7000044 	addi	fp,fp,1
   11f4c:	003fcb06 	br	11e7c <___vfprintf_internal_r+0x2bc>
   11f50:	bdffffc4 	addi	r23,r23,-1
   11f54:	b8800003 	ldbu	r2,0(r23)
   11f58:	01c00044 	movi	r7,1
   11f5c:	d98007c4 	addi	r6,sp,31
   11f60:	d88007c5 	stb	r2,31(sp)
   11f64:	b0800117 	ldw	r2,4(r22)
   11f68:	b00b883a 	mov	r5,r22
   11f6c:	8809883a 	mov	r4,r17
   11f70:	103ee83a 	callr	r2
   11f74:	103fc426 	beq	r2,zero,11e88 <___vfprintf_internal_r+0x2c8>
   11f78:	073fffc4 	movi	fp,-1
   11f7c:	e005883a 	mov	r2,fp
   11f80:	dfc01917 	ldw	ra,100(sp)
   11f84:	df001817 	ldw	fp,96(sp)
   11f88:	ddc01717 	ldw	r23,92(sp)
   11f8c:	dd801617 	ldw	r22,88(sp)
   11f90:	dd401517 	ldw	r21,84(sp)
   11f94:	dd001417 	ldw	r20,80(sp)
   11f98:	dcc01317 	ldw	r19,76(sp)
   11f9c:	dc801217 	ldw	r18,72(sp)
   11fa0:	dc401117 	ldw	r17,68(sp)
   11fa4:	dc001017 	ldw	r16,64(sp)
   11fa8:	dec01a04 	addi	sp,sp,104
   11fac:	f800283a 	ret
   11fb0:	80800090 	cmplti	r2,r16,2
   11fb4:	1000081e 	bne	r2,zero,11fd8 <___vfprintf_internal_r+0x418>
   11fb8:	857fffc4 	addi	r21,r16,-1
   11fbc:	a80f883a 	mov	r7,r21
   11fc0:	01800804 	movi	r6,32
   11fc4:	b00b883a 	mov	r5,r22
   11fc8:	8809883a 	mov	r4,r17
   11fcc:	0011b540 	call	11b54 <print_repeat>
   11fd0:	103fe91e 	bne	r2,zero,11f78 <___vfprintf_internal_r+0x3b8>
   11fd4:	e579883a 	add	fp,fp,r21
   11fd8:	b8800017 	ldw	r2,0(r23)
   11fdc:	01c00044 	movi	r7,1
   11fe0:	d9800804 	addi	r6,sp,32
   11fe4:	d8800805 	stb	r2,32(sp)
   11fe8:	b0800117 	ldw	r2,4(r22)
   11fec:	b00b883a 	mov	r5,r22
   11ff0:	8809883a 	mov	r4,r17
   11ff4:	bd400104 	addi	r21,r23,4
   11ff8:	103ee83a 	callr	r2
   11ffc:	103fde1e 	bne	r2,zero,11f78 <___vfprintf_internal_r+0x3b8>
   12000:	e7000044 	addi	fp,fp,1
   12004:	a82f883a 	mov	r23,r21
   12008:	003f0b06 	br	11c38 <___vfprintf_internal_r+0x78>
   1200c:	bd400017 	ldw	r21,0(r23)
   12010:	b8800104 	addi	r2,r23,4
   12014:	d8800315 	stw	r2,12(sp)
   12018:	a809883a 	mov	r4,r21
   1201c:	0011b380 	call	11b38 <strlen>
   12020:	8095c83a 	sub	r10,r16,r2
   12024:	102f883a 	mov	r23,r2
   12028:	0280090e 	bge	zero,r10,12050 <___vfprintf_internal_r+0x490>
   1202c:	500f883a 	mov	r7,r10
   12030:	01800804 	movi	r6,32
   12034:	b00b883a 	mov	r5,r22
   12038:	8809883a 	mov	r4,r17
   1203c:	da800415 	stw	r10,16(sp)
   12040:	0011b540 	call	11b54 <print_repeat>
   12044:	103fcc1e 	bne	r2,zero,11f78 <___vfprintf_internal_r+0x3b8>
   12048:	da800417 	ldw	r10,16(sp)
   1204c:	e2b9883a 	add	fp,fp,r10
   12050:	b0800117 	ldw	r2,4(r22)
   12054:	b80f883a 	mov	r7,r23
   12058:	a80d883a 	mov	r6,r21
   1205c:	b00b883a 	mov	r5,r22
   12060:	8809883a 	mov	r4,r17
   12064:	103ee83a 	callr	r2
   12068:	103fc31e 	bne	r2,zero,11f78 <___vfprintf_internal_r+0x3b8>
   1206c:	e5f9883a 	add	fp,fp,r23
   12070:	ddc00317 	ldw	r23,12(sp)
   12074:	003ef006 	br	11c38 <___vfprintf_internal_r+0x78>
   12078:	d8000215 	stw	zero,8(sp)
   1207c:	d8000115 	stw	zero,4(sp)
   12080:	d8000015 	stw	zero,0(sp)
   12084:	04c00044 	movi	r19,1
   12088:	05000284 	movi	r20,10
   1208c:	04bfffc4 	movi	r18,-1
   12090:	043fffc4 	movi	r16,-1
   12094:	00800044 	movi	r2,1
   12098:	003ee706 	br	11c38 <___vfprintf_internal_r+0x78>
   1209c:	00800044 	movi	r2,1
   120a0:	d8800015 	stw	r2,0(sp)
   120a4:	003f1206 	br	11cf0 <___vfprintf_internal_r+0x130>
   120a8:	00800044 	movi	r2,1
   120ac:	d8800115 	stw	r2,4(sp)
   120b0:	008000c4 	movi	r2,3
   120b4:	003ee006 	br	11c38 <___vfprintf_internal_r+0x78>

000120b8 <__vfprintf_internal>:
   120b8:	00800074 	movhi	r2,1
   120bc:	300f883a 	mov	r7,r6
   120c0:	280d883a 	mov	r6,r5
   120c4:	200b883a 	mov	r5,r4
   120c8:	11104f17 	ldw	r4,16700(r2)
   120cc:	0011bc01 	jmpi	11bc0 <___vfprintf_internal_r>

000120d0 <__sfvwrite_small_dev>:
   120d0:	2880000b 	ldhu	r2,0(r5)
   120d4:	1080020c 	andi	r2,r2,8
   120d8:	10002526 	beq	r2,zero,12170 <__sfvwrite_small_dev+0xa0>
   120dc:	2880008f 	ldh	r2,2(r5)
   120e0:	defffb04 	addi	sp,sp,-20
   120e4:	dcc00315 	stw	r19,12(sp)
   120e8:	dc800215 	stw	r18,8(sp)
   120ec:	dc400115 	stw	r17,4(sp)
   120f0:	dc000015 	stw	r16,0(sp)
   120f4:	dfc00415 	stw	ra,16(sp)
   120f8:	2027883a 	mov	r19,r4
   120fc:	2821883a 	mov	r16,r5
   12100:	3025883a 	mov	r18,r6
   12104:	3823883a 	mov	r17,r7
   12108:	1000100e 	bge	r2,zero,1214c <__sfvwrite_small_dev+0x7c>
   1210c:	8080000b 	ldhu	r2,0(r16)
   12110:	10801014 	ori	r2,r2,64
   12114:	8080000d 	sth	r2,0(r16)
   12118:	00bfffc4 	movi	r2,-1
   1211c:	00000d06 	br	12154 <__sfvwrite_small_dev+0x84>
   12120:	88810050 	cmplti	r2,r17,1025
   12124:	880f883a 	mov	r7,r17
   12128:	1000011e 	bne	r2,zero,12130 <__sfvwrite_small_dev+0x60>
   1212c:	01c10004 	movi	r7,1024
   12130:	8140008f 	ldh	r5,2(r16)
   12134:	900d883a 	mov	r6,r18
   12138:	9809883a 	mov	r4,r19
   1213c:	00121780 	call	12178 <_write_r>
   12140:	00bff20e 	bge	zero,r2,1210c <__sfvwrite_small_dev+0x3c>
   12144:	88a3c83a 	sub	r17,r17,r2
   12148:	90a5883a 	add	r18,r18,r2
   1214c:	047ff416 	blt	zero,r17,12120 <__sfvwrite_small_dev+0x50>
   12150:	0005883a 	mov	r2,zero
   12154:	dfc00417 	ldw	ra,16(sp)
   12158:	dcc00317 	ldw	r19,12(sp)
   1215c:	dc800217 	ldw	r18,8(sp)
   12160:	dc400117 	ldw	r17,4(sp)
   12164:	dc000017 	ldw	r16,0(sp)
   12168:	dec00504 	addi	sp,sp,20
   1216c:	f800283a 	ret
   12170:	00bfffc4 	movi	r2,-1
   12174:	f800283a 	ret

00012178 <_write_r>:
   12178:	defffe04 	addi	sp,sp,-8
   1217c:	dc000015 	stw	r16,0(sp)
   12180:	00800074 	movhi	r2,1
   12184:	2021883a 	mov	r16,r4
   12188:	2809883a 	mov	r4,r5
   1218c:	300b883a 	mov	r5,r6
   12190:	380d883a 	mov	r6,r7
   12194:	dfc00115 	stw	ra,4(sp)
   12198:	10111215 	stw	zero,17480(r2)
   1219c:	001235c0 	call	1235c <write>
   121a0:	10ffffd8 	cmpnei	r3,r2,-1
   121a4:	1800041e 	bne	r3,zero,121b8 <_write_r+0x40>
   121a8:	00c00074 	movhi	r3,1
   121ac:	18d11217 	ldw	r3,17480(r3)
   121b0:	18000126 	beq	r3,zero,121b8 <_write_r+0x40>
   121b4:	80c00015 	stw	r3,0(r16)
   121b8:	dfc00117 	ldw	ra,4(sp)
   121bc:	dc000017 	ldw	r16,0(sp)
   121c0:	dec00204 	addi	sp,sp,8
   121c4:	f800283a 	ret

000121c8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   121c8:	defffc04 	addi	sp,sp,-16
   121cc:	df000315 	stw	fp,12(sp)
   121d0:	df000304 	addi	fp,sp,12
   121d4:	e13fff15 	stw	r4,-4(fp)
   121d8:	e17ffe15 	stw	r5,-8(fp)
   121dc:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
   121e0:	e0fffe17 	ldw	r3,-8(fp)
   121e4:	e0bfff17 	ldw	r2,-4(fp)
   121e8:	18800c26 	beq	r3,r2,1221c <alt_load_section+0x54>
  {
    while( to != end )
   121ec:	00000806 	br	12210 <alt_load_section+0x48>
    {
      *to++ = *from++;
   121f0:	e0ffff17 	ldw	r3,-4(fp)
   121f4:	18800104 	addi	r2,r3,4
   121f8:	e0bfff15 	stw	r2,-4(fp)
   121fc:	e0bffe17 	ldw	r2,-8(fp)
   12200:	11000104 	addi	r4,r2,4
   12204:	e13ffe15 	stw	r4,-8(fp)
   12208:	18c00017 	ldw	r3,0(r3)
   1220c:	10c00015 	stw	r3,0(r2)
    while( to != end )
   12210:	e0fffe17 	ldw	r3,-8(fp)
   12214:	e0bffd17 	ldw	r2,-12(fp)
   12218:	18bff51e 	bne	r3,r2,121f0 <alt_load_section+0x28>
    }
  }
}
   1221c:	0001883a 	nop
   12220:	e037883a 	mov	sp,fp
   12224:	df000017 	ldw	fp,0(sp)
   12228:	dec00104 	addi	sp,sp,4
   1222c:	f800283a 	ret

00012230 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   12230:	defffe04 	addi	sp,sp,-8
   12234:	dfc00115 	stw	ra,4(sp)
   12238:	df000015 	stw	fp,0(sp)
   1223c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   12240:	01800074 	movhi	r6,1
   12244:	31905904 	addi	r6,r6,16740
   12248:	01400074 	movhi	r5,1
   1224c:	294fa004 	addi	r5,r5,16000
   12250:	01000074 	movhi	r4,1
   12254:	21105904 	addi	r4,r4,16740
   12258:	00121c80 	call	121c8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   1225c:	01800074 	movhi	r6,1
   12260:	31808e04 	addi	r6,r6,568
   12264:	01400074 	movhi	r5,1
   12268:	29400804 	addi	r5,r5,32
   1226c:	01000074 	movhi	r4,1
   12270:	21000804 	addi	r4,r4,32
   12274:	00121c80 	call	121c8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   12278:	01800074 	movhi	r6,1
   1227c:	318fa004 	addi	r6,r6,16000
   12280:	01400074 	movhi	r5,1
   12284:	294e6f04 	addi	r5,r5,14780
   12288:	01000074 	movhi	r4,1
   1228c:	210e6f04 	addi	r4,r4,14780
   12290:	00121c80 	call	121c8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   12294:	00129180 	call	12918 <alt_dcache_flush_all>
  alt_icache_flush_all();
   12298:	0012aa00 	call	12aa0 <alt_icache_flush_all>
}
   1229c:	0001883a 	nop
   122a0:	e037883a 	mov	sp,fp
   122a4:	dfc00117 	ldw	ra,4(sp)
   122a8:	df000017 	ldw	fp,0(sp)
   122ac:	dec00204 	addi	sp,sp,8
   122b0:	f800283a 	ret

000122b4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   122b4:	defffd04 	addi	sp,sp,-12
   122b8:	dfc00215 	stw	ra,8(sp)
   122bc:	df000115 	stw	fp,4(sp)
   122c0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   122c4:	0009883a 	mov	r4,zero
   122c8:	00124540 	call	12454 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   122cc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   122d0:	001248c0 	call	1248c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   122d4:	01800074 	movhi	r6,1
   122d8:	318f9704 	addi	r6,r6,15964
   122dc:	01400074 	movhi	r5,1
   122e0:	294f9704 	addi	r5,r5,15964
   122e4:	01000074 	movhi	r4,1
   122e8:	210f9704 	addi	r4,r4,15964
   122ec:	0012e180 	call	12e18 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   122f0:	d0a0c517 	ldw	r2,-31980(gp)
   122f4:	d0e0c617 	ldw	r3,-31976(gp)
   122f8:	d120c717 	ldw	r4,-31972(gp)
   122fc:	200d883a 	mov	r6,r4
   12300:	180b883a 	mov	r5,r3
   12304:	1009883a 	mov	r4,r2
   12308:	00117180 	call	11718 <main>
   1230c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   12310:	01000044 	movi	r4,1
   12314:	00128480 	call	12848 <close>
  exit (result);
   12318:	e13fff17 	ldw	r4,-4(fp)
   1231c:	00137cc0 	call	137cc <exit>

00012320 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12320:	defffe04 	addi	sp,sp,-8
   12324:	dfc00115 	stw	ra,4(sp)
   12328:	df000015 	stw	fp,0(sp)
   1232c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12330:	d0a00717 	ldw	r2,-32740(gp)
   12334:	10000326 	beq	r2,zero,12344 <alt_get_errno+0x24>
   12338:	d0a00717 	ldw	r2,-32740(gp)
   1233c:	103ee83a 	callr	r2
   12340:	00000106 	br	12348 <alt_get_errno+0x28>
   12344:	d0a0c404 	addi	r2,gp,-31984
}
   12348:	e037883a 	mov	sp,fp
   1234c:	dfc00117 	ldw	ra,4(sp)
   12350:	df000017 	ldw	fp,0(sp)
   12354:	dec00204 	addi	sp,sp,8
   12358:	f800283a 	ret

0001235c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   1235c:	defff904 	addi	sp,sp,-28
   12360:	dfc00615 	stw	ra,24(sp)
   12364:	df000515 	stw	fp,20(sp)
   12368:	df000504 	addi	fp,sp,20
   1236c:	e13ffd15 	stw	r4,-12(fp)
   12370:	e17ffc15 	stw	r5,-16(fp)
   12374:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12378:	e0bffd17 	ldw	r2,-12(fp)
   1237c:	10000616 	blt	r2,zero,12398 <write+0x3c>
   12380:	e0bffd17 	ldw	r2,-12(fp)
   12384:	10c00324 	muli	r3,r2,12
   12388:	00800074 	movhi	r2,1
   1238c:	108fee04 	addi	r2,r2,16312
   12390:	1885883a 	add	r2,r3,r2
   12394:	00000106 	br	1239c <write+0x40>
   12398:	0005883a 	mov	r2,zero
   1239c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   123a0:	e0bfff17 	ldw	r2,-4(fp)
   123a4:	10002126 	beq	r2,zero,1242c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   123a8:	e0bfff17 	ldw	r2,-4(fp)
   123ac:	10800217 	ldw	r2,8(r2)
   123b0:	108000cc 	andi	r2,r2,3
   123b4:	10001826 	beq	r2,zero,12418 <write+0xbc>
   123b8:	e0bfff17 	ldw	r2,-4(fp)
   123bc:	10800017 	ldw	r2,0(r2)
   123c0:	10800617 	ldw	r2,24(r2)
   123c4:	10001426 	beq	r2,zero,12418 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   123c8:	e0bfff17 	ldw	r2,-4(fp)
   123cc:	10800017 	ldw	r2,0(r2)
   123d0:	10800617 	ldw	r2,24(r2)
   123d4:	e0fffb17 	ldw	r3,-20(fp)
   123d8:	180d883a 	mov	r6,r3
   123dc:	e17ffc17 	ldw	r5,-16(fp)
   123e0:	e13fff17 	ldw	r4,-4(fp)
   123e4:	103ee83a 	callr	r2
   123e8:	e0bffe15 	stw	r2,-8(fp)
   123ec:	e0bffe17 	ldw	r2,-8(fp)
   123f0:	1000070e 	bge	r2,zero,12410 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   123f4:	00123200 	call	12320 <alt_get_errno>
   123f8:	1007883a 	mov	r3,r2
   123fc:	e0bffe17 	ldw	r2,-8(fp)
   12400:	0085c83a 	sub	r2,zero,r2
   12404:	18800015 	stw	r2,0(r3)
        return -1;
   12408:	00bfffc4 	movi	r2,-1
   1240c:	00000c06 	br	12440 <write+0xe4>
      }
      return rval;
   12410:	e0bffe17 	ldw	r2,-8(fp)
   12414:	00000a06 	br	12440 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   12418:	00123200 	call	12320 <alt_get_errno>
   1241c:	1007883a 	mov	r3,r2
   12420:	00800344 	movi	r2,13
   12424:	18800015 	stw	r2,0(r3)
   12428:	00000406 	br	1243c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   1242c:	00123200 	call	12320 <alt_get_errno>
   12430:	1007883a 	mov	r3,r2
   12434:	00801444 	movi	r2,81
   12438:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1243c:	00bfffc4 	movi	r2,-1
}
   12440:	e037883a 	mov	sp,fp
   12444:	dfc00117 	ldw	ra,4(sp)
   12448:	df000017 	ldw	fp,0(sp)
   1244c:	dec00204 	addi	sp,sp,8
   12450:	f800283a 	ret

00012454 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   12454:	defffd04 	addi	sp,sp,-12
   12458:	dfc00215 	stw	ra,8(sp)
   1245c:	df000115 	stw	fp,4(sp)
   12460:	df000104 	addi	fp,sp,4
   12464:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
   12468:	00132fc0 	call	132fc <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1246c:	00800044 	movi	r2,1
   12470:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   12474:	0001883a 	nop
   12478:	e037883a 	mov	sp,fp
   1247c:	dfc00117 	ldw	ra,4(sp)
   12480:	df000017 	ldw	fp,0(sp)
   12484:	dec00204 	addi	sp,sp,8
   12488:	f800283a 	ret

0001248c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1248c:	defffe04 	addi	sp,sp,-8
   12490:	dfc00115 	stw	ra,4(sp)
   12494:	df000015 	stw	fp,0(sp)
   12498:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   1249c:	01c00044 	movi	r7,1
   124a0:	01800044 	movi	r6,1
   124a4:	000b883a 	mov	r5,zero
   124a8:	01040004 	movi	r4,4096
   124ac:	00127900 	call	12790 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, jtag);
   124b0:	01000074 	movhi	r4,1
   124b4:	210fd904 	addi	r4,r4,16228
   124b8:	001298c0 	call	1298c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   124bc:	0001883a 	nop
}
   124c0:	0001883a 	nop
   124c4:	e037883a 	mov	sp,fp
   124c8:	dfc00117 	ldw	ra,4(sp)
   124cc:	df000017 	ldw	fp,0(sp)
   124d0:	dec00204 	addi	sp,sp,8
   124d4:	f800283a 	ret

000124d8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   124d8:	defffa04 	addi	sp,sp,-24
   124dc:	dfc00515 	stw	ra,20(sp)
   124e0:	df000415 	stw	fp,16(sp)
   124e4:	df000404 	addi	fp,sp,16
   124e8:	e13ffe15 	stw	r4,-8(fp)
   124ec:	e17ffd15 	stw	r5,-12(fp)
   124f0:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   124f4:	e0bffe17 	ldw	r2,-8(fp)
   124f8:	10800017 	ldw	r2,0(r2)
   124fc:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   12500:	e0bfff17 	ldw	r2,-4(fp)
   12504:	10c00a04 	addi	r3,r2,40
   12508:	e0bffe17 	ldw	r2,-8(fp)
   1250c:	10800217 	ldw	r2,8(r2)
   12510:	100f883a 	mov	r7,r2
   12514:	e1bffc17 	ldw	r6,-16(fp)
   12518:	e17ffd17 	ldw	r5,-12(fp)
   1251c:	1809883a 	mov	r4,r3
   12520:	00125980 	call	12598 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   12524:	e037883a 	mov	sp,fp
   12528:	dfc00117 	ldw	ra,4(sp)
   1252c:	df000017 	ldw	fp,0(sp)
   12530:	dec00204 	addi	sp,sp,8
   12534:	f800283a 	ret

00012538 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   12538:	defffa04 	addi	sp,sp,-24
   1253c:	dfc00515 	stw	ra,20(sp)
   12540:	df000415 	stw	fp,16(sp)
   12544:	df000404 	addi	fp,sp,16
   12548:	e13ffe15 	stw	r4,-8(fp)
   1254c:	e17ffd15 	stw	r5,-12(fp)
   12550:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   12554:	e0bffe17 	ldw	r2,-8(fp)
   12558:	10800017 	ldw	r2,0(r2)
   1255c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   12560:	e0bfff17 	ldw	r2,-4(fp)
   12564:	10c00a04 	addi	r3,r2,40
   12568:	e0bffe17 	ldw	r2,-8(fp)
   1256c:	10800217 	ldw	r2,8(r2)
   12570:	100f883a 	mov	r7,r2
   12574:	e1bffc17 	ldw	r6,-16(fp)
   12578:	e17ffd17 	ldw	r5,-12(fp)
   1257c:	1809883a 	mov	r4,r3
   12580:	00126840 	call	12684 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   12584:	e037883a 	mov	sp,fp
   12588:	dfc00117 	ldw	ra,4(sp)
   1258c:	df000017 	ldw	fp,0(sp)
   12590:	dec00204 	addi	sp,sp,8
   12594:	f800283a 	ret

00012598 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   12598:	defff704 	addi	sp,sp,-36
   1259c:	df000815 	stw	fp,32(sp)
   125a0:	df000804 	addi	fp,sp,32
   125a4:	e13ffb15 	stw	r4,-20(fp)
   125a8:	e17ffa15 	stw	r5,-24(fp)
   125ac:	e1bff915 	stw	r6,-28(fp)
   125b0:	e1fff815 	stw	r7,-32(fp)
  unsigned int base = sp->base;
   125b4:	e0bffb17 	ldw	r2,-20(fp)
   125b8:	10800017 	ldw	r2,0(r2)
   125bc:	e0bffe15 	stw	r2,-8(fp)

  char * ptr = buffer;
   125c0:	e0bffa17 	ldw	r2,-24(fp)
   125c4:	e0bfff15 	stw	r2,-4(fp)
  char * end = buffer + space;
   125c8:	e0bff917 	ldw	r2,-28(fp)
   125cc:	e0fffa17 	ldw	r3,-24(fp)
   125d0:	1885883a 	add	r2,r3,r2
   125d4:	e0bffd15 	stw	r2,-12(fp)

  while (ptr < end)
   125d8:	00001206 	br	12624 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   125dc:	e0bffe17 	ldw	r2,-8(fp)
   125e0:	10800037 	ldwio	r2,0(r2)
   125e4:	e0bffc15 	stw	r2,-16(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   125e8:	e0bffc17 	ldw	r2,-16(fp)
   125ec:	10a0000c 	andi	r2,r2,32768
   125f0:	10000626 	beq	r2,zero,1260c <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   125f4:	e0bfff17 	ldw	r2,-4(fp)
   125f8:	10c00044 	addi	r3,r2,1
   125fc:	e0ffff15 	stw	r3,-4(fp)
   12600:	e0fffc17 	ldw	r3,-16(fp)
   12604:	10c00005 	stb	r3,0(r2)
   12608:	00000606 	br	12624 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   1260c:	e0ffff17 	ldw	r3,-4(fp)
   12610:	e0bffa17 	ldw	r2,-24(fp)
   12614:	1880071e 	bne	r3,r2,12634 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   12618:	e0bff817 	ldw	r2,-32(fp)
   1261c:	1090000c 	andi	r2,r2,16384
   12620:	1000061e 	bne	r2,zero,1263c <altera_avalon_jtag_uart_read+0xa4>
  while (ptr < end)
   12624:	e0ffff17 	ldw	r3,-4(fp)
   12628:	e0bffd17 	ldw	r2,-12(fp)
   1262c:	18bfeb36 	bltu	r3,r2,125dc <altera_avalon_jtag_uart_read+0x44>
   12630:	00000306 	br	12640 <altera_avalon_jtag_uart_read+0xa8>
      break;
   12634:	0001883a 	nop
   12638:	00000106 	br	12640 <altera_avalon_jtag_uart_read+0xa8>
      break;   
   1263c:	0001883a 	nop
    
  }

  if (ptr != buffer)
   12640:	e0ffff17 	ldw	r3,-4(fp)
   12644:	e0bffa17 	ldw	r2,-24(fp)
   12648:	18800426 	beq	r3,r2,1265c <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   1264c:	e0ffff17 	ldw	r3,-4(fp)
   12650:	e0bffa17 	ldw	r2,-24(fp)
   12654:	1885c83a 	sub	r2,r3,r2
   12658:	00000606 	br	12674 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   1265c:	e0bff817 	ldw	r2,-32(fp)
   12660:	1090000c 	andi	r2,r2,16384
   12664:	10000226 	beq	r2,zero,12670 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   12668:	00bffd44 	movi	r2,-11
   1266c:	00000106 	br	12674 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   12670:	00bffec4 	movi	r2,-5
}
   12674:	e037883a 	mov	sp,fp
   12678:	df000017 	ldw	fp,0(sp)
   1267c:	dec00104 	addi	sp,sp,4
   12680:	f800283a 	ret

00012684 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   12684:	defff904 	addi	sp,sp,-28
   12688:	df000615 	stw	fp,24(sp)
   1268c:	df000604 	addi	fp,sp,24
   12690:	e13ffd15 	stw	r4,-12(fp)
   12694:	e17ffc15 	stw	r5,-16(fp)
   12698:	e1bffb15 	stw	r6,-20(fp)
   1269c:	e1fffa15 	stw	r7,-24(fp)
  unsigned int base = sp->base;
   126a0:	e0bffd17 	ldw	r2,-12(fp)
   126a4:	10800017 	ldw	r2,0(r2)
   126a8:	e0bfff15 	stw	r2,-4(fp)

  const char * end = ptr + count;
   126ac:	e0bffb17 	ldw	r2,-20(fp)
   126b0:	e0fffc17 	ldw	r3,-16(fp)
   126b4:	1885883a 	add	r2,r3,r2
   126b8:	e0bffe15 	stw	r2,-8(fp)

  while (ptr < end)
   126bc:	00000e06 	br	126f8 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   126c0:	e0bfff17 	ldw	r2,-4(fp)
   126c4:	10800104 	addi	r2,r2,4
   126c8:	10800037 	ldwio	r2,0(r2)
   126cc:	10bfffec 	andhi	r2,r2,65535
   126d0:	10000926 	beq	r2,zero,126f8 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   126d4:	e0ffff17 	ldw	r3,-4(fp)
   126d8:	e0bffc17 	ldw	r2,-16(fp)
   126dc:	11000044 	addi	r4,r2,1
   126e0:	e13ffc15 	stw	r4,-16(fp)
   126e4:	10800003 	ldbu	r2,0(r2)
   126e8:	10803fcc 	andi	r2,r2,255
   126ec:	1080201c 	xori	r2,r2,128
   126f0:	10bfe004 	addi	r2,r2,-128
   126f4:	18800035 	stwio	r2,0(r3)
  while (ptr < end)
   126f8:	e0fffc17 	ldw	r3,-16(fp)
   126fc:	e0bffe17 	ldw	r2,-8(fp)
   12700:	18bfef36 	bltu	r3,r2,126c0 <altera_avalon_jtag_uart_write+0x3c>

  return count;
   12704:	e0bffb17 	ldw	r2,-20(fp)
}
   12708:	e037883a 	mov	sp,fp
   1270c:	df000017 	ldw	fp,0(sp)
   12710:	dec00104 	addi	sp,sp,4
   12714:	f800283a 	ret

00012718 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   12718:	defffa04 	addi	sp,sp,-24
   1271c:	dfc00515 	stw	ra,20(sp)
   12720:	df000415 	stw	fp,16(sp)
   12724:	df000404 	addi	fp,sp,16
   12728:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1272c:	0007883a 	mov	r3,zero
   12730:	e0bffc17 	ldw	r2,-16(fp)
   12734:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   12738:	e0bffc17 	ldw	r2,-16(fp)
   1273c:	10800104 	addi	r2,r2,4
   12740:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
   12744:	0005303a 	rdctl	r2,status
   12748:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1274c:	e0fffd17 	ldw	r3,-12(fp)
   12750:	00bfff84 	movi	r2,-2
   12754:	1884703a 	and	r2,r3,r2
   12758:	1001703a 	wrctl	status,r2
  return context;
   1275c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   12760:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
   12764:	00131d00 	call	131d0 <alt_tick>
   12768:	e0bfff17 	ldw	r2,-4(fp)
   1276c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   12770:	e0bffe17 	ldw	r2,-8(fp)
   12774:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   12778:	0001883a 	nop
   1277c:	e037883a 	mov	sp,fp
   12780:	dfc00117 	ldw	ra,4(sp)
   12784:	df000017 	ldw	fp,0(sp)
   12788:	dec00204 	addi	sp,sp,8
   1278c:	f800283a 	ret

00012790 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   12790:	defff804 	addi	sp,sp,-32
   12794:	dfc00715 	stw	ra,28(sp)
   12798:	df000615 	stw	fp,24(sp)
   1279c:	df000604 	addi	fp,sp,24
   127a0:	e13ffe15 	stw	r4,-8(fp)
   127a4:	e17ffd15 	stw	r5,-12(fp)
   127a8:	e1bffc15 	stw	r6,-16(fp)
   127ac:	e1fffb15 	stw	r7,-20(fp)
   127b0:	e0bffb17 	ldw	r2,-20(fp)
   127b4:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   127b8:	d0a0c917 	ldw	r2,-31964(gp)
   127bc:	1000021e 	bne	r2,zero,127c8 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   127c0:	e0bfff17 	ldw	r2,-4(fp)
   127c4:	d0a0c915 	stw	r2,-31964(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   127c8:	e0bffe17 	ldw	r2,-8(fp)
   127cc:	10800104 	addi	r2,r2,4
   127d0:	00c001c4 	movi	r3,7
   127d4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   127d8:	d8000015 	stw	zero,0(sp)
   127dc:	e1fffe17 	ldw	r7,-8(fp)
   127e0:	01800074 	movhi	r6,1
   127e4:	3189c604 	addi	r6,r6,10008
   127e8:	e17ffc17 	ldw	r5,-16(fp)
   127ec:	e13ffd17 	ldw	r4,-12(fp)
   127f0:	0012ad40 	call	12ad4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   127f4:	0001883a 	nop
   127f8:	e037883a 	mov	sp,fp
   127fc:	dfc00117 	ldw	ra,4(sp)
   12800:	df000017 	ldw	fp,0(sp)
   12804:	dec00204 	addi	sp,sp,8
   12808:	f800283a 	ret

0001280c <alt_get_errno>:
{
   1280c:	defffe04 	addi	sp,sp,-8
   12810:	dfc00115 	stw	ra,4(sp)
   12814:	df000015 	stw	fp,0(sp)
   12818:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1281c:	d0a00717 	ldw	r2,-32740(gp)
   12820:	10000326 	beq	r2,zero,12830 <alt_get_errno+0x24>
   12824:	d0a00717 	ldw	r2,-32740(gp)
   12828:	103ee83a 	callr	r2
   1282c:	00000106 	br	12834 <alt_get_errno+0x28>
   12830:	d0a0c404 	addi	r2,gp,-31984
}
   12834:	e037883a 	mov	sp,fp
   12838:	dfc00117 	ldw	ra,4(sp)
   1283c:	df000017 	ldw	fp,0(sp)
   12840:	dec00204 	addi	sp,sp,8
   12844:	f800283a 	ret

00012848 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   12848:	defffb04 	addi	sp,sp,-20
   1284c:	dfc00415 	stw	ra,16(sp)
   12850:	df000315 	stw	fp,12(sp)
   12854:	df000304 	addi	fp,sp,12
   12858:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   1285c:	e0bffd17 	ldw	r2,-12(fp)
   12860:	10000616 	blt	r2,zero,1287c <close+0x34>
   12864:	e0bffd17 	ldw	r2,-12(fp)
   12868:	10c00324 	muli	r3,r2,12
   1286c:	00800074 	movhi	r2,1
   12870:	108fee04 	addi	r2,r2,16312
   12874:	1885883a 	add	r2,r3,r2
   12878:	00000106 	br	12880 <close+0x38>
   1287c:	0005883a 	mov	r2,zero
   12880:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
   12884:	e0bfff17 	ldw	r2,-4(fp)
   12888:	10001926 	beq	r2,zero,128f0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   1288c:	e0bfff17 	ldw	r2,-4(fp)
   12890:	10800017 	ldw	r2,0(r2)
   12894:	10800417 	ldw	r2,16(r2)
   12898:	10000626 	beq	r2,zero,128b4 <close+0x6c>
   1289c:	e0bfff17 	ldw	r2,-4(fp)
   128a0:	10800017 	ldw	r2,0(r2)
   128a4:	10800417 	ldw	r2,16(r2)
   128a8:	e13fff17 	ldw	r4,-4(fp)
   128ac:	103ee83a 	callr	r2
   128b0:	00000106 	br	128b8 <close+0x70>
   128b4:	0005883a 	mov	r2,zero
   128b8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   128bc:	e13ffd17 	ldw	r4,-12(fp)
   128c0:	00130dc0 	call	130dc <alt_release_fd>
    if (rval < 0)
   128c4:	e0bffe17 	ldw	r2,-8(fp)
   128c8:	1000070e 	bge	r2,zero,128e8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   128cc:	001280c0 	call	1280c <alt_get_errno>
   128d0:	1007883a 	mov	r3,r2
   128d4:	e0bffe17 	ldw	r2,-8(fp)
   128d8:	0085c83a 	sub	r2,zero,r2
   128dc:	18800015 	stw	r2,0(r3)
      return -1;
   128e0:	00bfffc4 	movi	r2,-1
   128e4:	00000706 	br	12904 <close+0xbc>
    }
    return 0;
   128e8:	0005883a 	mov	r2,zero
   128ec:	00000506 	br	12904 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   128f0:	001280c0 	call	1280c <alt_get_errno>
   128f4:	1007883a 	mov	r3,r2
   128f8:	00801444 	movi	r2,81
   128fc:	18800015 	stw	r2,0(r3)
    return -1;
   12900:	00bfffc4 	movi	r2,-1
  }
}
   12904:	e037883a 	mov	sp,fp
   12908:	dfc00117 	ldw	ra,4(sp)
   1290c:	df000017 	ldw	fp,0(sp)
   12910:	dec00204 	addi	sp,sp,8
   12914:	f800283a 	ret

00012918 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   12918:	defffe04 	addi	sp,sp,-8
   1291c:	df000115 	stw	fp,4(sp)
   12920:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   12924:	e03fff15 	stw	zero,-4(fp)
   12928:	00000506 	br	12940 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   1292c:	e0bfff17 	ldw	r2,-4(fp)
   12930:	1000003b 	flushd	0(r2)
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   12934:	e0bfff17 	ldw	r2,-4(fp)
   12938:	10800804 	addi	r2,r2,32
   1293c:	e0bfff15 	stw	r2,-4(fp)
   12940:	e0bfff17 	ldw	r2,-4(fp)
   12944:	10820030 	cmpltui	r2,r2,2048
   12948:	103ff81e 	bne	r2,zero,1292c <alt_dcache_flush_all+0x14>
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1294c:	0001883a 	nop
   12950:	e037883a 	mov	sp,fp
   12954:	df000017 	ldw	fp,0(sp)
   12958:	dec00104 	addi	sp,sp,4
   1295c:	f800283a 	ret

00012960 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   12960:	defffc04 	addi	sp,sp,-16
   12964:	df000315 	stw	fp,12(sp)
   12968:	df000304 	addi	fp,sp,12
   1296c:	e13fff15 	stw	r4,-4(fp)
   12970:	e17ffe15 	stw	r5,-8(fp)
   12974:	e1bffd15 	stw	r6,-12(fp)
  return len;
   12978:	e0bffd17 	ldw	r2,-12(fp)
}
   1297c:	e037883a 	mov	sp,fp
   12980:	df000017 	ldw	fp,0(sp)
   12984:	dec00104 	addi	sp,sp,4
   12988:	f800283a 	ret

0001298c <alt_dev_reg>:
    }
    /* all other elements are set to zero */
  };
  
int alt_dev_reg (alt_dev* dev)
{
   1298c:	defffd04 	addi	sp,sp,-12
   12990:	dfc00215 	stw	ra,8(sp)
   12994:	df000115 	stw	fp,4(sp)
   12998:	df000104 	addi	fp,sp,4
   1299c:	e13fff15 	stw	r4,-4(fp)
    return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   129a0:	d1600404 	addi	r5,gp,-32752
   129a4:	e13fff17 	ldw	r4,-4(fp)
   129a8:	00129fc0 	call	129fc <alt_dev_llist_insert>
}
   129ac:	e037883a 	mov	sp,fp
   129b0:	dfc00117 	ldw	ra,4(sp)
   129b4:	df000017 	ldw	fp,0(sp)
   129b8:	dec00204 	addi	sp,sp,8
   129bc:	f800283a 	ret

000129c0 <alt_get_errno>:
{
   129c0:	defffe04 	addi	sp,sp,-8
   129c4:	dfc00115 	stw	ra,4(sp)
   129c8:	df000015 	stw	fp,0(sp)
   129cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   129d0:	d0a00717 	ldw	r2,-32740(gp)
   129d4:	10000326 	beq	r2,zero,129e4 <alt_get_errno+0x24>
   129d8:	d0a00717 	ldw	r2,-32740(gp)
   129dc:	103ee83a 	callr	r2
   129e0:	00000106 	br	129e8 <alt_get_errno+0x28>
   129e4:	d0a0c404 	addi	r2,gp,-31984
}
   129e8:	e037883a 	mov	sp,fp
   129ec:	dfc00117 	ldw	ra,4(sp)
   129f0:	df000017 	ldw	fp,0(sp)
   129f4:	dec00204 	addi	sp,sp,8
   129f8:	f800283a 	ret

000129fc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   129fc:	defffa04 	addi	sp,sp,-24
   12a00:	dfc00515 	stw	ra,20(sp)
   12a04:	df000415 	stw	fp,16(sp)
   12a08:	df000404 	addi	fp,sp,16
   12a0c:	e13ffd15 	stw	r4,-12(fp)
   12a10:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   12a14:	e0bffd17 	ldw	r2,-12(fp)
   12a18:	10000326 	beq	r2,zero,12a28 <alt_dev_llist_insert+0x2c>
   12a1c:	e0bffd17 	ldw	r2,-12(fp)
   12a20:	10800217 	ldw	r2,8(r2)
   12a24:	1000061e 	bne	r2,zero,12a40 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   12a28:	00129c00 	call	129c0 <alt_get_errno>
   12a2c:	1007883a 	mov	r3,r2
   12a30:	00800584 	movi	r2,22
   12a34:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   12a38:	00bffa84 	movi	r2,-22
   12a3c:	00001306 	br	12a8c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   12a40:	e0bffd17 	ldw	r2,-12(fp)
   12a44:	e0fffc17 	ldw	r3,-16(fp)
   12a48:	e0ffff15 	stw	r3,-4(fp)
   12a4c:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   12a50:	e0bffe17 	ldw	r2,-8(fp)
   12a54:	e0ffff17 	ldw	r3,-4(fp)
   12a58:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   12a5c:	e0bfff17 	ldw	r2,-4(fp)
   12a60:	10c00017 	ldw	r3,0(r2)
   12a64:	e0bffe17 	ldw	r2,-8(fp)
   12a68:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   12a6c:	e0bfff17 	ldw	r2,-4(fp)
   12a70:	10800017 	ldw	r2,0(r2)
   12a74:	e0fffe17 	ldw	r3,-8(fp)
   12a78:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   12a7c:	e0bfff17 	ldw	r2,-4(fp)
   12a80:	e0fffe17 	ldw	r3,-8(fp)
   12a84:	10c00015 	stw	r3,0(r2)

  return 0;  
   12a88:	0005883a 	mov	r2,zero
}
   12a8c:	e037883a 	mov	sp,fp
   12a90:	dfc00117 	ldw	ra,4(sp)
   12a94:	df000017 	ldw	fp,0(sp)
   12a98:	dec00204 	addi	sp,sp,8
   12a9c:	f800283a 	ret

00012aa0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   12aa0:	defffe04 	addi	sp,sp,-8
   12aa4:	dfc00115 	stw	ra,4(sp)
   12aa8:	df000015 	stw	fp,0(sp)
   12aac:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   12ab0:	01420004 	movi	r5,2048
   12ab4:	0009883a 	mov	r4,zero
   12ab8:	00136a40 	call	136a4 <alt_icache_flush>
#endif
}
   12abc:	0001883a 	nop
   12ac0:	e037883a 	mov	sp,fp
   12ac4:	dfc00117 	ldw	ra,4(sp)
   12ac8:	df000017 	ldw	fp,0(sp)
   12acc:	dec00204 	addi	sp,sp,8
   12ad0:	f800283a 	ret

00012ad4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   12ad4:	defff904 	addi	sp,sp,-28
   12ad8:	dfc00615 	stw	ra,24(sp)
   12adc:	df000515 	stw	fp,20(sp)
   12ae0:	df000504 	addi	fp,sp,20
   12ae4:	e13fff15 	stw	r4,-4(fp)
   12ae8:	e17ffe15 	stw	r5,-8(fp)
   12aec:	e1bffd15 	stw	r6,-12(fp)
   12af0:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   12af4:	e0800217 	ldw	r2,8(fp)
   12af8:	d8800015 	stw	r2,0(sp)
   12afc:	e1fffc17 	ldw	r7,-16(fp)
   12b00:	e1bffd17 	ldw	r6,-12(fp)
   12b04:	e17ffe17 	ldw	r5,-8(fp)
   12b08:	e13fff17 	ldw	r4,-4(fp)
   12b0c:	0012c840 	call	12c84 <alt_iic_isr_register>
}  
   12b10:	e037883a 	mov	sp,fp
   12b14:	dfc00117 	ldw	ra,4(sp)
   12b18:	df000017 	ldw	fp,0(sp)
   12b1c:	dec00204 	addi	sp,sp,8
   12b20:	f800283a 	ret

00012b24 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   12b24:	defff904 	addi	sp,sp,-28
   12b28:	df000615 	stw	fp,24(sp)
   12b2c:	df000604 	addi	fp,sp,24
   12b30:	e13ffb15 	stw	r4,-20(fp)
   12b34:	e17ffa15 	stw	r5,-24(fp)
   12b38:	e0bffa17 	ldw	r2,-24(fp)
   12b3c:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   12b40:	0005303a 	rdctl	r2,status
   12b44:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12b48:	e0fffe17 	ldw	r3,-8(fp)
   12b4c:	00bfff84 	movi	r2,-2
   12b50:	1884703a 	and	r2,r3,r2
   12b54:	1001703a 	wrctl	status,r2
  return context;
   12b58:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   12b5c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   12b60:	00c00044 	movi	r3,1
   12b64:	e0bfff17 	ldw	r2,-4(fp)
   12b68:	1884983a 	sll	r2,r3,r2
   12b6c:	1007883a 	mov	r3,r2
   12b70:	d0a0c817 	ldw	r2,-31968(gp)
   12b74:	1884b03a 	or	r2,r3,r2
   12b78:	d0a0c815 	stw	r2,-31968(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   12b7c:	d0a0c817 	ldw	r2,-31968(gp)
   12b80:	100170fa 	wrctl	ienable,r2
   12b84:	e0bffd17 	ldw	r2,-12(fp)
   12b88:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   12b8c:	e0bffc17 	ldw	r2,-16(fp)
   12b90:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   12b94:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   12b98:	0001883a 	nop
}
   12b9c:	e037883a 	mov	sp,fp
   12ba0:	df000017 	ldw	fp,0(sp)
   12ba4:	dec00104 	addi	sp,sp,4
   12ba8:	f800283a 	ret

00012bac <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   12bac:	defff904 	addi	sp,sp,-28
   12bb0:	df000615 	stw	fp,24(sp)
   12bb4:	df000604 	addi	fp,sp,24
   12bb8:	e13ffb15 	stw	r4,-20(fp)
   12bbc:	e17ffa15 	stw	r5,-24(fp)
   12bc0:	e0bffa17 	ldw	r2,-24(fp)
   12bc4:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   12bc8:	0005303a 	rdctl	r2,status
   12bcc:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12bd0:	e0fffe17 	ldw	r3,-8(fp)
   12bd4:	00bfff84 	movi	r2,-2
   12bd8:	1884703a 	and	r2,r3,r2
   12bdc:	1001703a 	wrctl	status,r2
  return context;
   12be0:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
   12be4:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
   12be8:	00c00044 	movi	r3,1
   12bec:	e0bfff17 	ldw	r2,-4(fp)
   12bf0:	1884983a 	sll	r2,r3,r2
   12bf4:	0084303a 	nor	r2,zero,r2
   12bf8:	1007883a 	mov	r3,r2
   12bfc:	d0a0c817 	ldw	r2,-31968(gp)
   12c00:	1884703a 	and	r2,r3,r2
   12c04:	d0a0c815 	stw	r2,-31968(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   12c08:	d0a0c817 	ldw	r2,-31968(gp)
   12c0c:	100170fa 	wrctl	ienable,r2
   12c10:	e0bffd17 	ldw	r2,-12(fp)
   12c14:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   12c18:	e0bffc17 	ldw	r2,-16(fp)
   12c1c:	1001703a 	wrctl	status,r2
  return 0;
   12c20:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   12c24:	0001883a 	nop
}
   12c28:	e037883a 	mov	sp,fp
   12c2c:	df000017 	ldw	fp,0(sp)
   12c30:	dec00104 	addi	sp,sp,4
   12c34:	f800283a 	ret

00012c38 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   12c38:	defffc04 	addi	sp,sp,-16
   12c3c:	df000315 	stw	fp,12(sp)
   12c40:	df000304 	addi	fp,sp,12
   12c44:	e13ffe15 	stw	r4,-8(fp)
   12c48:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   12c4c:	000530fa 	rdctl	r2,ienable
   12c50:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   12c54:	00c00044 	movi	r3,1
   12c58:	e0bffd17 	ldw	r2,-12(fp)
   12c5c:	1884983a 	sll	r2,r3,r2
   12c60:	1007883a 	mov	r3,r2
   12c64:	e0bfff17 	ldw	r2,-4(fp)
   12c68:	1884703a 	and	r2,r3,r2
   12c6c:	1004c03a 	cmpne	r2,r2,zero
   12c70:	10803fcc 	andi	r2,r2,255
}
   12c74:	e037883a 	mov	sp,fp
   12c78:	df000017 	ldw	fp,0(sp)
   12c7c:	dec00104 	addi	sp,sp,4
   12c80:	f800283a 	ret

00012c84 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   12c84:	defff504 	addi	sp,sp,-44
   12c88:	dfc00a15 	stw	ra,40(sp)
   12c8c:	df000915 	stw	fp,36(sp)
   12c90:	df000904 	addi	fp,sp,36
   12c94:	e13ffa15 	stw	r4,-24(fp)
   12c98:	e17ff915 	stw	r5,-28(fp)
   12c9c:	e1bff815 	stw	r6,-32(fp)
   12ca0:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
   12ca4:	00bffa84 	movi	r2,-22
   12ca8:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   12cac:	e0bff917 	ldw	r2,-28(fp)
   12cb0:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   12cb4:	e0bffe17 	ldw	r2,-8(fp)
   12cb8:	10800808 	cmpgei	r2,r2,32
   12cbc:	1000241e 	bne	r2,zero,12d50 <alt_iic_isr_register+0xcc>
  NIOS2_READ_STATUS (context);
   12cc0:	0005303a 	rdctl	r2,status
   12cc4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12cc8:	e0fffc17 	ldw	r3,-16(fp)
   12ccc:	00bfff84 	movi	r2,-2
   12cd0:	1884703a 	and	r2,r3,r2
   12cd4:	1001703a 	wrctl	status,r2
  return context;
   12cd8:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   12cdc:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
   12ce0:	e0bffe17 	ldw	r2,-8(fp)
   12ce4:	100890fa 	slli	r4,r2,3
   12ce8:	e0fff817 	ldw	r3,-32(fp)
   12cec:	00800074 	movhi	r2,1
   12cf0:	2085883a 	add	r2,r4,r2
   12cf4:	10d11b15 	stw	r3,17516(r2)
    alt_irq[id].context = isr_context;
   12cf8:	e0bffe17 	ldw	r2,-8(fp)
   12cfc:	100890fa 	slli	r4,r2,3
   12d00:	e0fff717 	ldw	r3,-36(fp)
   12d04:	00800074 	movhi	r2,1
   12d08:	2085883a 	add	r2,r4,r2
   12d0c:	10d11c15 	stw	r3,17520(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   12d10:	e0bff817 	ldw	r2,-32(fp)
   12d14:	10000526 	beq	r2,zero,12d2c <alt_iic_isr_register+0xa8>
   12d18:	e0bffe17 	ldw	r2,-8(fp)
   12d1c:	100b883a 	mov	r5,r2
   12d20:	e13ffa17 	ldw	r4,-24(fp)
   12d24:	0012b240 	call	12b24 <alt_ic_irq_enable>
   12d28:	00000406 	br	12d3c <alt_iic_isr_register+0xb8>
   12d2c:	e0bffe17 	ldw	r2,-8(fp)
   12d30:	100b883a 	mov	r5,r2
   12d34:	e13ffa17 	ldw	r4,-24(fp)
   12d38:	0012bac0 	call	12bac <alt_ic_irq_disable>
   12d3c:	e0bfff15 	stw	r2,-4(fp)
   12d40:	e0bffd17 	ldw	r2,-12(fp)
   12d44:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   12d48:	e0bffb17 	ldw	r2,-20(fp)
   12d4c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   12d50:	e0bfff17 	ldw	r2,-4(fp)
}
   12d54:	e037883a 	mov	sp,fp
   12d58:	dfc00117 	ldw	ra,4(sp)
   12d5c:	df000017 	ldw	fp,0(sp)
   12d60:	dec00204 	addi	sp,sp,8
   12d64:	f800283a 	ret

00012d68 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   12d68:	defff904 	addi	sp,sp,-28
   12d6c:	dfc00615 	stw	ra,24(sp)
   12d70:	df000515 	stw	fp,20(sp)
   12d74:	df000504 	addi	fp,sp,20
   12d78:	e13ffe15 	stw	r4,-8(fp)
   12d7c:	e17ffd15 	stw	r5,-12(fp)
   12d80:	e1bffc15 	stw	r6,-16(fp)
   12d84:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
   12d88:	e1bffb17 	ldw	r6,-20(fp)
   12d8c:	e17ffc17 	ldw	r5,-16(fp)
   12d90:	e13ffd17 	ldw	r4,-12(fp)
   12d94:	0012f880 	call	12f88 <open>
   12d98:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
   12d9c:	e0bfff17 	ldw	r2,-4(fp)
   12da0:	10001716 	blt	r2,zero,12e00 <alt_open_fd+0x98>
  {
    fd->dev      = alt_fd_list[old].dev;
   12da4:	e0bfff17 	ldw	r2,-4(fp)
   12da8:	10c00324 	muli	r3,r2,12
   12dac:	00800074 	movhi	r2,1
   12db0:	1885883a 	add	r2,r3,r2
   12db4:	10cfee17 	ldw	r3,16312(r2)
   12db8:	e0bffe17 	ldw	r2,-8(fp)
   12dbc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   12dc0:	e0bfff17 	ldw	r2,-4(fp)
   12dc4:	10c00324 	muli	r3,r2,12
   12dc8:	00800074 	movhi	r2,1
   12dcc:	1885883a 	add	r2,r3,r2
   12dd0:	10cfef17 	ldw	r3,16316(r2)
   12dd4:	e0bffe17 	ldw	r2,-8(fp)
   12dd8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   12ddc:	e0bfff17 	ldw	r2,-4(fp)
   12de0:	10c00324 	muli	r3,r2,12
   12de4:	00800074 	movhi	r2,1
   12de8:	1885883a 	add	r2,r3,r2
   12dec:	10cff017 	ldw	r3,16320(r2)
   12df0:	e0bffe17 	ldw	r2,-8(fp)
   12df4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   12df8:	e13fff17 	ldw	r4,-4(fp)
   12dfc:	00130dc0 	call	130dc <alt_release_fd>
  }
} 
   12e00:	0001883a 	nop
   12e04:	e037883a 	mov	sp,fp
   12e08:	dfc00117 	ldw	ra,4(sp)
   12e0c:	df000017 	ldw	fp,0(sp)
   12e10:	dec00204 	addi	sp,sp,8
   12e14:	f800283a 	ret

00012e18 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   12e18:	defffb04 	addi	sp,sp,-20
   12e1c:	dfc00415 	stw	ra,16(sp)
   12e20:	df000315 	stw	fp,12(sp)
   12e24:	df000304 	addi	fp,sp,12
   12e28:	e13fff15 	stw	r4,-4(fp)
   12e2c:	e17ffe15 	stw	r5,-8(fp)
   12e30:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   12e34:	01c07fc4 	movi	r7,511
   12e38:	01800044 	movi	r6,1
   12e3c:	e17fff17 	ldw	r5,-4(fp)
   12e40:	01000074 	movhi	r4,1
   12e44:	210ff104 	addi	r4,r4,16324
   12e48:	0012d680 	call	12d68 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   12e4c:	01c07fc4 	movi	r7,511
   12e50:	000d883a 	mov	r6,zero
   12e54:	e17ffe17 	ldw	r5,-8(fp)
   12e58:	01000074 	movhi	r4,1
   12e5c:	210fee04 	addi	r4,r4,16312
   12e60:	0012d680 	call	12d68 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   12e64:	01c07fc4 	movi	r7,511
   12e68:	01800044 	movi	r6,1
   12e6c:	e17ffd17 	ldw	r5,-12(fp)
   12e70:	01000074 	movhi	r4,1
   12e74:	210ff404 	addi	r4,r4,16336
   12e78:	0012d680 	call	12d68 <alt_open_fd>
}  
   12e7c:	0001883a 	nop
   12e80:	e037883a 	mov	sp,fp
   12e84:	dfc00117 	ldw	ra,4(sp)
   12e88:	df000017 	ldw	fp,0(sp)
   12e8c:	dec00204 	addi	sp,sp,8
   12e90:	f800283a 	ret

00012e94 <alt_get_errno>:
{
   12e94:	defffe04 	addi	sp,sp,-8
   12e98:	dfc00115 	stw	ra,4(sp)
   12e9c:	df000015 	stw	fp,0(sp)
   12ea0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12ea4:	d0a00717 	ldw	r2,-32740(gp)
   12ea8:	10000326 	beq	r2,zero,12eb8 <alt_get_errno+0x24>
   12eac:	d0a00717 	ldw	r2,-32740(gp)
   12eb0:	103ee83a 	callr	r2
   12eb4:	00000106 	br	12ebc <alt_get_errno+0x28>
   12eb8:	d0a0c404 	addi	r2,gp,-31984
}
   12ebc:	e037883a 	mov	sp,fp
   12ec0:	dfc00117 	ldw	ra,4(sp)
   12ec4:	df000017 	ldw	fp,0(sp)
   12ec8:	dec00204 	addi	sp,sp,8
   12ecc:	f800283a 	ret

00012ed0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   12ed0:	defffd04 	addi	sp,sp,-12
   12ed4:	df000215 	stw	fp,8(sp)
   12ed8:	df000204 	addi	fp,sp,8
   12edc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   12ee0:	e0bffe17 	ldw	r2,-8(fp)
   12ee4:	10800217 	ldw	r2,8(r2)
   12ee8:	10d00034 	orhi	r3,r2,16384
   12eec:	e0bffe17 	ldw	r2,-8(fp)
   12ef0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   12ef4:	e03fff15 	stw	zero,-4(fp)
   12ef8:	00001a06 	br	12f64 <alt_file_locked+0x94>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   12efc:	e0bfff17 	ldw	r2,-4(fp)
   12f00:	10c00324 	muli	r3,r2,12
   12f04:	00800074 	movhi	r2,1
   12f08:	1885883a 	add	r2,r3,r2
   12f0c:	10cfee17 	ldw	r3,16312(r2)
   12f10:	e0bffe17 	ldw	r2,-8(fp)
   12f14:	10800017 	ldw	r2,0(r2)
   12f18:	18800f1e 	bne	r3,r2,12f58 <alt_file_locked+0x88>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   12f1c:	e0bfff17 	ldw	r2,-4(fp)
   12f20:	10c00324 	muli	r3,r2,12
   12f24:	00800074 	movhi	r2,1
   12f28:	1885883a 	add	r2,r3,r2
   12f2c:	108ff017 	ldw	r2,16320(r2)
    if ((alt_fd_list[i].dev == fd->dev) &&
   12f30:	1000090e 	bge	r2,zero,12f58 <alt_file_locked+0x88>
        (&alt_fd_list[i] != fd))
   12f34:	e0bfff17 	ldw	r2,-4(fp)
   12f38:	10c00324 	muli	r3,r2,12
   12f3c:	00800074 	movhi	r2,1
   12f40:	108fee04 	addi	r2,r2,16312
   12f44:	1885883a 	add	r2,r3,r2
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   12f48:	e0fffe17 	ldw	r3,-8(fp)
   12f4c:	18800226 	beq	r3,r2,12f58 <alt_file_locked+0x88>
    {
      return -EACCES;
   12f50:	00bffcc4 	movi	r2,-13
   12f54:	00000806 	br	12f78 <alt_file_locked+0xa8>
  for (i = 0; i <= alt_max_fd; i++)
   12f58:	e0bfff17 	ldw	r2,-4(fp)
   12f5c:	10800044 	addi	r2,r2,1
   12f60:	e0bfff15 	stw	r2,-4(fp)
   12f64:	d0a00617 	ldw	r2,-32744(gp)
   12f68:	1007883a 	mov	r3,r2
   12f6c:	e0bfff17 	ldw	r2,-4(fp)
   12f70:	18bfe22e 	bgeu	r3,r2,12efc <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   12f74:	0005883a 	mov	r2,zero
}
   12f78:	e037883a 	mov	sp,fp
   12f7c:	df000017 	ldw	fp,0(sp)
   12f80:	dec00104 	addi	sp,sp,4
   12f84:	f800283a 	ret

00012f88 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   12f88:	defff604 	addi	sp,sp,-40
   12f8c:	dfc00915 	stw	ra,36(sp)
   12f90:	df000815 	stw	fp,32(sp)
   12f94:	df000804 	addi	fp,sp,32
   12f98:	e13ffa15 	stw	r4,-24(fp)
   12f9c:	e17ff915 	stw	r5,-28(fp)
   12fa0:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   12fa4:	00bfffc4 	movi	r2,-1
   12fa8:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
   12fac:	00bffb44 	movi	r2,-19
   12fb0:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
   12fb4:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   12fb8:	d1600404 	addi	r5,gp,-32752
   12fbc:	e13ffa17 	ldw	r4,-24(fp)
   12fc0:	00133200 	call	13320 <alt_find_dev>
   12fc4:	e0bfff15 	stw	r2,-4(fp)
   12fc8:	e0bfff17 	ldw	r2,-4(fp)
   12fcc:	1000051e 	bne	r2,zero,12fe4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   12fd0:	e13ffa17 	ldw	r4,-24(fp)
   12fd4:	00134800 	call	13480 <alt_find_file>
   12fd8:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
   12fdc:	00800044 	movi	r2,1
   12fe0:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   12fe4:	e0bfff17 	ldw	r2,-4(fp)
   12fe8:	10002926 	beq	r2,zero,13090 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   12fec:	e13fff17 	ldw	r4,-4(fp)
   12ff0:	00136040 	call	13604 <alt_get_fd>
   12ff4:	e0bffe15 	stw	r2,-8(fp)
   12ff8:	e0bffe17 	ldw	r2,-8(fp)
   12ffc:	1000030e 	bge	r2,zero,1300c <open+0x84>
    {
      status = index;
   13000:	e0bffe17 	ldw	r2,-8(fp)
   13004:	e0bffd15 	stw	r2,-12(fp)
   13008:	00002306 	br	13098 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   1300c:	e0bffe17 	ldw	r2,-8(fp)
   13010:	10c00324 	muli	r3,r2,12
   13014:	00800074 	movhi	r2,1
   13018:	108fee04 	addi	r2,r2,16312
   1301c:	1885883a 	add	r2,r3,r2
   13020:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   13024:	e0fff917 	ldw	r3,-28(fp)
   13028:	00900034 	movhi	r2,16384
   1302c:	10bfffc4 	addi	r2,r2,-1
   13030:	1886703a 	and	r3,r3,r2
   13034:	e0bffb17 	ldw	r2,-20(fp)
   13038:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1303c:	e0bffc17 	ldw	r2,-16(fp)
   13040:	1000051e 	bne	r2,zero,13058 <open+0xd0>
   13044:	e13ffb17 	ldw	r4,-20(fp)
   13048:	0012ed00 	call	12ed0 <alt_file_locked>
   1304c:	e0bffd15 	stw	r2,-12(fp)
   13050:	e0bffd17 	ldw	r2,-12(fp)
   13054:	10001016 	blt	r2,zero,13098 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   13058:	e0bfff17 	ldw	r2,-4(fp)
   1305c:	10800317 	ldw	r2,12(r2)
   13060:	10000826 	beq	r2,zero,13084 <open+0xfc>
   13064:	e0bfff17 	ldw	r2,-4(fp)
   13068:	10800317 	ldw	r2,12(r2)
   1306c:	e1fff817 	ldw	r7,-32(fp)
   13070:	e1bff917 	ldw	r6,-28(fp)
   13074:	e17ffa17 	ldw	r5,-24(fp)
   13078:	e13ffb17 	ldw	r4,-20(fp)
   1307c:	103ee83a 	callr	r2
   13080:	00000106 	br	13088 <open+0x100>
   13084:	0005883a 	mov	r2,zero
   13088:	e0bffd15 	stw	r2,-12(fp)
   1308c:	00000206 	br	13098 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   13090:	00bffb44 	movi	r2,-19
   13094:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   13098:	e0bffd17 	ldw	r2,-12(fp)
   1309c:	1000090e 	bge	r2,zero,130c4 <open+0x13c>
  {
    alt_release_fd (index);  
   130a0:	e13ffe17 	ldw	r4,-8(fp)
   130a4:	00130dc0 	call	130dc <alt_release_fd>
    ALT_ERRNO = -status;
   130a8:	0012e940 	call	12e94 <alt_get_errno>
   130ac:	1007883a 	mov	r3,r2
   130b0:	e0bffd17 	ldw	r2,-12(fp)
   130b4:	0085c83a 	sub	r2,zero,r2
   130b8:	18800015 	stw	r2,0(r3)
    return -1;
   130bc:	00bfffc4 	movi	r2,-1
   130c0:	00000106 	br	130c8 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   130c4:	e0bffe17 	ldw	r2,-8(fp)
}
   130c8:	e037883a 	mov	sp,fp
   130cc:	dfc00117 	ldw	ra,4(sp)
   130d0:	df000017 	ldw	fp,0(sp)
   130d4:	dec00204 	addi	sp,sp,8
   130d8:	f800283a 	ret

000130dc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   130dc:	defffe04 	addi	sp,sp,-8
   130e0:	df000115 	stw	fp,4(sp)
   130e4:	df000104 	addi	fp,sp,4
   130e8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   130ec:	e0bfff17 	ldw	r2,-4(fp)
   130f0:	108000d0 	cmplti	r2,r2,3
   130f4:	10000a1e 	bne	r2,zero,13120 <alt_release_fd+0x44>
  {
    alt_fd_list[fd].fd_flags = 0;
   130f8:	e0bfff17 	ldw	r2,-4(fp)
   130fc:	10c00324 	muli	r3,r2,12
   13100:	00800074 	movhi	r2,1
   13104:	1885883a 	add	r2,r3,r2
   13108:	100ff015 	stw	zero,16320(r2)
    alt_fd_list[fd].dev      = 0;
   1310c:	e0bfff17 	ldw	r2,-4(fp)
   13110:	10c00324 	muli	r3,r2,12
   13114:	00800074 	movhi	r2,1
   13118:	1885883a 	add	r2,r3,r2
   1311c:	100fee15 	stw	zero,16312(r2)
  }
}
   13120:	0001883a 	nop
   13124:	e037883a 	mov	sp,fp
   13128:	df000017 	ldw	fp,0(sp)
   1312c:	dec00104 	addi	sp,sp,4
   13130:	f800283a 	ret

00013134 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   13134:	defffa04 	addi	sp,sp,-24
   13138:	df000515 	stw	fp,20(sp)
   1313c:	df000504 	addi	fp,sp,20
   13140:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
   13144:	0005303a 	rdctl	r2,status
   13148:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1314c:	e0fffc17 	ldw	r3,-16(fp)
   13150:	00bfff84 	movi	r2,-2
   13154:	1884703a 	and	r2,r3,r2
   13158:	1001703a 	wrctl	status,r2
  return context;
   1315c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   13160:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
   13164:	e0bffb17 	ldw	r2,-20(fp)
   13168:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1316c:	e0bffd17 	ldw	r2,-12(fp)
   13170:	10800017 	ldw	r2,0(r2)
   13174:	e0fffd17 	ldw	r3,-12(fp)
   13178:	18c00117 	ldw	r3,4(r3)
   1317c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   13180:	e0bffd17 	ldw	r2,-12(fp)
   13184:	10800117 	ldw	r2,4(r2)
   13188:	e0fffd17 	ldw	r3,-12(fp)
   1318c:	18c00017 	ldw	r3,0(r3)
   13190:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   13194:	e0bffd17 	ldw	r2,-12(fp)
   13198:	e0fffd17 	ldw	r3,-12(fp)
   1319c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   131a0:	e0bffd17 	ldw	r2,-12(fp)
   131a4:	e0fffd17 	ldw	r3,-12(fp)
   131a8:	10c00015 	stw	r3,0(r2)
   131ac:	e0bfff17 	ldw	r2,-4(fp)
   131b0:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   131b4:	e0bffe17 	ldw	r2,-8(fp)
   131b8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   131bc:	0001883a 	nop
   131c0:	e037883a 	mov	sp,fp
   131c4:	df000017 	ldw	fp,0(sp)
   131c8:	dec00104 	addi	sp,sp,4
   131cc:	f800283a 	ret

000131d0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   131d0:	defff904 	addi	sp,sp,-28
   131d4:	dfc00615 	stw	ra,24(sp)
   131d8:	df000515 	stw	fp,20(sp)
   131dc:	dc400415 	stw	r17,16(sp)
   131e0:	dc000315 	stw	r16,12(sp)
   131e4:	df000504 	addi	fp,sp,20
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   131e8:	d0a00917 	ldw	r2,-32732(gp)
   131ec:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   131f0:	d120ca17 	ldw	r4,-31960(gp)
   131f4:	d160cb17 	ldw	r5,-31956(gp)
   131f8:	01800044 	movi	r6,1
   131fc:	000f883a 	mov	r7,zero
   13200:	2185883a 	add	r2,r4,r6
   13204:	1111803a 	cmpltu	r8,r2,r4
   13208:	29c7883a 	add	r3,r5,r7
   1320c:	40c9883a 	add	r4,r8,r3
   13210:	2007883a 	mov	r3,r4
   13214:	1009883a 	mov	r4,r2
   13218:	180b883a 	mov	r5,r3
   1321c:	d120ca15 	stw	r4,-31960(gp)
   13220:	d160cb15 	stw	r5,-31956(gp)
 
  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   13224:	00002906 	br	132cc <alt_tick+0xfc>
  {
    next = (alt_alarm*) alarm->llist.next;
   13228:	e0bffd17 	ldw	r2,-12(fp)
   1322c:	10800017 	ldw	r2,0(r2)
   13230:	e0bffc15 	stw	r2,-16(fp)
    
    /* if the alarm period has expired, make the callback */    
    if (alarm->time <= _alt_nticks)
   13234:	e13ffd17 	ldw	r4,-12(fp)
   13238:	20800217 	ldw	r2,8(r4)
   1323c:	20c00317 	ldw	r3,12(r4)
   13240:	d120ca17 	ldw	r4,-31960(gp)
   13244:	d160cb17 	ldw	r5,-31956(gp)
   13248:	28c01e36 	bltu	r5,r3,132c4 <alt_tick+0xf4>
   1324c:	1940011e 	bne	r3,r5,13254 <alt_tick+0x84>
   13250:	20801c36 	bltu	r4,r2,132c4 <alt_tick+0xf4>
    {
      next_callback = alarm->callback (alarm->context);
   13254:	e0bffd17 	ldw	r2,-12(fp)
   13258:	10800417 	ldw	r2,16(r2)
   1325c:	e0fffd17 	ldw	r3,-12(fp)
   13260:	18c00517 	ldw	r3,20(r3)
   13264:	1809883a 	mov	r4,r3
   13268:	103ee83a 	callr	r2
   1326c:	e0bffb15 	stw	r2,-20(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   13270:	e0bffb17 	ldw	r2,-20(fp)
   13274:	1000031e 	bne	r2,zero,13284 <alt_tick+0xb4>
      {
        alt_alarm_stop (alarm);
   13278:	e13ffd17 	ldw	r4,-12(fp)
   1327c:	00131340 	call	13134 <alt_alarm_stop>
   13280:	00001006 	br	132c4 <alt_tick+0xf4>
      }
      else
      {
        alarm->time += next_callback;
   13284:	e0bffd17 	ldw	r2,-12(fp)
   13288:	11000217 	ldw	r4,8(r2)
   1328c:	11400317 	ldw	r5,12(r2)
   13290:	e0bffb17 	ldw	r2,-20(fp)
   13294:	1021883a 	mov	r16,r2
   13298:	0023883a 	mov	r17,zero
   1329c:	2405883a 	add	r2,r4,r16
   132a0:	110d803a 	cmpltu	r6,r2,r4
   132a4:	2c47883a 	add	r3,r5,r17
   132a8:	30c9883a 	add	r4,r6,r3
   132ac:	2007883a 	mov	r3,r4
   132b0:	1009883a 	mov	r4,r2
   132b4:	180b883a 	mov	r5,r3
   132b8:	e0bffd17 	ldw	r2,-12(fp)
   132bc:	11000215 	stw	r4,8(r2)
   132c0:	11400315 	stw	r5,12(r2)
      }
    }
    alarm = next;
   132c4:	e0bffc17 	ldw	r2,-16(fp)
   132c8:	e0bffd15 	stw	r2,-12(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
   132cc:	e0fffd17 	ldw	r3,-12(fp)
   132d0:	d0a00904 	addi	r2,gp,-32732
   132d4:	18bfd41e 	bne	r3,r2,13228 <alt_tick+0x58>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   132d8:	0001883a 	nop
}
   132dc:	0001883a 	nop
   132e0:	e6fffe04 	addi	sp,fp,-8
   132e4:	dfc00317 	ldw	ra,12(sp)
   132e8:	df000217 	ldw	fp,8(sp)
   132ec:	dc400117 	ldw	r17,4(sp)
   132f0:	dc000017 	ldw	r16,0(sp)
   132f4:	dec00404 	addi	sp,sp,16
   132f8:	f800283a 	ret

000132fc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   132fc:	deffff04 	addi	sp,sp,-4
   13300:	df000015 	stw	fp,0(sp)
   13304:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   13308:	000170fa 	wrctl	ienable,zero
}
   1330c:	0001883a 	nop
   13310:	e037883a 	mov	sp,fp
   13314:	df000017 	ldw	fp,0(sp)
   13318:	dec00104 	addi	sp,sp,4
   1331c:	f800283a 	ret

00013320 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   13320:	defffa04 	addi	sp,sp,-24
   13324:	df000515 	stw	fp,20(sp)
   13328:	df000504 	addi	fp,sp,20
   1332c:	e13ffc15 	stw	r4,-16(fp)
   13330:	e17ffb15 	stw	r5,-20(fp)
    alt_dev* next = (alt_dev*) llist->next;
   13334:	e0bffb17 	ldw	r2,-20(fp)
   13338:	10800017 	ldw	r2,0(r2)
   1333c:	e0bfff15 	stw	r2,-4(fp)
    alt_32   len=0;
   13340:	e03ffe15 	stw	zero,-8(fp)
    alt_32   MAX_STRING_LENGTH=1000;
   13344:	0080fa04 	movi	r2,1000
   13348:	e0bffd15 	stw	r2,-12(fp)
    
    if (llist == NULL) { return NULL; }
   1334c:	e0bffb17 	ldw	r2,-20(fp)
   13350:	1000431e 	bne	r2,zero,13460 <alt_find_dev+0x140>
   13354:	0005883a 	mov	r2,zero
   13358:	00004506 	br	13470 <alt_find_dev+0x150>
     * end of the list (i.e. next winds up pointing back to the list head).
     */ 

    while (next != (alt_dev*) llist)
    {
        len=0;
   1335c:	e03ffe15 	stw	zero,-8(fp)
        while ((name[len] != 0) && (next->name[len]!=0) && (len < MAX_STRING_LENGTH))
   13360:	00001306 	br	133b0 <alt_find_dev+0x90>
        {
            if (next->name[len] != name[len]) { break; }
   13364:	e0bfff17 	ldw	r2,-4(fp)
   13368:	10c00217 	ldw	r3,8(r2)
   1336c:	e0bffe17 	ldw	r2,-8(fp)
   13370:	1885883a 	add	r2,r3,r2
   13374:	11000003 	ldbu	r4,0(r2)
   13378:	e0bffe17 	ldw	r2,-8(fp)
   1337c:	e0fffc17 	ldw	r3,-16(fp)
   13380:	1885883a 	add	r2,r3,r2
   13384:	10800003 	ldbu	r2,0(r2)
   13388:	20c03fcc 	andi	r3,r4,255
   1338c:	18c0201c 	xori	r3,r3,128
   13390:	18ffe004 	addi	r3,r3,-128
   13394:	10803fcc 	andi	r2,r2,255
   13398:	1080201c 	xori	r2,r2,128
   1339c:	10bfe004 	addi	r2,r2,-128
   133a0:	1880181e 	bne	r3,r2,13404 <alt_find_dev+0xe4>
            len++;
   133a4:	e0bffe17 	ldw	r2,-8(fp)
   133a8:	10800044 	addi	r2,r2,1
   133ac:	e0bffe15 	stw	r2,-8(fp)
        while ((name[len] != 0) && (next->name[len]!=0) && (len < MAX_STRING_LENGTH))
   133b0:	e0bffe17 	ldw	r2,-8(fp)
   133b4:	e0fffc17 	ldw	r3,-16(fp)
   133b8:	1885883a 	add	r2,r3,r2
   133bc:	10800003 	ldbu	r2,0(r2)
   133c0:	10803fcc 	andi	r2,r2,255
   133c4:	1080201c 	xori	r2,r2,128
   133c8:	10bfe004 	addi	r2,r2,-128
   133cc:	10000e26 	beq	r2,zero,13408 <alt_find_dev+0xe8>
   133d0:	e0bfff17 	ldw	r2,-4(fp)
   133d4:	10c00217 	ldw	r3,8(r2)
   133d8:	e0bffe17 	ldw	r2,-8(fp)
   133dc:	1885883a 	add	r2,r3,r2
   133e0:	10800003 	ldbu	r2,0(r2)
   133e4:	10803fcc 	andi	r2,r2,255
   133e8:	1080201c 	xori	r2,r2,128
   133ec:	10bfe004 	addi	r2,r2,-128
   133f0:	10000526 	beq	r2,zero,13408 <alt_find_dev+0xe8>
   133f4:	e0fffe17 	ldw	r3,-8(fp)
   133f8:	e0bffd17 	ldw	r2,-12(fp)
   133fc:	18bfd916 	blt	r3,r2,13364 <alt_find_dev+0x44>
   13400:	00000106 	br	13408 <alt_find_dev+0xe8>
            if (next->name[len] != name[len]) { break; }
   13404:	0001883a 	nop
        }
    
        /* match found */
        if ((name[len] == 0) && (next->name[len]==0)) {  return next; }
   13408:	e0bffe17 	ldw	r2,-8(fp)
   1340c:	e0fffc17 	ldw	r3,-16(fp)
   13410:	1885883a 	add	r2,r3,r2
   13414:	10800003 	ldbu	r2,0(r2)
   13418:	10803fcc 	andi	r2,r2,255
   1341c:	1080201c 	xori	r2,r2,128
   13420:	10bfe004 	addi	r2,r2,-128
   13424:	10000b1e 	bne	r2,zero,13454 <alt_find_dev+0x134>
   13428:	e0bfff17 	ldw	r2,-4(fp)
   1342c:	10c00217 	ldw	r3,8(r2)
   13430:	e0bffe17 	ldw	r2,-8(fp)
   13434:	1885883a 	add	r2,r3,r2
   13438:	10800003 	ldbu	r2,0(r2)
   1343c:	10803fcc 	andi	r2,r2,255
   13440:	1080201c 	xori	r2,r2,128
   13444:	10bfe004 	addi	r2,r2,-128
   13448:	1000021e 	bne	r2,zero,13454 <alt_find_dev+0x134>
   1344c:	e0bfff17 	ldw	r2,-4(fp)
   13450:	00000706 	br	13470 <alt_find_dev+0x150>

        next = (alt_dev*) next->llist.next;
   13454:	e0bfff17 	ldw	r2,-4(fp)
   13458:	10800017 	ldw	r2,0(r2)
   1345c:	e0bfff15 	stw	r2,-4(fp)
    while (next != (alt_dev*) llist)
   13460:	e0ffff17 	ldw	r3,-4(fp)
   13464:	e0bffb17 	ldw	r2,-20(fp)
   13468:	18bfbc1e 	bne	r3,r2,1335c <alt_find_dev+0x3c>
    }
  
    /* No match found */
  
    return NULL;
   1346c:	0005883a 	mov	r2,zero
}
   13470:	e037883a 	mov	sp,fp
   13474:	df000017 	ldw	fp,0(sp)
   13478:	dec00104 	addi	sp,sp,4
   1347c:	f800283a 	ret

00013480 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   13480:	defffb04 	addi	sp,sp,-20
   13484:	df000415 	stw	fp,16(sp)
   13488:	df000404 	addi	fp,sp,16
   1348c:	e13ffc15 	stw	r4,-16(fp)
    alt_dev* next = (alt_dev*) alt_fs_list.next;   
   13490:	d0a00217 	ldw	r2,-32760(gp)
   13494:	e0bfff15 	stw	r2,-4(fp)
    alt_32   len=0;
   13498:	e03ffe15 	stw	zero,-8(fp)
    alt_32   MAX_STRING_LENGTH=1000;
   1349c:	0080fa04 	movi	r2,1000
   134a0:	e0bffd15 	stw	r2,-12(fp)
 
    /*
    * Check each list entry in turn, until a match is found, or we reach the
    * end of the list (i.e. next winds up pointing back to the list head).
    */ 
    while (next != (alt_dev*) &alt_fs_list)
   134a4:	00004f06 	br	135e4 <alt_find_file+0x164>
    {
        len=0;
   134a8:	e03ffe15 	stw	zero,-8(fp)
        while (len < MAX_STRING_LENGTH)    
   134ac:	00004306 	br	135bc <alt_find_file+0x13c>
        {
            if (((next->name[len]== '/') && (next->name[len+1] == 0)) || (next->name[len] == 0))
   134b0:	e0bfff17 	ldw	r2,-4(fp)
   134b4:	10c00217 	ldw	r3,8(r2)
   134b8:	e0bffe17 	ldw	r2,-8(fp)
   134bc:	1885883a 	add	r2,r3,r2
   134c0:	10800003 	ldbu	r2,0(r2)
   134c4:	10803fcc 	andi	r2,r2,255
   134c8:	1080201c 	xori	r2,r2,128
   134cc:	10bfe004 	addi	r2,r2,-128
   134d0:	10800bd8 	cmpnei	r2,r2,47
   134d4:	10000a1e 	bne	r2,zero,13500 <alt_find_file+0x80>
   134d8:	e0bfff17 	ldw	r2,-4(fp)
   134dc:	10c00217 	ldw	r3,8(r2)
   134e0:	e0bffe17 	ldw	r2,-8(fp)
   134e4:	10800044 	addi	r2,r2,1
   134e8:	1885883a 	add	r2,r3,r2
   134ec:	10800003 	ldbu	r2,0(r2)
   134f0:	10803fcc 	andi	r2,r2,255
   134f4:	1080201c 	xori	r2,r2,128
   134f8:	10bfe004 	addi	r2,r2,-128
   134fc:	10000926 	beq	r2,zero,13524 <alt_find_file+0xa4>
   13500:	e0bfff17 	ldw	r2,-4(fp)
   13504:	10c00217 	ldw	r3,8(r2)
   13508:	e0bffe17 	ldw	r2,-8(fp)
   1350c:	1885883a 	add	r2,r3,r2
   13510:	10800003 	ldbu	r2,0(r2)
   13514:	10803fcc 	andi	r2,r2,255
   13518:	1080201c 	xori	r2,r2,128
   1351c:	10bfe004 	addi	r2,r2,-128
   13520:	1000131e 	bne	r2,zero,13570 <alt_find_file+0xf0>
            { 
                if ((name[len]== '/') || (name[len] == 0))
   13524:	e0bffe17 	ldw	r2,-8(fp)
   13528:	e0fffc17 	ldw	r3,-16(fp)
   1352c:	1885883a 	add	r2,r3,r2
   13530:	10800003 	ldbu	r2,0(r2)
   13534:	10803fcc 	andi	r2,r2,255
   13538:	1080201c 	xori	r2,r2,128
   1353c:	10bfe004 	addi	r2,r2,-128
   13540:	10800be0 	cmpeqi	r2,r2,47
   13544:	1000081e 	bne	r2,zero,13568 <alt_find_file+0xe8>
   13548:	e0bffe17 	ldw	r2,-8(fp)
   1354c:	e0fffc17 	ldw	r3,-16(fp)
   13550:	1885883a 	add	r2,r3,r2
   13554:	10800003 	ldbu	r2,0(r2)
   13558:	10803fcc 	andi	r2,r2,255
   1355c:	1080201c 	xori	r2,r2,128
   13560:	10bfe004 	addi	r2,r2,-128
   13564:	1000191e 	bne	r2,zero,135cc <alt_find_file+0x14c>
                {
                    return next;
   13568:	e0bfff17 	ldw	r2,-4(fp)
   1356c:	00002106 	br	135f4 <alt_find_file+0x174>
                }
                break;
            }
            
            if (next->name[len]!=name[len]) { break; }
   13570:	e0bfff17 	ldw	r2,-4(fp)
   13574:	10c00217 	ldw	r3,8(r2)
   13578:	e0bffe17 	ldw	r2,-8(fp)
   1357c:	1885883a 	add	r2,r3,r2
   13580:	11000003 	ldbu	r4,0(r2)
   13584:	e0bffe17 	ldw	r2,-8(fp)
   13588:	e0fffc17 	ldw	r3,-16(fp)
   1358c:	1885883a 	add	r2,r3,r2
   13590:	10800003 	ldbu	r2,0(r2)
   13594:	20c03fcc 	andi	r3,r4,255
   13598:	18c0201c 	xori	r3,r3,128
   1359c:	18ffe004 	addi	r3,r3,-128
   135a0:	10803fcc 	andi	r2,r2,255
   135a4:	1080201c 	xori	r2,r2,128
   135a8:	10bfe004 	addi	r2,r2,-128
   135ac:	1880091e 	bne	r3,r2,135d4 <alt_find_file+0x154>
            len++;
   135b0:	e0bffe17 	ldw	r2,-8(fp)
   135b4:	10800044 	addi	r2,r2,1
   135b8:	e0bffe15 	stw	r2,-8(fp)
        while (len < MAX_STRING_LENGTH)    
   135bc:	e0fffe17 	ldw	r3,-8(fp)
   135c0:	e0bffd17 	ldw	r2,-12(fp)
   135c4:	18bfba16 	blt	r3,r2,134b0 <alt_find_file+0x30>
   135c8:	00000306 	br	135d8 <alt_find_file+0x158>
                break;
   135cc:	0001883a 	nop
   135d0:	00000106 	br	135d8 <alt_find_file+0x158>
            if (next->name[len]!=name[len]) { break; }
   135d4:	0001883a 	nop
        }  
        
        next = (alt_dev*) next->llist.next;
   135d8:	e0bfff17 	ldw	r2,-4(fp)
   135dc:	10800017 	ldw	r2,0(r2)
   135e0:	e0bfff15 	stw	r2,-4(fp)
    while (next != (alt_dev*) &alt_fs_list)
   135e4:	e0ffff17 	ldw	r3,-4(fp)
   135e8:	d0a00204 	addi	r2,gp,-32760
   135ec:	18bfae1e 	bne	r3,r2,134a8 <alt_find_file+0x28>
    }
  
    /* No match found */
  
    return NULL;     
   135f0:	0005883a 	mov	r2,zero
}
   135f4:	e037883a 	mov	sp,fp
   135f8:	df000017 	ldw	fp,0(sp)
   135fc:	dec00104 	addi	sp,sp,4
   13600:	f800283a 	ret

00013604 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   13604:	defffc04 	addi	sp,sp,-16
   13608:	df000315 	stw	fp,12(sp)
   1360c:	df000304 	addi	fp,sp,12
   13610:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
   13614:	00bffa04 	movi	r2,-24
   13618:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1361c:	e03fff15 	stw	zero,-4(fp)
   13620:	00001706 	br	13680 <alt_get_fd+0x7c>
  {
    if (!alt_fd_list[i].dev)
   13624:	e0bfff17 	ldw	r2,-4(fp)
   13628:	10c00324 	muli	r3,r2,12
   1362c:	00800074 	movhi	r2,1
   13630:	1885883a 	add	r2,r3,r2
   13634:	108fee17 	ldw	r2,16312(r2)
   13638:	10000e1e 	bne	r2,zero,13674 <alt_get_fd+0x70>
    {
      alt_fd_list[i].dev = dev;
   1363c:	e0bfff17 	ldw	r2,-4(fp)
   13640:	11000324 	muli	r4,r2,12
   13644:	e0fffd17 	ldw	r3,-12(fp)
   13648:	00800074 	movhi	r2,1
   1364c:	2085883a 	add	r2,r4,r2
   13650:	10cfee15 	stw	r3,16312(r2)
      if (i > alt_max_fd)
   13654:	d0e00617 	ldw	r3,-32744(gp)
   13658:	e0bfff17 	ldw	r2,-4(fp)
   1365c:	1880020e 	bge	r3,r2,13668 <alt_get_fd+0x64>
      {
        alt_max_fd = i;
   13660:	e0bfff17 	ldw	r2,-4(fp)
   13664:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
   13668:	e0bfff17 	ldw	r2,-4(fp)
   1366c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   13670:	00000706 	br	13690 <alt_get_fd+0x8c>
  for (i = 0; i < ALT_MAX_FD; i++)
   13674:	e0bfff17 	ldw	r2,-4(fp)
   13678:	10800044 	addi	r2,r2,1
   1367c:	e0bfff15 	stw	r2,-4(fp)
   13680:	e0bfff17 	ldw	r2,-4(fp)
   13684:	10800810 	cmplti	r2,r2,32
   13688:	103fe61e 	bne	r2,zero,13624 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
   1368c:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   13690:	e0bffe17 	ldw	r2,-8(fp)
}
   13694:	e037883a 	mov	sp,fp
   13698:	df000017 	ldw	fp,0(sp)
   1369c:	dec00104 	addi	sp,sp,4
   136a0:	f800283a 	ret

000136a4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   136a4:	defffb04 	addi	sp,sp,-20
   136a8:	df000415 	stw	fp,16(sp)
   136ac:	df000404 	addi	fp,sp,16
   136b0:	e13ffd15 	stw	r4,-12(fp)
   136b4:	e17ffc15 	stw	r5,-16(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   136b8:	e0bffc17 	ldw	r2,-16(fp)
   136bc:	10820070 	cmpltui	r2,r2,2049
   136c0:	1000021e 	bne	r2,zero,136cc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   136c4:	00820004 	movi	r2,2048
   136c8:	e0bffc15 	stw	r2,-16(fp)
  }

  end = ((char*) start) + len;
   136cc:	e0fffd17 	ldw	r3,-12(fp)
   136d0:	e0bffc17 	ldw	r2,-16(fp)
   136d4:	1885883a 	add	r2,r3,r2
   136d8:	e0bffe15 	stw	r2,-8(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   136dc:	e0bffd17 	ldw	r2,-12(fp)
   136e0:	e0bfff15 	stw	r2,-4(fp)
   136e4:	00000506 	br	136fc <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   136e8:	e0bfff17 	ldw	r2,-4(fp)
   136ec:	1000603a 	flushi	r2
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   136f0:	e0bfff17 	ldw	r2,-4(fp)
   136f4:	10800804 	addi	r2,r2,32
   136f8:	e0bfff15 	stw	r2,-4(fp)
   136fc:	e0ffff17 	ldw	r3,-4(fp)
   13700:	e0bffe17 	ldw	r2,-8(fp)
   13704:	18bff836 	bltu	r3,r2,136e8 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   13708:	e0bffd17 	ldw	r2,-12(fp)
   1370c:	108007cc 	andi	r2,r2,31
   13710:	10000226 	beq	r2,zero,1371c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   13714:	e0bfff17 	ldw	r2,-4(fp)
   13718:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   1371c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   13720:	0001883a 	nop
   13724:	e037883a 	mov	sp,fp
   13728:	df000017 	ldw	fp,0(sp)
   1372c:	dec00104 	addi	sp,sp,4
   13730:	f800283a 	ret

00013734 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   13734:	defffe04 	addi	sp,sp,-8
   13738:	df000115 	stw	fp,4(sp)
   1373c:	df000104 	addi	fp,sp,4
   13740:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   13744:	e0bfff17 	ldw	r2,-4(fp)
   13748:	10bffe84 	addi	r2,r2,-6
   1374c:	10c00428 	cmpgeui	r3,r2,16
   13750:	1800191e 	bne	r3,zero,137b8 <alt_exception_cause_generated_bad_addr+0x84>
   13754:	100690ba 	slli	r3,r2,2
   13758:	00800074 	movhi	r2,1
   1375c:	1885883a 	add	r2,r3,r2
   13760:	108dda17 	ldw	r2,14184(r2)
   13764:	1000683a 	jmp	r2
   13768:	000137a8 	cmpgeui	zero,zero,1246
   1376c:	000137a8 	cmpgeui	zero,zero,1246
   13770:	000137b8 	rdprs	zero,zero,1246
   13774:	000137b8 	rdprs	zero,zero,1246
   13778:	000137b8 	rdprs	zero,zero,1246
   1377c:	000137a8 	cmpgeui	zero,zero,1246
   13780:	000137b0 	cmpltui	zero,zero,1246
   13784:	000137b8 	rdprs	zero,zero,1246
   13788:	000137a8 	cmpgeui	zero,zero,1246
   1378c:	000137a8 	cmpgeui	zero,zero,1246
   13790:	000137b8 	rdprs	zero,zero,1246
   13794:	000137a8 	cmpgeui	zero,zero,1246
   13798:	000137b0 	cmpltui	zero,zero,1246
   1379c:	000137b8 	rdprs	zero,zero,1246
   137a0:	000137b8 	rdprs	zero,zero,1246
   137a4:	000137a8 	cmpgeui	zero,zero,1246
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   137a8:	00800044 	movi	r2,1
   137ac:	00000306 	br	137bc <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   137b0:	0005883a 	mov	r2,zero
   137b4:	00000106 	br	137bc <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
   137b8:	0005883a 	mov	r2,zero
  }
}
   137bc:	e037883a 	mov	sp,fp
   137c0:	df000017 	ldw	fp,0(sp)
   137c4:	dec00104 	addi	sp,sp,4
   137c8:	f800283a 	ret

000137cc <exit>:
   137cc:	defffe04 	addi	sp,sp,-8
   137d0:	000b883a 	mov	r5,zero
   137d4:	dc000015 	stw	r16,0(sp)
   137d8:	dfc00115 	stw	ra,4(sp)
   137dc:	2021883a 	mov	r16,r4
   137e0:	00137ec0 	call	137ec <__call_exitprocs>
   137e4:	8009883a 	mov	r4,r16
   137e8:	00139880 	call	13988 <_exit>

000137ec <__call_exitprocs>:
   137ec:	00800074 	movhi	r2,1
   137f0:	10904e17 	ldw	r2,16696(r2)
   137f4:	defff204 	addi	sp,sp,-56
   137f8:	dc800615 	stw	r18,24(sp)
   137fc:	d8800015 	stw	r2,0(sp)
   13800:	04800034 	movhi	r18,0
   13804:	10800d04 	addi	r2,r2,52
   13808:	dd000815 	stw	r20,32(sp)
   1380c:	dfc00d15 	stw	ra,52(sp)
   13810:	df000c15 	stw	fp,48(sp)
   13814:	ddc00b15 	stw	r23,44(sp)
   13818:	dd800a15 	stw	r22,40(sp)
   1381c:	dd400915 	stw	r21,36(sp)
   13820:	dcc00715 	stw	r19,28(sp)
   13824:	dc400515 	stw	r17,20(sp)
   13828:	dc000415 	stw	r16,16(sp)
   1382c:	d9000215 	stw	r4,8(sp)
   13830:	2829883a 	mov	r20,r5
   13834:	d8800315 	stw	r2,12(sp)
   13838:	94800004 	addi	r18,r18,0
   1383c:	d8800017 	ldw	r2,0(sp)
   13840:	dc400317 	ldw	r17,12(sp)
   13844:	15800d17 	ldw	r22,52(r2)
   13848:	b0000c1e 	bne	r22,zero,1387c <__call_exitprocs+0x90>
   1384c:	dfc00d17 	ldw	ra,52(sp)
   13850:	df000c17 	ldw	fp,48(sp)
   13854:	ddc00b17 	ldw	r23,44(sp)
   13858:	dd800a17 	ldw	r22,40(sp)
   1385c:	dd400917 	ldw	r21,36(sp)
   13860:	dd000817 	ldw	r20,32(sp)
   13864:	dcc00717 	ldw	r19,28(sp)
   13868:	dc800617 	ldw	r18,24(sp)
   1386c:	dc400517 	ldw	r17,20(sp)
   13870:	dc000417 	ldw	r16,16(sp)
   13874:	dec00e04 	addi	sp,sp,56
   13878:	f800283a 	ret
   1387c:	b4000117 	ldw	r16,4(r22)
   13880:	b5c02217 	ldw	r23,136(r22)
   13884:	0027883a 	mov	r19,zero
   13888:	873fffc4 	addi	fp,r16,-1
   1388c:	802090ba 	slli	r16,r16,2
   13890:	bc2b883a 	add	r21,r23,r16
   13894:	e0000e0e 	bge	fp,zero,138d0 <__call_exitprocs+0xe4>
   13898:	903fec26 	beq	r18,zero,1384c <__call_exitprocs+0x60>
   1389c:	b1400117 	ldw	r5,4(r22)
   138a0:	b1000017 	ldw	r4,0(r22)
   138a4:	2800361e 	bne	r5,zero,13980 <__call_exitprocs+0x194>
   138a8:	20003526 	beq	r4,zero,13980 <__call_exitprocs+0x194>
   138ac:	89000015 	stw	r4,0(r17)
   138b0:	b8000226 	beq	r23,zero,138bc <__call_exitprocs+0xd0>
   138b4:	b809883a 	mov	r4,r23
   138b8:	00000000 	call	0 <__alt_mem_onchip_ram-0x10000>
   138bc:	b009883a 	mov	r4,r22
   138c0:	00000000 	call	0 <__alt_mem_onchip_ram-0x10000>
   138c4:	89000017 	ldw	r4,0(r17)
   138c8:	202d883a 	mov	r22,r4
   138cc:	003fde06 	br	13848 <__call_exitprocs+0x5c>
   138d0:	a0000726 	beq	r20,zero,138f0 <__call_exitprocs+0x104>
   138d4:	b800031e 	bne	r23,zero,138e4 <__call_exitprocs+0xf8>
   138d8:	e73fffc4 	addi	fp,fp,-1
   138dc:	9cffff04 	addi	r19,r19,-4
   138e0:	003fec06 	br	13894 <__call_exitprocs+0xa8>
   138e4:	acc9883a 	add	r4,r21,r19
   138e8:	21001f17 	ldw	r4,124(r4)
   138ec:	253ffa1e 	bne	r4,r20,138d8 <__call_exitprocs+0xec>
   138f0:	b1400117 	ldw	r5,4(r22)
   138f4:	9c09883a 	add	r4,r19,r16
   138f8:	b109883a 	add	r4,r22,r4
   138fc:	297fffc4 	addi	r5,r5,-1
   13900:	22000117 	ldw	r8,4(r4)
   13904:	2f00111e 	bne	r5,fp,1394c <__call_exitprocs+0x160>
   13908:	b7000115 	stw	fp,4(r22)
   1390c:	403ff226 	beq	r8,zero,138d8 <__call_exitprocs+0xec>
   13910:	b0800117 	ldw	r2,4(r22)
   13914:	d8800115 	stw	r2,4(sp)
   13918:	b8000526 	beq	r23,zero,13930 <__call_exitprocs+0x144>
   1391c:	00800044 	movi	r2,1
   13920:	1708983a 	sll	r4,r2,fp
   13924:	b9404017 	ldw	r5,256(r23)
   13928:	214a703a 	and	r5,r4,r5
   1392c:	2800091e 	bne	r5,zero,13954 <__call_exitprocs+0x168>
   13930:	403ee83a 	callr	r8
   13934:	b1000117 	ldw	r4,4(r22)
   13938:	d8800117 	ldw	r2,4(sp)
   1393c:	20bfbf1e 	bne	r4,r2,1383c <__call_exitprocs+0x50>
   13940:	89000017 	ldw	r4,0(r17)
   13944:	25bfe426 	beq	r4,r22,138d8 <__call_exitprocs+0xec>
   13948:	003fbc06 	br	1383c <__call_exitprocs+0x50>
   1394c:	20000115 	stw	zero,4(r4)
   13950:	003fee06 	br	1390c <__call_exitprocs+0x120>
   13954:	ba404117 	ldw	r9,260(r23)
   13958:	accb883a 	add	r5,r21,r19
   1395c:	2248703a 	and	r4,r4,r9
   13960:	2000041e 	bne	r4,zero,13974 <__call_exitprocs+0x188>
   13964:	297fff17 	ldw	r5,-4(r5)
   13968:	d9000217 	ldw	r4,8(sp)
   1396c:	403ee83a 	callr	r8
   13970:	003ff006 	br	13934 <__call_exitprocs+0x148>
   13974:	293fff17 	ldw	r4,-4(r5)
   13978:	403ee83a 	callr	r8
   1397c:	003fed06 	br	13934 <__call_exitprocs+0x148>
   13980:	b023883a 	mov	r17,r22
   13984:	003fd006 	br	138c8 <__call_exitprocs+0xdc>

00013988 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   13988:	defffd04 	addi	sp,sp,-12
   1398c:	df000215 	stw	fp,8(sp)
   13990:	df000204 	addi	fp,sp,8
   13994:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   13998:	0001883a 	nop
   1399c:	e0bffe17 	ldw	r2,-8(fp)
   139a0:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   139a4:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   139a8:	10000226 	beq	r2,zero,139b4 <_exit+0x2c>
    ALT_SIM_FAIL();
   139ac:	002af070 	cmpltui	zero,zero,43969
   139b0:	00000106 	br	139b8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   139b4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   139b8:	003fff06 	br	139b8 <_exit+0x30>
